{"files":[{"file":"git2/blob.h","functions":["git_blob_lookup","git_blob_new","git_blob_set_rawcontent_fromfile","git_blob_set_rawcontent","git_blob_rawcontent","git_blob_rawsize","git_blob_writefile"],"meta":{},"lines":124},{"file":"git2/commit.h","functions":["git_commit_lookup","git_commit_new","git_commit_id","git_commit_message_short","git_commit_message","git_commit_time","git_commit_time_offset","git_commit_committer","git_commit_author","git_commit_tree","git_commit_parentcount","git_commit_parent","git_commit_add_parent","git_commit_set_message","git_commit_set_committer","git_commit_set_author","git_commit_set_tree"],"meta":{},"lines":184},{"file":"git2/index.h","functions":["git_index_open_bare","git_index_open_inrepo","git_index_clear","git_index_free","git_index_read","git_index_write","git_index_find","git_index_add","git_index_remove","git_index_insert","git_index_get","git_index_entrycount"],"meta":{},"lines":194},{"file":"git2/object.h","functions":["git_object_lookup","git_object_new","git_object_write","git_object_id","git_object_type","git_object_owner","git_object_close","git_object_type2string","git_object_string2type","git_object_typeisloose","git_object__size"],"meta":{},"lines":193},{"file":"git2/odb.h","functions":["git_odb_new","git_odb_open","git_odb_add_backend","git_odb_add_alternate","git_odb_close","git_odb_read","git_odb_read_header","git_odb_write","git_odb_exists","git_rawobj_hash","git_rawobj_close"],"meta":{},"lines":197},{"file":"git2/odb_backend.h","functions":[],"meta":{},"lines":66},{"file":"git2/oid.h","functions":["git_oid_mkstr","git_oid_mkraw","git_oid_fmt","git_oid_pathfmt","git_oid_allocfmt","git_oid_to_string","git_oid_cpy","git_oid_cmp","git_oid_shorten_new","git_oid_shorten_add","git_oid_shorten_free"],"meta":{},"lines":187},{"file":"git2/refs.h","functions":["git_reference_lookup","git_reference_create_symbolic","git_reference_create_oid","git_reference_oid","git_reference_target","git_reference_type","git_reference_name","git_reference_resolve","git_reference_owner","git_reference_set_target","git_reference_set_oid","git_reference_rename","git_reference_delete","git_reference_packall","git_reference_listall"],"meta":{},"lines":242},{"file":"git2/repository.h","functions":["git_repository_open","git_repository_open2","git_repository_open3","git_repository_database","git_repository_index","git_repository_free","git_repository_close","git_repository_init"],"meta":{},"lines":187},{"file":"git2/revwalk.h","functions":["git_revwalk_new","git_revwalk_reset","git_revwalk_push","git_revwalk_hide","git_revwalk_next","git_revwalk_sorting","git_revwalk_free","git_revwalk_repository"],"meta":{},"lines":134},{"file":"git2/signature.h","functions":["git_signature_new","git_signature_dup","git_signature_free"],"meta":{},"lines":66},{"file":"git2/tag.h","functions":["git_tag_lookup","git_tag_new","git_tag_id","git_tag_target","git_tag_target_oid","git_tag_type","git_tag_name","git_tag_tagger","git_tag_message","git_tag_set_target","git_tag_set_name","git_tag_set_tagger","git_tag_set_message"],"meta":{},"lines":150},{"file":"git2/tree.h","functions":["git_tree_lookup","git_tree_new","git_tree_id","git_tree_entrycount","git_tree_entry_byname","git_tree_entry_byindex","git_tree_entry_attributes","git_tree_entry_name","git_tree_entry_id","git_tree_entry_2object","git_tree_add_entry","git_tree_remove_entry_byindex","git_tree_remove_entry_byname","git_tree_clear_entries","git_tree_entry_set_id","git_tree_entry_set_name","git_tree_entry_set_attributes"],"meta":{},"lines":219},{"file":"git2/types.h","functions":[],"meta":{},"lines":149}],"functions":{"git_blob_lookup":{"type":"function","file":"git2/blob.h","line":52,"lineto":55,"args":[{"name":"blob","type":"git_blob **","comment":"pointer to the looked up blob"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the blob."},{"name":"id","type":"const git_oid *","comment":"identity of the blob to locate."}],"argline":"git_blob **blob, git_repository *repo, const git_oid *id","sig":"git_blob **::git_repository *::const git_oid *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Lookup a blob object from a repository.\n The generated blob object is owned by the revision\n repo and shall not be freed by the user.</p>\n","comments":"","group":"blob"},"git_blob_new":{"type":"function","file":"git2/blob.h","line":68,"lineto":71,"args":[{"name":"blob","type":"git_blob **","comment":"pointer to the new blob"},{"name":"repo","type":"git_repository *","comment":"The repository where the object will reside"}],"argline":"git_blob **blob, git_repository *repo","sig":"git_blob **::git_repository *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Create a new in-memory git_blob.</p>\n","comments":"<p>The blob object must be manually filled using the &#39;set_rawcontent&#39; methods before it can be written back to disk.</p>\n","group":"blob"},"git_blob_set_rawcontent_fromfile":{"type":"function","file":"git2/blob.h","line":81,"lineto":81,"args":[{"name":"blob","type":"git_blob *","comment":"pointer to the new blob"},{"name":"filename","type":"const char *","comment":"name of the file to read"}],"argline":"git_blob *blob, const char *filename","sig":"git_blob *::const char *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Fill a blob with the contents inside\n the pointed file.</p>\n","comments":"","group":"blob"},"git_blob_set_rawcontent":{"type":"function","file":"git2/blob.h","line":92,"lineto":92,"args":[{"name":"blob","type":"git_blob *","comment":"pointer to the blob"},{"name":"buffer","type":"const void *","comment":"buffer with the contents for the blob"},{"name":"len","type":"size_t","comment":"size of the buffer"}],"argline":"git_blob *blob, const void *buffer, size_t len","sig":"git_blob *::const void *::size_t","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Fill a blob with the contents inside\n the pointed buffer</p>\n","comments":"","group":"blob"},"git_blob_rawcontent":{"type":"function","file":"git2/blob.h","line":105,"lineto":105,"args":[{"name":"blob","type":"git_blob *","comment":"pointer to the blob"}],"argline":"git_blob *blob","sig":"git_blob *","return":{"type":"const void *","comment":" the pointer; NULL if the blob has no contents"},"description":"<p>Get a read-only buffer with the raw content of a blob.</p>\n","comments":"<p>A pointer to the raw content of a blob is returned; this pointer is owned internally by the object and shall not be free&#39;d. The pointer may be invalidated at a later time (e.g. when changing the contents of the blob).</p>\n","group":"blob"},"git_blob_rawsize":{"type":"function","file":"git2/blob.h","line":113,"lineto":113,"args":[{"name":"blob","type":"git_blob *","comment":"pointer to the blob"}],"argline":"git_blob *blob","sig":"git_blob *","return":{"type":"int","comment":" size on bytes"},"description":"<p>Get the size in bytes of the contents of a blob</p>\n","comments":"","group":"blob"},"git_blob_writefile":{"type":"function","file":"git2/blob.h","line":124,"lineto":124,"args":[{"name":"written_id","type":"git_oid *","comment":"return the id of the written blob"},{"name":"repo","type":"git_repository *","comment":"repository where the blob will be written"},{"name":"path","type":"const char *","comment":"file from which the blob will be created"}],"argline":"git_oid *written_id, git_repository *repo, const char *path","sig":"git_oid *::git_repository *::const char *","return":{"type":"int","comment":null},"description":"<p>Read a file from the working folder of a repository\n and write it to the Object Database as a loose blob,\n if such doesn&#39;t exist yet.</p>\n","comments":"","group":"blob"},"git_commit_lookup":{"type":"function","file":"git2/commit.h","line":53,"lineto":56,"args":[{"name":"commit","type":"git_commit **","comment":"pointer to the looked up commit"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the commit."},{"name":"id","type":"const git_oid *","comment":"identity of the commit to locate.  If the object is\n        an annotated tag it will be peeled back to the commit."}],"argline":"git_commit **commit, git_repository *repo, const git_oid *id","sig":"git_commit **::git_repository *::const git_oid *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Lookup a commit object from a repository.\n The generated commit object is owned by the revision\n repo and shall not be freed by the user.</p>\n","comments":"","group":"commit"},"git_commit_new":{"type":"function","file":"git2/commit.h","line":69,"lineto":72,"args":[{"name":"commit","type":"git_commit **","comment":"pointer to the new commit"},{"name":"repo","type":"git_repository *","comment":"The repository where the object will reside"}],"argline":"git_commit **commit, git_repository *repo","sig":"git_commit **::git_repository *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Create a new in-memory git_commit.</p>\n","comments":"<p>The commit object must be manually filled using setter methods before it can be written to its repository.</p>\n","group":"commit"},"git_commit_id":{"type":"function","file":"git2/commit.h","line":79,"lineto":79,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const git_oid *","comment":" object identity for the commit."},"description":"<p>Get the id of a commit.</p>\n","comments":"","group":"commit"},"git_commit_message_short":{"type":"function","file":"git2/commit.h","line":86,"lineto":86,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const char *","comment":" the short message of a commit"},"description":"<p>Get the short (one line) message of a commit.</p>\n","comments":"","group":"commit"},"git_commit_message":{"type":"function","file":"git2/commit.h","line":93,"lineto":93,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const char *","comment":" the message of a commit"},"description":"<p>Get the full message of a commit.</p>\n","comments":"","group":"commit"},"git_commit_time":{"type":"function","file":"git2/commit.h","line":100,"lineto":100,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"time_t","comment":" the time of a commit"},"description":"<p>Get the commit time (i.e. committer time) of a commit.</p>\n","comments":"","group":"commit"},"git_commit_time_offset":{"type":"function","file":"git2/commit.h","line":107,"lineto":107,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"int","comment":" positive or negative timezone offset, in minutes from UTC"},"description":"<p>Get the commit timezone offset (i.e. committer&#39;s preferred timezone) of a commit.</p>\n","comments":"","group":"commit"},"git_commit_committer":{"type":"function","file":"git2/commit.h","line":114,"lineto":114,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const git_signature *","comment":" the committer of a commit"},"description":"<p>Get the committer of a commit.</p>\n","comments":"","group":"commit"},"git_commit_author":{"type":"function","file":"git2/commit.h","line":121,"lineto":121,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"const git_signature *","comment":" the author of a commit"},"description":"<p>Get the author of a commit.</p>\n","comments":"","group":"commit"},"git_commit_tree":{"type":"function","file":"git2/commit.h","line":129,"lineto":129,"args":[{"name":"tree_out","type":"git_tree **","comment":"pointer where to store the tree object"},{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_tree **tree_out, git_commit *commit","sig":"git_tree **::git_commit *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Get the tree pointed to by a commit.</p>\n","comments":"","group":"commit"},"git_commit_parentcount":{"type":"function","file":"git2/commit.h","line":137,"lineto":137,"args":[{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"unsigned int","comment":" integer of count of parents"},"description":"<p>Get the number of parents of this commit</p>\n","comments":"","group":"commit"},"git_commit_parent":{"type":"function","file":"git2/commit.h","line":147,"lineto":147,"args":[{"name":"parent","type":"git_commit **","comment":"Pointer where to store the parent commit"},{"name":"commit","type":"git_commit *","comment":"a previously loaded commit."},{"name":"n","type":"unsigned int","comment":"the position of the parent (from 0 to `parentcount`)"}],"argline":"git_commit **parent, git_commit *commit, unsigned int n","sig":"git_commit **::git_commit *::unsigned int","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Get the specified parent of the commit.</p>\n","comments":"","group":"commit"},"git_commit_add_parent":{"type":"function","file":"git2/commit.h","line":155,"lineto":155,"args":[{"name":"commit","type":"git_commit *","comment":"the commit object"},{"name":"new_parent","type":"git_commit *","comment":"the new commit which will be a parent"}],"argline":"git_commit *commit, git_commit *new_parent","sig":"git_commit *::git_commit *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Add a new parent commit to an existing commit</p>\n","comments":"","group":"commit"},"git_commit_set_message":{"type":"function","file":"git2/commit.h","line":162,"lineto":162,"args":[{"name":"commit","type":"git_commit *","comment":"the commit object"},{"name":"message","type":"const char *","comment":"the new message"}],"argline":"git_commit *commit, const char *message","sig":"git_commit *::const char *","return":{"type":"void","comment":null},"description":"<p>Set the message of a commit</p>\n","comments":"","group":"commit"},"git_commit_set_committer":{"type":"function","file":"git2/commit.h","line":169,"lineto":169,"args":[{"name":"commit","type":"git_commit *","comment":"the commit object"},{"name":"committer_sig","type":"const git_signature *","comment":null}],"argline":"git_commit *commit, const git_signature *committer_sig","sig":"git_commit *::const git_signature *","return":{"type":"void","comment":null},"description":"<p>Set the committer of a commit</p>\n","comments":"","group":"commit"},"git_commit_set_author":{"type":"function","file":"git2/commit.h","line":176,"lineto":176,"args":[{"name":"commit","type":"git_commit *","comment":"the commit object"},{"name":"author_sig","type":"const git_signature *","comment":"signature of the author"}],"argline":"git_commit *commit, const git_signature *author_sig","sig":"git_commit *::const git_signature *","return":{"type":"void","comment":null},"description":"<p>Set the author of a commit</p>\n","comments":"","group":"commit"},"git_commit_set_tree":{"type":"function","file":"git2/commit.h","line":184,"lineto":184,"args":[{"name":"commit","type":"git_commit *","comment":"the commit object"},{"name":"tree","type":"git_tree *","comment":"the new tree"}],"argline":"git_commit *commit, git_tree *tree","sig":"git_commit *::git_tree *","return":{"type":"int","comment":null},"description":"<p>Set the tree which is pointed to by a commit</p>\n","comments":"","group":"commit"},"git_index_open_bare":{"type":"function","file":"git2/index.h","line":88,"lineto":88,"args":[{"name":"index","type":"git_index **","comment":"the pointer for the new index"},{"name":"index_path","type":"const char *","comment":"the path to the index file in disk"}],"argline":"git_index **index, const char *index_path","sig":"git_index **::const char *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Create a new Git index object as a memory representation\n of the Git index file in &#39;index_path&#39;, without a repository\n to back it.</p>\n","comments":"<p>Since there is no ODB behind this index, any Index methods which rely on the ODB (e.g. index_add) will fail with the GIT_EBAREINDEX error code.</p>\n","group":"index"},"git_index_open_inrepo":{"type":"function","file":"git2/index.h","line":98,"lineto":98,"args":[{"name":"index","type":"git_index **","comment":null},{"name":"repo","type":"git_repository *","comment":"the git repo which owns the index"}],"argline":"git_index **index, git_repository *repo","sig":"git_index **::git_repository *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Open the Index inside the git repository pointed\n by &#39;repo&#39;.</p>\n","comments":"","group":"index"},"git_index_clear":{"type":"function","file":"git2/index.h","line":107,"lineto":107,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"void","comment":null},"description":"<p>Clear the contents (all the entries) of an index object.\n This clears the index object in memory; changes must be manually\n written to disk for them to take effect.</p>\n","comments":"","group":"index"},"git_index_free":{"type":"function","file":"git2/index.h","line":114,"lineto":114,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"void","comment":null},"description":"<p>Free an existing index object.</p>\n","comments":"","group":"index"},"git_index_read":{"type":"function","file":"git2/index.h","line":123,"lineto":123,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"int","comment":" 0 on success, otherwise an error code"},"description":"<p>Update the contents of an existing index object in memory\n by reading from the hard disk.</p>\n","comments":"","group":"index"},"git_index_write":{"type":"function","file":"git2/index.h","line":132,"lineto":132,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"int","comment":" 0 on success, otherwise an error code"},"description":"<p>Write an existing index object from memory back to disk\n using an atomic file lock.</p>\n","comments":"","group":"index"},"git_index_find":{"type":"function","file":"git2/index.h","line":142,"lineto":142,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"path to search"}],"argline":"git_index *index, const char *path","sig":"git_index *::const char *","return":{"type":"int","comment":" an index >= 0 if found, -1 otherwise"},"description":"<p>Find the first index of any entires which point to given\n path in the Git index.</p>\n","comments":"","group":"index"},"git_index_add":{"type":"function","file":"git2/index.h","line":152,"lineto":152,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"filename to add"},{"name":"stage","type":"int","comment":"stage for the entry"}],"argline":"git_index *index, const char *path, int stage","sig":"git_index *::const char *::int","return":{"type":"int","comment":" 0 on success, otherwise an error code"},"description":"<p>Add or update an index entry from a file in disk.</p>\n","comments":"","group":"index"},"git_index_remove":{"type":"function","file":"git2/index.h","line":161,"lineto":161,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"position","type":"int","comment":"position of the entry to remove"}],"argline":"git_index *index, int position","sig":"git_index *::int","return":{"type":"int","comment":" 0 on success, otherwise an error code"},"description":"<p>Remove an entry from the index </p>\n","comments":"","group":"index"},"git_index_insert":{"type":"function","file":"git2/index.h","line":174,"lineto":174,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"source_entry","type":"const git_index_entry *","comment":"new entry object"}],"argline":"git_index *index, const git_index_entry *source_entry","sig":"git_index *::const git_index_entry *","return":{"type":"int","comment":" 0 on success, otherwise an error code"},"description":"<p>Insert an entry into the index.\n A full copy (including the &#39;path&#39; string) of the given\n &#39;source_entry&#39; will be inserted on the index; if the index\n already contains an entry for the same path, the entry\n will be updated.</p>\n","comments":"","group":"index"},"git_index_get":{"type":"function","file":"git2/index.h","line":186,"lineto":186,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"n","type":"int","comment":"the position of the entry"}],"argline":"git_index *index, int n","sig":"git_index *::int","return":{"type":"git_index_entry *","comment":" a pointer to the entry; NULL if out of bounds"},"description":"<p>Get a pointer to one of the entries in the index</p>\n","comments":"<p>This entry can be modified, and the changes will be written back to disk on the next write() call.</p>\n","group":"index"},"git_index_entrycount":{"type":"function","file":"git2/index.h","line":194,"lineto":194,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"unsigned int","comment":" integer of count of current entries"},"description":"<p>Get the count of entries currently in the index</p>\n","comments":"","group":"index"},"git_object_lookup":{"type":"function","file":"git2/object.h","line":58,"lineto":58,"args":[{"name":"object","type":"git_object **","comment":"pointer to the looked-up object"},{"name":"repo","type":"git_repository *","comment":"the repository to look up the object"},{"name":"id","type":"const git_oid *","comment":"the unique identifier for the object"},{"name":"type","type":"git_otype","comment":"the type of the object"}],"argline":"git_object **object, git_repository *repo, const git_oid *id, git_otype type","sig":"git_object **::git_repository *::const git_oid *::git_otype","return":{"type":"int","comment":" a reference to the object"},"description":"<p>Lookup a reference to one of the objects in a repostory.</p>\n","comments":"<p>The generated reference is owned by the repository and should not be freed by the user.</p>\n\n<p>The &#39;type&#39; parameter must match the type of the object in the odb; the method will fail otherwise. The special value &#39;GIT_OBJ_ANY&#39; may be passed to let the method guess the object&#39;s type.</p>\n","group":"object"},"git_object_new":{"type":"function","file":"git2/object.h","line":81,"lineto":81,"args":[{"name":"object","type":"git_object **","comment":"pointer to the new object"},{"name":"repo","type":"git_repository *","comment":"Repository where the object belongs"},{"name":"type","type":"git_otype","comment":"Type of the object to be created"}],"argline":"git_object **object, git_repository *repo, git_otype type","sig":"git_object **::git_repository *::git_otype","return":{"type":"int","comment":" the new object"},"description":"<p>Create a new in-memory repository object with\n the given type.</p>\n","comments":"<p>The object&#39;s attributes can be filled in using the corresponding setter methods.</p>\n\n<p>The object will be written back to given git_repository when the git_object_write() function is called; objects cannot be written to disk until all their main attributes have been properly filled.</p>\n\n<p>Objects are instantiated with no SHA1 id; their id will be automatically generated when writing to the repository.</p>\n","group":"object"},"git_object_write":{"type":"function","file":"git2/object.h","line":101,"lineto":101,"args":[{"name":"object","type":"git_object *","comment":"Git object to write back"}],"argline":"git_object *object","sig":"git_object *","return":{"type":"int","comment":" 0 on success; otherwise an error code"},"description":"<p>Write back an object to disk.</p>\n","comments":"<p>The object will be written to its corresponding repository.</p>\n\n<p>If the object has no changes since it was first read from the repository, no actions will take place.</p>\n\n<p>If the object has been modified since it was read from the repository, or it has been created from scratch in memory, it will be written to the repository and its SHA1 ID will be updated accordingly.</p>\n","group":"object"},"git_object_id":{"type":"function","file":"git2/object.h","line":112,"lineto":112,"args":[{"name":"obj","type":"const git_object *","comment":"the repository object"}],"argline":"const git_object *obj","sig":"const git_object *","return":{"type":"const git_oid *","comment":" the SHA1 id"},"description":"<p>Get the id (SHA1) of a repository object</p>\n","comments":"<p>In-memory objects created by git_object_new() do not have a SHA1 ID until they are written on a repository.</p>\n","group":"object"},"git_object_type":{"type":"function","file":"git2/object.h","line":120,"lineto":120,"args":[{"name":"obj","type":"const git_object *","comment":"the repository object"}],"argline":"const git_object *obj","sig":"const git_object *","return":{"type":"git_otype","comment":" the object's type"},"description":"<p>Get the object type of an object</p>\n","comments":"","group":"object"},"git_object_owner":{"type":"function","file":"git2/object.h","line":128,"lineto":128,"args":[{"name":"obj","type":"const git_object *","comment":"the object"}],"argline":"const git_object *obj","sig":"const git_object *","return":{"type":"git_repository *","comment":" the repository who owns this object"},"description":"<p>Get the repository that owns this object</p>\n","comments":"","group":"object"},"git_object_close":{"type":"function","file":"git2/object.h","line":151,"lineto":151,"args":[{"name":"object","type":"git_object *","comment":"the object to close"}],"argline":"git_object *object","sig":"git_object *","return":{"type":"void","comment":null},"description":"<p>Close an open object</p>\n","comments":"<p>This method instructs the library to close an existing object; note that git_objects are owned and cached by the repository so the object may or may not be freed after this library call, depending on how agressive is the caching mechanism used by the repository.</p>\n\n<p>IMPORTANT: It is <em>not</em> necessary to call this method when you stop using an object, since all object memory is automatically reclaimed by the repository when it is freed.</p>\n\n<p>Forgetting to call <code>git_object_close</code> does not cause memory leaks, but it&#39;s is recommended to close as soon as possible the biggest objects (e.g. blobs) to prevent wasting memory space.</p>\n","group":"object"},"git_object_type2string":{"type":"function","file":"git2/object.h","line":162,"lineto":162,"args":[{"name":"type","type":"git_otype","comment":"object type to convert."}],"argline":"git_otype type","sig":"git_otype","return":{"type":"const char *","comment":" the corresponding string representation."},"description":"<p>Convert an object type to it&#39;s string representation.</p>\n","comments":"<p>The result is a pointer to a string in static memory and should not be free()&#39;ed.</p>\n","group":"object"},"git_object_string2type":{"type":"function","file":"git2/object.h","line":170,"lineto":170,"args":[{"name":"str","type":"const char *","comment":"the string to convert."}],"argline":"const char *str","sig":"const char *","return":{"type":"git_otype","comment":" the corresponding git_otype."},"description":"<p>Convert a string object type representation to it&#39;s git_otype.</p>\n","comments":"","group":"object"},"git_object_typeisloose":{"type":"function","file":"git2/object.h","line":179,"lineto":179,"args":[{"name":"type","type":"git_otype","comment":"object type to test."}],"argline":"git_otype type","sig":"git_otype","return":{"type":"int","comment":" true if the type represents a valid loose object type,\n false otherwise."},"description":"<p>Determine if the given git_otype is a valid loose object type.</p>\n","comments":"","group":"object"},"git_object__size":{"type":"function","file":"git2/object.h","line":193,"lineto":193,"args":[{"name":"type","type":"git_otype","comment":"object type to get its size"}],"argline":"git_otype type","sig":"git_otype","return":{"type":"size_t","comment":" size in bytes of the object"},"description":"<p>Get the size in bytes for the structure which\n acts as an in-memory representation of any given\n object type.</p>\n","comments":"<p>For all the core types, this would the equivalent of calling <code>sizeof(git_commit)</code> if the core types were not opaque on the external API.</p>\n","group":"object"},"git_odb_new":{"type":"function","file":"git2/odb.h","line":52,"lineto":52,"args":[{"name":"out","type":"git_odb **","comment":"location to store the database pointer, if opened.\n            Set to NULL if the open failed."}],"argline":"git_odb **out","sig":"git_odb **","return":{"type":"int","comment":" GIT_SUCCESS if the database was created; otherwise an error\n         code describing why the open was not possible."},"description":"<p>Create a new object database with no backends.</p>\n","comments":"<p>Before the ODB can be used for read/writing, a custom database backend must be manually added using <code>git_odb_add_backend()</code></p>\n","group":"odb"},"git_odb_open":{"type":"function","file":"git2/odb.h","line":71,"lineto":71,"args":[{"name":"out","type":"git_odb **","comment":"location to store the database pointer, if opened.\n            Set to NULL if the open failed."},{"name":"objects_dir","type":"const char *","comment":"path of the backends' \"objects\" directory."}],"argline":"git_odb **out, const char *objects_dir","sig":"git_odb **::const char *","return":{"type":"int","comment":" GIT_SUCCESS if the database opened; otherwise an error\n         code describing why the open was not possible."},"description":"<p>Create a new object database and automatically add\n the two default backends:</p>\n","comments":"<pre><code>- git_odb_backend_loose: read and write loose object files      from disk, assuming `objects_dir` as the Objects folder\n\n- git_odb_backend_pack: read objects from packfiles,        assuming `objects_dir` as the Objects folder which      contains a &#39;pack/&#39; folder with the corresponding data\n</code></pre>\n","group":"odb"},"git_odb_add_backend":{"type":"function","file":"git2/odb.h","line":82,"lineto":82,"args":[{"name":"odb","type":"git_odb *","comment":"database to add the backend to"},{"name":"backend","type":"git_odb_backend *","comment":"pointer to a git_odb_backend instance"},{"name":"priority","type":"int","comment":null}],"argline":"git_odb *odb, git_odb_backend *backend, int priority","sig":"git_odb *::git_odb_backend *::int","return":{"type":"int","comment":" 0 on sucess; error code otherwise"},"description":"<p>Add a custom backend to an existing Object DB</p>\n","comments":"<p>Read <odb_backends.h> for more information.</p>\n","group":"odb"},"git_odb_add_alternate":{"type":"function","file":"git2/odb.h","line":99,"lineto":99,"args":[{"name":"odb","type":"git_odb *","comment":"database to add the backend to"},{"name":"backend","type":"git_odb_backend *","comment":"pointer to a git_odb_backend instance"},{"name":"priority","type":"int","comment":null}],"argline":"git_odb *odb, git_odb_backend *backend, int priority","sig":"git_odb *::git_odb_backend *::int","return":{"type":"int","comment":" 0 on sucess; error code otherwise"},"description":"<p>Add a custom backend to an existing Object DB; this\n backend will work as an alternate.</p>\n","comments":"<p>Alternate backends are always checked for objects <em>after</em> all the main backends have been exhausted.</p>\n\n<p>Writing is disabled on alternate backends.</p>\n\n<p>Read <odb_backends.h> for more information.</p>\n","group":"odb"},"git_odb_close":{"type":"function","file":"git2/odb.h","line":105,"lineto":105,"args":[{"name":"db","type":"git_odb *","comment":"database pointer to close.  If NULL no action is taken."}],"argline":"git_odb *db","sig":"git_odb *","return":{"type":"void","comment":null},"description":"<p>Close an open object database.</p>\n","comments":"","group":"odb"},"git_odb_read":{"type":"function","file":"git2/odb.h","line":126,"lineto":126,"args":[{"name":"out","type":"git_rawobj *","comment":"object descriptor to populate upon reading."},{"name":"db","type":"git_odb *","comment":"database to search for the object in."},{"name":"id","type":"const git_oid *","comment":"identity of the object to read."}],"argline":"git_rawobj *out, git_odb *db, const git_oid *id","sig":"git_rawobj *::git_odb *::const git_oid *","return":{"type":"int","comment":" - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database."},"description":"<p>Read an object from the database.</p>\n","comments":"<p>If GIT_ENOTFOUND then out-&gt;data is set to NULL.</p>\n","group":"odb"},"git_odb_read_header":{"type":"function","file":"git2/odb.h","line":145,"lineto":145,"args":[{"name":"out","type":"git_rawobj *","comment":"object descriptor to populate upon reading."},{"name":"db","type":"git_odb *","comment":"database to search for the object in."},{"name":"id","type":"const git_oid *","comment":"identity of the object to read."}],"argline":"git_rawobj *out, git_odb *db, const git_oid *id","sig":"git_rawobj *::git_odb *::const git_oid *","return":{"type":"int","comment":" - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database."},"description":"<p>Read the header of an object from the database, without\n reading its full contents.</p>\n","comments":"<p>Only the &#39;type&#39; and &#39;len&#39; fields of the git_rawobj structure are filled. The &#39;data&#39; pointer will always be NULL.</p>\n\n<p>The raw object pointed by &#39;out&#39; doesn&#39;t need to be manually closed with git_rawobj_close().</p>\n","group":"odb"},"git_odb_write":{"type":"function","file":"git2/odb.h","line":157,"lineto":157,"args":[{"name":"id","type":"git_oid *","comment":"identity of the object written."},{"name":"db","type":"git_odb *","comment":"database to which the object should be written."},{"name":"obj","type":"git_rawobj *","comment":"object descriptor for the object to write."}],"argline":"git_oid *id, git_odb *db, git_rawobj *obj","sig":"git_oid *::git_odb *::git_rawobj *","return":{"type":"int","comment":" - GIT_SUCCESS if the object was written;\n - GIT_ERROR otherwise."},"description":"<p>Write an object to the database.</p>\n","comments":"","group":"odb"},"git_odb_exists":{"type":"function","file":"git2/odb.h","line":168,"lineto":168,"args":[{"name":"db","type":"git_odb *","comment":"database to be searched for the given object."},{"name":"id","type":"const git_oid *","comment":"the object to search for."}],"argline":"git_odb *db, const git_oid *id","sig":"git_odb *::const git_oid *","return":{"type":"int","comment":" - true, if the object was found\n - false, otherwise"},"description":"<p>Determine if the given object can be found in the object database.</p>\n","comments":"","group":"odb"},"git_rawobj_hash":{"type":"function","file":"git2/odb.h","line":186,"lineto":186,"args":[{"name":"id","type":"git_oid *","comment":"the resulting object-ID."},{"name":"obj","type":"git_rawobj *","comment":"the object whose hash is to be determined."}],"argline":"git_oid *id, git_rawobj *obj","sig":"git_oid *::git_rawobj *","return":{"type":"int","comment":" - GIT_SUCCESS if the object-ID was correctly determined.\n - GIT_ERROR if the given object is malformed."},"description":"<p>Determine the object-ID (sha1 hash) of the given git_rawobj.</p>\n","comments":"<p>The input obj must be a valid loose object type and the data pointer must not be NULL, unless the len field is also zero.</p>\n","group":"rawobj"},"git_rawobj_close":{"type":"function","file":"git2/odb.h","line":197,"lineto":197,"args":[{"name":"obj","type":"git_rawobj *","comment":"object descriptor to free."}],"argline":"git_rawobj *obj","sig":"git_rawobj *","return":{"type":"void","comment":null},"description":"<p>Release all memory used by the obj structure.</p>\n","comments":"<p>As a result of this call, obj-&gt;data will be set to NULL.</p>\n\n<p>If obj-&gt;data is already NULL, nothing happens.</p>\n","group":"rawobj"},"git_oid_mkstr":{"type":"function","file":"git2/oid.h","line":60,"lineto":60,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"str","type":"const char *","comment":"input hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (40 bytes)."}],"argline":"git_oid *out, const char *str","sig":"git_oid *::const char *","return":{"type":"int","comment":" GIT_SUCCESS if valid; GIT_ENOTOID on failure."},"description":"<p>Parse a hex formatted object id into a git_oid.</p>\n","comments":"","group":"oid"},"git_oid_mkraw":{"type":"function","file":"git2/oid.h","line":67,"lineto":67,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"raw","type":"const unsigned char *","comment":"the raw input bytes to be copied."}],"argline":"git_oid *out, const unsigned char *raw","sig":"git_oid *::const unsigned char *","return":{"type":"void","comment":null},"description":"<p>Copy an already raw oid into a git_oid structure.</p>\n","comments":"","group":"oid"},"git_oid_fmt":{"type":"function","file":"git2/oid.h","line":78,"lineto":78,"args":[{"name":"str","type":"char *","comment":"output hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (40 bytes).  Only the\n        oid digits are written; a '\n\\\n0' terminator must be added\n        by the caller if it is required."},{"name":"oid","type":"const git_oid *","comment":"oid structure to format."}],"argline":"char *str, const git_oid *oid","sig":"char *::const git_oid *","return":{"type":"void","comment":null},"description":"<p>Format a git_oid into a hex string.</p>\n","comments":"","group":"oid"},"git_oid_pathfmt":{"type":"function","file":"git2/oid.h","line":93,"lineto":93,"args":[{"name":"str","type":"char *","comment":"output hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (41 bytes).  Only the\n        oid digits are written; a '\n\\\n0' terminator must be added\n        by the caller if it is required."},{"name":"oid","type":"const git_oid *","comment":"oid structure to format."}],"argline":"char *str, const git_oid *oid","sig":"char *::const git_oid *","return":{"type":"void","comment":null},"description":"<p>Format a git_oid into a loose-object path string.</p>\n\n<p><p>\n The resulting string is &quot;aa/...&quot;, where &quot;aa&quot; is the first two\n hex digitis of the oid and &quot;...&quot; is the remaining 38 digits.</p>\n","comments":"","group":"oid"},"git_oid_allocfmt":{"type":"function","file":"git2/oid.h","line":101,"lineto":101,"args":[{"name":"oid","type":"const git_oid *","comment":"the oid structure to format"}],"argline":"const git_oid *oid","sig":"const git_oid *","return":{"type":"char *","comment":" the c-string; NULL if memory is exhausted.  Caller must\n         deallocate the string with free()."},"description":"<p>Format a gid_oid into a newly allocated c-string.</p>\n","comments":"","group":"oid"},"git_oid_to_string":{"type":"function","file":"git2/oid.h","line":118,"lineto":118,"args":[{"name":"out","type":"char *","comment":"the buffer into which the oid string is output."},{"name":"n","type":"size_t","comment":"the size of the out buffer."},{"name":"oid","type":"const git_oid *","comment":"the oid structure to format."}],"argline":"char *out, size_t n, const git_oid *oid","sig":"char *::size_t::const git_oid *","return":{"type":"char *","comment":" the out buffer pointer, assuming no input parameter\n         errors, otherwise a pointer to an empty string."},"description":"<p>Format a git_oid into a buffer as a hex format c-string.</p>\n\n<p><p>\n If the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting\n oid c-string will be truncated to n-1 characters. If there are\n any input parameter errors (out == NULL, n == 0, oid == NULL),\n then a pointer to an empty string is returned, so that the return\n value can always be printed.</p>\n","comments":"","group":"oid"},"git_oid_cpy":{"type":"function","file":"git2/oid.h","line":125,"lineto":125,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"src","type":"const git_oid *","comment":"oid structure to copy from."}],"argline":"git_oid *out, const git_oid *src","sig":"git_oid *::const git_oid *","return":{"type":"void","comment":null},"description":"<p>Copy an oid from one structure to another.</p>\n","comments":"","group":"oid"},"git_oid_cmp":{"type":"function","file":"git2/oid.h","line":133,"lineto":133,"args":[{"name":"a","type":"const git_oid *","comment":"first oid structure."},{"name":"b","type":"const git_oid *","comment":"second oid structure."}],"argline":"const git_oid *a, const git_oid *b","sig":"const git_oid *::const git_oid *","return":{"type":"int","comment":" \n<\n0, 0, >0 if a \n<\n b, a == b, a > b."},"description":"<p>Compare two oid structures.</p>\n","comments":"","group":"oid"},"git_oid_shorten_new":{"type":"function","file":"git2/oid.h","line":154,"lineto":154,"args":[{"name":"min_length","type":"size_t","comment":"The minimal length for all identifiers,\n\t\twhich will be used even if shorter OIDs would still\n\t\tbe unique."}],"argline":"size_t min_length","sig":"size_t","return":{"type":"git_oid_shorten *","comment":" a `git_oid_shorten` instance, NULL if OOM"},"description":"<p>Create a new OID shortener.</p>\n","comments":"<p>The OID shortener is used to process a list of OIDs in text form and return the shortest length that would uniquely identify all of them.</p>\n\n<p>E.g. look at the result of <code>git log --abbrev</code>.</p>\n","group":"oid"},"git_oid_shorten_add":{"type":"function","file":"git2/oid.h","line":180,"lineto":180,"args":[{"name":"os","type":"git_oid_shorten *","comment":"a `git_oid_shorten` instance"},{"name":"text_oid","type":"const char *","comment":"an OID in text form"}],"argline":"git_oid_shorten *os, const char *text_oid","sig":"git_oid_shorten *::const char *","return":{"type":"int","comment":" the minimal length to uniquely identify all OIDs\n\t\tadded so far to the set; or an error code (\n<\n0) if an\n\t\terror occurs."},"description":"<p>Add a new OID to set of shortened OIDs and calculate\n the minimal length to uniquely identify all the OIDs in\n the set.</p>\n","comments":"<p>The OID is expected to be a 40-char hexadecimal string. The OID is owned by the user and will not be modified or freed.</p>\n\n<p>For performance reasons, there is a hard-limit of how many OIDs can be added to a single set (around ~22000, assuming a mostly randomized distribution), which should be enough for any kind of program, and keeps the algorithm fast and memory-efficient.</p>\n\n<p>Attempting to add more than those OIDs will result in a GIT_ENOMEM error</p>\n","group":"oid"},"git_oid_shorten_free":{"type":"function","file":"git2/oid.h","line":187,"lineto":187,"args":[{"name":"os","type":"git_oid_shorten *","comment":"a `git_oid_shorten` instance"}],"argline":"git_oid_shorten *os","sig":"git_oid_shorten *","return":{"type":"void","comment":null},"description":"<p>Free an OID shortener instance</p>\n","comments":"","group":"oid"},"git_reference_lookup":{"type":"function","file":"git2/refs.h","line":52,"lineto":52,"args":[{"name":"reference_out","type":"git_reference **","comment":"pointer to the looked-up reference"},{"name":"repo","type":"git_repository *","comment":"the repository to look up the reference"},{"name":"name","type":"const char *","comment":"the long name for the reference (e.g. HEAD, ref/heads/master, refs/tags/v0.1.0, ...)"}],"argline":"git_reference **reference_out, git_repository *repo, const char *name","sig":"git_reference **::git_repository *::const char *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Lookup a reference by its name in a repository.</p>\n","comments":"<p>The generated reference is owned by the repository and should not be freed by the user.</p>\n","group":"reference"},"git_reference_create_symbolic":{"type":"function","file":"git2/refs.h","line":69,"lineto":69,"args":[{"name":"ref_out","type":"git_reference **","comment":"Pointer to the newly created reference"},{"name":"repo","type":"git_repository *","comment":"Repository where that reference will live"},{"name":"name","type":"const char *","comment":"The name of the reference"},{"name":"target","type":"const char *","comment":"The target of the reference"}],"argline":"git_reference **ref_out, git_repository *repo, const char *name, const char *target","sig":"git_reference **::git_repository *::const char *::const char *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Create a new symbolic reference.</p>\n","comments":"<p>The reference will be created in the repository and written to the disk.</p>\n\n<p>This reference is owned by the repository and shall not be free&#39;d by the user.</p>\n","group":"reference"},"git_reference_create_oid":{"type":"function","file":"git2/refs.h","line":86,"lineto":86,"args":[{"name":"ref_out","type":"git_reference **","comment":"Pointer to the newly created reference"},{"name":"repo","type":"git_repository *","comment":"Repository where that reference will live"},{"name":"name","type":"const char *","comment":"The name of the reference"},{"name":"id","type":"const git_oid *","comment":"The object id pointed to by the reference."}],"argline":"git_reference **ref_out, git_repository *repo, const char *name, const git_oid *id","sig":"git_reference **::git_repository *::const char *::const git_oid *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Create a new object id reference.</p>\n","comments":"<p>The reference will be created in the repository and written to the disk.</p>\n\n<p>This reference is owned by the repository and shall not be free&#39;d by the user.</p>\n","group":"reference"},"git_reference_oid":{"type":"function","file":"git2/refs.h","line":96,"lineto":96,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"const git_oid *","comment":" a pointer to the oid if available, NULL otherwise"},"description":"<p>Get the OID pointed to by a reference.</p>\n","comments":"<p>Only available if the reference is direct (i.e. not symbolic)</p>\n","group":"reference"},"git_reference_target":{"type":"function","file":"git2/refs.h","line":106,"lineto":106,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"const char *","comment":" a pointer to the name if available, NULL otherwise"},"description":"<p>Get full name to the reference pointed by this reference</p>\n","comments":"<p>Only available if the reference is symbolic</p>\n","group":"reference"},"git_reference_type":{"type":"function","file":"git2/refs.h","line":116,"lineto":116,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"git_rtype","comment":" the type"},"description":"<p>Get the type of a reference</p>\n","comments":"<p>Either direct (GIT_REF_OID) or symbolic (GIT_REF_SYMBOLIC)</p>\n","group":"reference"},"git_reference_name":{"type":"function","file":"git2/refs.h","line":124,"lineto":124,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"const char *","comment":" the full name for the ref"},"description":"<p>Get the full name of a reference</p>\n","comments":"","group":"reference"},"git_reference_resolve":{"type":"function","file":"git2/refs.h","line":139,"lineto":139,"args":[{"name":"resolved_ref","type":"git_reference **","comment":"Pointer to the peeled reference"},{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference **resolved_ref, git_reference *ref","sig":"git_reference **::git_reference *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Resolve a symbolic reference </p>\n","comments":"<p>Thie method iteratively peels a symbolic reference until it resolves to a direct reference to an OID.</p>\n\n<p>If a direct reference is passed as an argument, that reference is returned immediately</p>\n","group":"reference"},"git_reference_owner":{"type":"function","file":"git2/refs.h","line":147,"lineto":147,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"git_repository *","comment":" a pointer to the repo"},"description":"<p>Get the repository where a reference resides</p>\n","comments":"","group":"reference"},"git_reference_set_target":{"type":"function","file":"git2/refs.h","line":162,"lineto":162,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"},{"name":"target","type":"const char *","comment":"The new target for the reference"}],"argline":"git_reference *ref, const char *target","sig":"git_reference *::const char *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Set the symbolic target of a reference.</p>\n","comments":"<p>The reference must be a symbolic reference, otherwise this method will fail.</p>\n\n<p>The reference will be automatically updated in memory and on disk.</p>\n","group":"reference"},"git_reference_set_oid":{"type":"function","file":"git2/refs.h","line":177,"lineto":177,"args":[{"name":"ref","type":"git_reference *","comment":"The reference"},{"name":"id","type":"const git_oid *","comment":null}],"argline":"git_reference *ref, const git_oid *id","sig":"git_reference *::const git_oid *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Set the OID target of a reference.</p>\n","comments":"<p>The reference must be a direct reference, otherwise this method will fail.</p>\n\n<p>The reference will be automatically updated in memory and on disk.</p>\n","group":"reference"},"git_reference_rename":{"type":"function","file":"git2/refs.h","line":190,"lineto":190,"args":[{"name":"ref","type":"git_reference *","comment":null},{"name":"new_name","type":"const char *","comment":null}],"argline":"git_reference *ref, const char *new_name","sig":"git_reference *::const char *","return":{"type":"int","comment":null},"description":"<p>Rename an existing reference</p>\n","comments":"<p>This method works for both direct and symbolic references. The new name will be checked for validity and may be modified into a normalized form.</p>\n\n<p>The refernece will be immediately renamed in-memory and on disk.</p>\n","group":"reference"},"git_reference_delete":{"type":"function","file":"git2/refs.h","line":201,"lineto":201,"args":[{"name":"ref","type":"git_reference *","comment":null}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"int","comment":null},"description":"<p>Delete an existing reference</p>\n","comments":"<p>This method works for both direct and symbolic references.</p>\n\n<p>The reference will be immediately removed on disk and from memory. The given reference pointer will no longer be valid.</p>\n","group":"reference"},"git_reference_packall":{"type":"function","file":"git2/refs.h","line":219,"lineto":219,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where the loose refs will be packed"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Pack all the loose references in the repository</p>\n","comments":"<p>This method will load into the cache all the loose references on the repository and update the  <code>packed-refs</code> file with them.</p>\n\n<p>Once the <code>packed-refs</code> file has been written properly, the loose references will be removed from disk.</p>\n\n<p>WARNING: calling this method may invalidate any existing references previously loaded on the cache.</p>\n","group":"reference"},"git_reference_listall":{"type":"function","file":"git2/refs.h","line":242,"lineto":242,"args":[{"name":"array","type":"git_strarray *","comment":"Pointer to a git_strarray structure where\n\t\tthe reference names will be stored"},{"name":"repo","type":"git_repository *","comment":"Repository where to find the refs"},{"name":"list_flags","type":"unsigned int","comment":"Filtering flags for the reference\n\t\tlisting."}],"argline":"git_strarray *array, git_repository *repo, unsigned int list_flags","sig":"git_strarray *::git_repository *::unsigned int","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Fill a list with all the references that can be found\n in a repository.</p>\n","comments":"<p>The listed references may be filtered by type, or using a bitwise OR of several types. Use the magic value <code>GIT_REF_LISTALL</code> to obtain all references, including packed ones.</p>\n\n<p>The string array will be filled with the names of all references; these values are owned by the user and should be free&#39;d manually when no longer needed, using <code>git_strarray_free</code>.</p>\n","group":"reference"},"git_repository_open":{"type":"function","file":"git2/repository.h","line":64,"lineto":64,"args":[{"name":"repository","type":"git_repository **","comment":"pointer to the repo which will be opened"},{"name":"path","type":"const char *","comment":"the path to the repository"}],"argline":"git_repository **repository, const char *path","sig":"git_repository **::const char *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Open a git repository.</p>\n","comments":"<p>The &#39;path&#39; argument must point to an existing git repository folder, e.g.</p>\n\n<pre><code>    /path/to/my_repo/.git/  (normal repository)                         objects/                            index                           HEAD\n\n    /path/to/bare_repo/     (bare repository)                       objects/                        index                       HEAD\n\nThe method will automatically detect if &#39;path&#39; is a normal  or bare repository or fail is &#39;path&#39; is neither.\n</code></pre>\n","group":"repository"},"git_repository_open2":{"type":"function","file":"git2/repository.h","line":93,"lineto":97,"args":[{"name":"repository","type":"git_repository **","comment":"pointer to the repo which will be opened"},{"name":"git_dir","type":"const char *","comment":"The full path to the repository folder\n\t\te.g. a '.git' folder for live repos, any folder for bare\n\t\tEquivalent to $GIT_DIR. \n\t\tCannot be NULL."},{"name":"git_object_directory","type":"const char *","comment":"The full path to the ODB folder.\n\t\tthe folder where all the loose and packed objects are stored\n\t\tEquivalent to $GIT_OBJECT_DIRECTORY.\n\t\tIf NULL, \"$GIT_DIR/objects/\" is assumed."},{"name":"git_index_file","type":"const char *","comment":"The full path to the index (dircache) file\n\t\tEquivalent to $GIT_INDEX_FILE.\n\t\tIf NULL, \"$GIT_DIR/index\" is assumed."},{"name":"git_work_tree","type":"const char *","comment":"The full path to the working tree of the repository,\n\t\tif the repository is not bare.\n\t\tEquivalent to $GIT_WORK_TREE.\n\t\tIf NULL, the repository is assumed to be bare."}],"argline":"git_repository **repository, const char *git_dir, const char *git_object_directory, const char *git_index_file, const char *git_work_tree","sig":"git_repository **::const char *::const char *::const char *::const char *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Open a git repository by manually specifying all its paths</p>\n","comments":"","group":"repository"},"git_repository_open3":{"type":"function","file":"git2/repository.h","line":129,"lineto":133,"args":[{"name":"repository","type":"git_repository **","comment":"pointer to the repo which will be opened"},{"name":"git_dir","type":"const char *","comment":"The full path to the repository folder\n\t\te.g. a '.git' folder for live repos, any folder for bare\n\t\tEquivalent to $GIT_DIR. \n\t\tCannot be NULL."},{"name":"object_database","type":"git_odb *","comment":"A pointer to a git_odb created \n&\n initialized\n\t\tby the user (e.g. with custom backends). This object database\n\t\twill be owned by the repository and will be automatically free'd.\n\t\tIt should not be manually free'd by the user, or this\n\t\tgit_repository object will become invalid."},{"name":"git_index_file","type":"const char *","comment":"The full path to the index (dircache) file\n\t\tEquivalent to $GIT_INDEX_FILE.\n\t\tIf NULL, \"$GIT_DIR/index\" is assumed."},{"name":"git_work_tree","type":"const char *","comment":"The full path to the working tree of the repository,\n\t\tif the repository is not bare.\n\t\tEquivalent to $GIT_WORK_TREE.\n\t\tIf NULL, the repository is assumed to be bare."}],"argline":"git_repository **repository, const char *git_dir, git_odb *object_database, const char *git_index_file, const char *git_work_tree","sig":"git_repository **::const char *::git_odb *::const char *::const char *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Open a git repository by manually specifying its paths and\n the object database it will use.</p>\n","comments":"","group":"repository"},"git_repository_database":{"type":"function","file":"git2/repository.h","line":141,"lineto":141,"args":[{"name":"repo","type":"git_repository *","comment":"a repository object"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"git_odb *","comment":" a pointer to the object db"},"description":"<p>Get the object database behind a Git repository</p>\n","comments":"","group":"repository"},"git_repository_index":{"type":"function","file":"git2/repository.h","line":153,"lineto":153,"args":[{"name":"index","type":"git_index **","comment":"Pointer where to store the index"},{"name":"repo","type":"git_repository *","comment":"a repository object"}],"argline":"git_index **index, git_repository *repo","sig":"git_index **::git_repository *","return":{"type":"int","comment":" 0 on success; error code if the index could not be opened"},"description":"<p>Get the Index file of a Git repository</p>\n","comments":"<p>This is a cheap operation; the index is only opened on the first call, and subsequent calls only retrieve the previous pointer.</p>\n","group":"repository"},"git_repository_free":{"type":"function","file":"git2/repository.h","line":160,"lineto":160,"args":[{"name":"repo","type":"git_repository *","comment":"repository handle to close. If NULL nothing occurs."}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"void","comment":null},"description":"<p>Free a previously allocated repository</p>\n","comments":"","group":"repository"},"git_repository_close":{"type":"function","file":"git2/repository.h","line":170,"lineto":170,"args":[{"name":"repo","type":"git_repository *","comment":"repository handle to collect. If NULL nothing occurs."}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"void","comment":null},"description":"<p>Force a garbage collector pass on the repository</p>\n","comments":"<p>This will force-free any cached objects that have been previously marked by the user as closed (<code>git_object_close</code>).</p>\n","group":"repository"},"git_repository_init":{"type":"function","file":"git2/repository.h","line":187,"lineto":187,"args":[{"name":"repo_out","type":"git_repository **","comment":"pointer to the repo which will be created or reinitialized"},{"name":"path","type":"const char *","comment":"the path to the repository"},{"name":"is_bare","type":"unsigned int","comment":"if true, a Git repository without a working directory is created \n\t\tat the pointed path. If false, provided path will be considered as the working \n\t\tdirectory into which the .git directory will be created."}],"argline":"git_repository **repo_out, const char *path, unsigned int is_bare","sig":"git_repository **::const char *::unsigned int","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Creates a new Git repository in the given folder.</p>\n","comments":"<p>TODO:  - Reinit the repository - Create config files</p>\n","group":"repository"},"git_revwalk_new":{"type":"function","file":"git2/revwalk.h","line":77,"lineto":77,"args":[{"name":"walker","type":"git_revwalk **","comment":"pointer to the new revision walker"},{"name":"repo","type":"git_repository *","comment":"the repo to walk through"}],"argline":"git_revwalk **walker, git_repository *repo","sig":"git_revwalk **::git_repository *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Allocate a new revision walker to iterate through a repo.</p>\n","comments":"","group":"revwalk"},"git_revwalk_reset":{"type":"function","file":"git2/revwalk.h","line":83,"lineto":83,"args":[{"name":"walker","type":"git_revwalk *","comment":"handle to reset."}],"argline":"git_revwalk *walker","sig":"git_revwalk *","return":{"type":"void","comment":null},"description":"<p>Reset the walking machinery for reuse.</p>\n","comments":"","group":"revwalk"},"git_revwalk_push":{"type":"function","file":"git2/revwalk.h","line":92,"lineto":92,"args":[{"name":"walk","type":"git_revwalk *","comment":null},{"name":"oid","type":"const git_oid *","comment":null}],"argline":"git_revwalk *walk, const git_oid *oid","sig":"git_revwalk *::const git_oid *","return":{"type":"int","comment":null},"description":"<p>Mark a commit to start traversal from.\n The commit object must belong to the repo which is being walked through.</p>\n","comments":"","group":"revwalk"},"git_revwalk_hide":{"type":"function","file":"git2/revwalk.h","line":100,"lineto":100,"args":[{"name":"walk","type":"git_revwalk *","comment":null},{"name":"oid","type":"const git_oid *","comment":null}],"argline":"git_revwalk *walk, const git_oid *oid","sig":"git_revwalk *::const git_oid *","return":{"type":"int","comment":null},"description":"<p>Mark a commit (and its ancestors) uninteresting for the output.</p>\n","comments":"","group":"revwalk"},"git_revwalk_next":{"type":"function","file":"git2/revwalk.h","line":110,"lineto":110,"args":[{"name":"oid","type":"git_oid *","comment":null},{"name":"walk","type":"git_revwalk *","comment":"the walker to pop the commit from."}],"argline":"git_oid *oid, git_revwalk *walk","sig":"git_oid *::git_revwalk *","return":{"type":"int","comment":" GIT_SUCCESS if the next commit was found;\n\tGIT_EREVWALKOVER if there are no commits left to iterate"},"description":"<p>Get the next commit from the revision traversal.</p>\n","comments":"","group":"revwalk"},"git_revwalk_sorting":{"type":"function","file":"git2/revwalk.h","line":119,"lineto":119,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal."},{"name":"sort_mode","type":"unsigned int","comment":"combination of GIT_RPSORT_XXX flags"}],"argline":"git_revwalk *walk, unsigned int sort_mode","sig":"git_revwalk *::unsigned int","return":{"type":"int","comment":null},"description":"<p>Change the sorting mode when iterating through the\n repository&#39;s contents.\n Changing the sorting mode resets the walker.</p>\n","comments":"","group":"revwalk"},"git_revwalk_free":{"type":"function","file":"git2/revwalk.h","line":125,"lineto":125,"args":[{"name":"walk","type":"git_revwalk *","comment":"traversal handle to close.  If NULL nothing occurs."}],"argline":"git_revwalk *walk","sig":"git_revwalk *","return":{"type":"void","comment":null},"description":"<p>Free a revwalk previously allocated.</p>\n","comments":"","group":"revwalk"},"git_revwalk_repository":{"type":"function","file":"git2/revwalk.h","line":134,"lineto":134,"args":[{"name":"walk","type":"git_revwalk *","comment":"the revision walker"}],"argline":"git_revwalk *walk","sig":"git_revwalk *","return":{"type":"git_repository *","comment":" the repository being walked"},"description":"<p>Return the repository on which this walker\n is operating.</p>\n","comments":"","group":"revwalk"},"git_signature_new":{"type":"function","file":"git2/signature.h","line":50,"lineto":50,"args":[{"name":"name","type":"const char *","comment":null},{"name":"email","type":"const char *","comment":null},{"name":"time","type":"time_t","comment":null},{"name":"offset","type":"int","comment":null}],"argline":"const char *name, const char *email, time_t time, int offset","sig":"const char *::const char *::time_t::int","return":{"type":"git_signature *","comment":" the new sig, NULl on out of memory"},"description":"<p>Create a new action signature. The signature must be freed\n manually or using git_signature_free</p>\n","comments":"<p>email of the person  time when the action happened  timezone offset in minutes for the time </p>\n","group":"signature"},"git_signature_dup":{"type":"function","file":"git2/signature.h","line":59,"lineto":59,"args":[{"name":"sig","type":"const git_signature *","comment":null}],"argline":"const git_signature *sig","sig":"const git_signature *","return":{"type":"git_signature *","comment":" a copy of sig, NULL on out of memory"},"description":"<p>Create a copy of an existing signature.</p>\n","comments":"<p>All internal strings are also duplicated.  signature to duplicated </p>\n","group":"signature"},"git_signature_free":{"type":"function","file":"git2/signature.h","line":66,"lineto":66,"args":[{"name":"sig","type":"git_signature *","comment":null}],"argline":"git_signature *sig","sig":"git_signature *","return":{"type":"void","comment":null},"description":"<p>Free an existing signature</p>\n","comments":"<p>signature to free</p>\n","group":"signature"},"git_tag_lookup":{"type":"function","file":"git2/tag.h","line":52,"lineto":55,"args":[{"name":"tag","type":"git_tag **","comment":"pointer to the looked up tag"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the tag."},{"name":"id","type":"const git_oid *","comment":"identity of the tag to locate."}],"argline":"git_tag **tag, git_repository *repo, const git_oid *id","sig":"git_tag **::git_repository *::const git_oid *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Lookup a tag object from the repository.\n The generated tag object is owned by the revision\n repo and shall not be freed by the user.</p>\n","comments":"","group":"tag"},"git_tag_new":{"type":"function","file":"git2/tag.h","line":68,"lineto":71,"args":[{"name":"tag","type":"git_tag **","comment":"pointer to the new tag"},{"name":"repo","type":"git_repository *","comment":"The repository where the object will reside"}],"argline":"git_tag **tag, git_repository *repo","sig":"git_tag **::git_repository *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Create a new in-memory git_tag.</p>\n","comments":"<p>The tag object must be manually filled using setter methods before it can be written to its repository.</p>\n","group":"tag"},"git_tag_id":{"type":"function","file":"git2/tag.h","line":78,"lineto":78,"args":[{"name":"tag","type":"git_tag *","comment":"a previously loaded tag."}],"argline":"git_tag *tag","sig":"git_tag *","return":{"type":"const git_oid *","comment":" object identity for the tag."},"description":"<p>Get the id of a tag.</p>\n","comments":"","group":"tag"},"git_tag_target":{"type":"function","file":"git2/tag.h","line":86,"lineto":86,"args":[{"name":"target","type":"git_object **","comment":"pointer where to store the target"},{"name":"t","type":"git_tag *","comment":null}],"argline":"git_object **target, git_tag *t","sig":"git_object **::git_tag *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Get the tagged object of a tag</p>\n","comments":"","group":"tag"},"git_tag_target_oid":{"type":"function","file":"git2/tag.h","line":93,"lineto":93,"args":[{"name":"t","type":"git_tag *","comment":null}],"argline":"git_tag *t","sig":"git_tag *","return":{"type":"const git_oid *","comment":" pointer to the OID"},"description":"<p>Get the OID of the tagged object of a tag</p>\n","comments":"","group":"tag"},"git_tag_type":{"type":"function","file":"git2/tag.h","line":100,"lineto":100,"args":[{"name":"t","type":"git_tag *","comment":null}],"argline":"git_tag *t","sig":"git_tag *","return":{"type":"git_otype","comment":" type of the tagged object"},"description":"<p>Get the type of a tag&#39;s tagged object</p>\n","comments":"","group":"tag"},"git_tag_name":{"type":"function","file":"git2/tag.h","line":107,"lineto":107,"args":[{"name":"t","type":"git_tag *","comment":null}],"argline":"git_tag *t","sig":"git_tag *","return":{"type":"const char *","comment":" name of the tag"},"description":"<p>Get the name of a tag</p>\n","comments":"","group":"tag"},"git_tag_tagger":{"type":"function","file":"git2/tag.h","line":114,"lineto":114,"args":[{"name":"t","type":"git_tag *","comment":null}],"argline":"git_tag *t","sig":"git_tag *","return":{"type":"const git_signature *","comment":" reference to the tag's author"},"description":"<p>Get the tagger (author) of a tag</p>\n","comments":"","group":"tag"},"git_tag_message":{"type":"function","file":"git2/tag.h","line":121,"lineto":121,"args":[{"name":"t","type":"git_tag *","comment":null}],"argline":"git_tag *t","sig":"git_tag *","return":{"type":"const char *","comment":" message of the tag"},"description":"<p>Get the message of a tag</p>\n","comments":"","group":"tag"},"git_tag_set_target":{"type":"function","file":"git2/tag.h","line":128,"lineto":128,"args":[{"name":"tag","type":"git_tag *","comment":"The tag to modify"},{"name":"target","type":"git_object *","comment":"the new tagged target"}],"argline":"git_tag *tag, git_object *target","sig":"git_tag *::git_object *","return":{"type":"int","comment":null},"description":"<p>Set the target of a tag (i.e. the object that the tag points to)</p>\n","comments":"","group":"tag"},"git_tag_set_name":{"type":"function","file":"git2/tag.h","line":135,"lineto":135,"args":[{"name":"tag","type":"git_tag *","comment":"The tag to modify"},{"name":"name","type":"const char *","comment":"the new name for the tag"}],"argline":"git_tag *tag, const char *name","sig":"git_tag *::const char *","return":{"type":"void","comment":null},"description":"<p>Set the name of a tag</p>\n","comments":"","group":"tag"},"git_tag_set_tagger":{"type":"function","file":"git2/tag.h","line":143,"lineto":143,"args":[{"name":"tag","type":"git_tag *","comment":"The tag to modify"},{"name":"tagger_sig","type":"const git_signature *","comment":"signature of the tagging action"}],"argline":"git_tag *tag, const git_signature *tagger_sig","sig":"git_tag *::const git_signature *","return":{"type":"void","comment":" 0 on success; error code otherwise"},"description":"<p>Set the tagger of a tag</p>\n","comments":"","group":"tag"},"git_tag_set_message":{"type":"function","file":"git2/tag.h","line":150,"lineto":150,"args":[{"name":"tag","type":"git_tag *","comment":"The tag to modify"},{"name":"message","type":"const char *","comment":"the new tagger for the tag"}],"argline":"git_tag *tag, const char *message","sig":"git_tag *::const char *","return":{"type":"void","comment":null},"description":"<p>Set the message of a tag</p>\n","comments":"","group":"tag"},"git_tree_lookup":{"type":"function","file":"git2/tree.h","line":52,"lineto":55,"args":[{"name":"tree","type":"git_tree **","comment":"pointer to the looked up tree"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the tree."},{"name":"id","type":"const git_oid *","comment":"identity of the tree to locate."}],"argline":"git_tree **tree, git_repository *repo, const git_oid *id","sig":"git_tree **::git_repository *::const git_oid *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Lookup a tree object from the repository.\n The generated tree object is owned by the revision\n repo and shall not be freed by the user.</p>\n","comments":"","group":"tree"},"git_tree_new":{"type":"function","file":"git2/tree.h","line":68,"lineto":71,"args":[{"name":"tree","type":"git_tree **","comment":"pointer to the new tree"},{"name":"repo","type":"git_repository *","comment":"The repository where the object will reside"}],"argline":"git_tree **tree, git_repository *repo","sig":"git_tree **::git_repository *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Create a new in-memory git_tree.</p>\n","comments":"<p>The tree object must be manually filled using setter methods before it can be written to its repository.</p>\n","group":"tree"},"git_tree_id":{"type":"function","file":"git2/tree.h","line":78,"lineto":78,"args":[{"name":"tree","type":"git_tree *","comment":"a previously loaded tree."}],"argline":"git_tree *tree","sig":"git_tree *","return":{"type":"const git_oid *","comment":" object identity for the tree."},"description":"<p>Get the id of a tree.</p>\n","comments":"","group":"tree"},"git_tree_entrycount":{"type":"function","file":"git2/tree.h","line":86,"lineto":86,"args":[{"name":"tree","type":"git_tree *","comment":"a previously loaded tree."}],"argline":"git_tree *tree","sig":"git_tree *","return":{"type":"size_t","comment":" the number of entries in the tree"},"description":"<p>Get the number of entries listed in a tree</p>\n","comments":"","group":"tree"},"git_tree_entry_byname":{"type":"function","file":"git2/tree.h","line":94,"lineto":94,"args":[{"name":"tree","type":"git_tree *","comment":"a previously loaded tree."},{"name":"filename","type":"const char *","comment":"the filename of the desired entry"}],"argline":"git_tree *tree, const char *filename","sig":"git_tree *::const char *","return":{"type":"git_tree_entry *","comment":" the tree entry; NULL if not found"},"description":"<p>Lookup a tree entry by its filename</p>\n","comments":"","group":"tree"},"git_tree_entry_byindex":{"type":"function","file":"git2/tree.h","line":102,"lineto":102,"args":[{"name":"tree","type":"git_tree *","comment":"a previously loaded tree."},{"name":"idx","type":"int","comment":"the position in the entry list"}],"argline":"git_tree *tree, int idx","sig":"git_tree *::int","return":{"type":"git_tree_entry *","comment":" the tree entry; NULL if not found"},"description":"<p>Lookup a tree entry by its position in the tree</p>\n","comments":"","group":"tree"},"git_tree_entry_attributes":{"type":"function","file":"git2/tree.h","line":109,"lineto":109,"args":[{"name":"entry","type":"git_tree_entry *","comment":"a tree entry"}],"argline":"git_tree_entry *entry","sig":"git_tree_entry *","return":{"type":"unsigned int","comment":" attributes as an integer"},"description":"<p>Get the UNIX file attributes of a tree entry</p>\n","comments":"","group":"tree"},"git_tree_entry_name":{"type":"function","file":"git2/tree.h","line":116,"lineto":116,"args":[{"name":"entry","type":"git_tree_entry *","comment":"a tree entry"}],"argline":"git_tree_entry *entry","sig":"git_tree_entry *","return":{"type":"const char *","comment":" the name of the file"},"description":"<p>Get the filename of a tree entry</p>\n","comments":"","group":"tree"},"git_tree_entry_id":{"type":"function","file":"git2/tree.h","line":123,"lineto":123,"args":[{"name":"entry","type":"git_tree_entry *","comment":"a tree entry"}],"argline":"git_tree_entry *entry","sig":"git_tree_entry *","return":{"type":"const git_oid *","comment":" the oid of the object"},"description":"<p>Get the id of the object pointed by the entry</p>\n","comments":"","group":"tree"},"git_tree_entry_2object":{"type":"function","file":"git2/tree.h","line":132,"lineto":132,"args":[{"name":"object","type":"git_object **","comment":"pointer to the converted object"},{"name":"entry","type":"git_tree_entry *","comment":"a tree entry"}],"argline":"git_object **object, git_tree_entry *entry","sig":"git_object **::git_tree_entry *","return":{"type":"int","comment":" a reference to the pointed object in the repository"},"description":"<p>Convert a tree entry to the git_object it points too.</p>\n","comments":"","group":"tree"},"git_tree_add_entry":{"type":"function","file":"git2/tree.h","line":149,"lineto":149,"args":[{"name":"entry_out","type":"git_tree_entry **","comment":"Pointer to the entry that just got\n\tcreated. May be NULL if you are not interested on\n\tgetting the new entry"},{"name":"tree","type":"git_tree *","comment":"Tree object to store the entry\n \n\n id OID for the tree entry"},{"name":"id","type":"const git_oid *","comment":null},{"name":"filename","type":"const char *","comment":"Filename for the tree entry"},{"name":"attributes","type":"int","comment":"UNIX file attributes for the entry"}],"argline":"git_tree_entry **entry_out, git_tree *tree, const git_oid *id, const char *filename, int attributes","sig":"git_tree_entry **::git_tree *::const git_oid *::const char *::int","return":{"type":"int","comment":" 0 on success; otherwise error code"},"description":"<p>Add a new entry to a tree and return the new entry.</p>\n","comments":"<p>This will mark the tree as modified; the new entry will be written back to disk on the next git_object_write()</p>\n","group":"tree"},"git_tree_remove_entry_byindex":{"type":"function","file":"git2/tree.h","line":163,"lineto":163,"args":[{"name":"tree","type":"git_tree *","comment":"Tree where to remove the entry"},{"name":"idx","type":"int","comment":"index of the entry"}],"argline":"git_tree *tree, int idx","sig":"git_tree *::int","return":{"type":"int","comment":" 0 on successful removal; GIT_ENOTFOUND if the entry wasn't found"},"description":"<p>Remove an entry by its index.</p>\n","comments":"<p>Index must be &gt;= 0 and &lt; than git_tree_entrycount().</p>\n\n<p>This will mark the tree as modified; the modified entry will be written back to disk on the next git_object_write()</p>\n","group":"tree"},"git_tree_remove_entry_byname":{"type":"function","file":"git2/tree.h","line":175,"lineto":175,"args":[{"name":"tree","type":"git_tree *","comment":"Tree where to remove the entry"},{"name":"filename","type":"const char *","comment":"File name of the entry"}],"argline":"git_tree *tree, const char *filename","sig":"git_tree *::const char *","return":{"type":"int","comment":" 0 on successful removal; GIT_ENOTFOUND if the entry wasn't found"},"description":"<p>Remove an entry by its filename.</p>\n","comments":"<p>This will mark the tree as modified; the modified entry will be written back to disk on the next git_object_write()</p>\n","group":"tree"},"git_tree_clear_entries":{"type":"function","file":"git2/tree.h","line":185,"lineto":185,"args":[{"name":"tree","type":"git_tree *","comment":"Tree object whose entries are to be sorted"}],"argline":"git_tree *tree","sig":"git_tree *","return":{"type":"void","comment":null},"description":"<p>Clear all the entries in a tree.</p>\n","comments":"<p>This will mark the tree as modified; the modified entry will be written back to disk on the next git_object_write().</p>\n","group":"tree"},"git_tree_entry_set_id":{"type":"function","file":"git2/tree.h","line":196,"lineto":196,"args":[{"name":"entry","type":"git_tree_entry *","comment":"Entry object which will be modified"},{"name":"oid","type":"const git_oid *","comment":"new SHA1 oid for the entry"}],"argline":"git_tree_entry *entry, const git_oid *oid","sig":"git_tree_entry *::const git_oid *","return":{"type":"void","comment":null},"description":"<p>Change the SHA1 id of a tree entry.</p>\n","comments":"<p>This will mark the tree that contains the entry as modified; the modified entry will be written back to disk on the next git_object_write()</p>\n","group":"tree"},"git_tree_entry_set_name":{"type":"function","file":"git2/tree.h","line":207,"lineto":207,"args":[{"name":"entry","type":"git_tree_entry *","comment":"Entry object which will be modified"},{"name":"name","type":"const char *","comment":null}],"argline":"git_tree_entry *entry, const char *name","sig":"git_tree_entry *::const char *","return":{"type":"void","comment":null},"description":"<p>Change the filename of a tree entry.</p>\n","comments":"<p>This will mark the tree that contains the entry as modified; the modified entry will be written back to disk on the next git_object_write()</p>\n","group":"tree"},"git_tree_entry_set_attributes":{"type":"function","file":"git2/tree.h","line":219,"lineto":219,"args":[{"name":"entry","type":"git_tree_entry *","comment":"Entry object which will be modified"},{"name":"attr","type":"unsigned int","comment":null}],"argline":"git_tree_entry *entry, unsigned int attr","sig":"git_tree_entry *::unsigned int","return":{"type":"int","comment":" 0 if the attributes were properly set; error code otherwise"},"description":"<p>Change the attributes of a tree entry.</p>\n","comments":"<p>This will mark the tree that contains the entry as modified; the modified entry will be written back to disk on the next git_object_write()</p>\n","group":"tree"}},"callbacks":{},"globals":{},"types":[["git_blob",{"decl":"git_blob","type":"struct","value":"git_blob","file":"git2/types.h","line":111,"lineto":111,"tdef":"typedef","description":" In-memory representation of a blob object. ","comments":"","used":{"returns":[],"needs":["git_blob_lookup","git_blob_new","git_blob_rawcontent","git_blob_rawsize","git_blob_set_rawcontent","git_blob_set_rawcontent_fromfile"]}}],["git_commit",{"decl":"git_commit","type":"struct","value":"git_commit","file":"git2/types.h","line":114,"lineto":114,"tdef":"typedef","description":" Parsed representation of a commit object. ","comments":"","used":{"returns":[],"needs":["git_commit_add_parent","git_commit_author","git_commit_committer","git_commit_id","git_commit_lookup","git_commit_message","git_commit_message_short","git_commit_new","git_commit_parent","git_commit_parentcount","git_commit_set_author","git_commit_set_committer","git_commit_set_message","git_commit_set_tree","git_commit_time","git_commit_time_offset","git_commit_tree"]}}],["git_index",{"decl":"git_index","type":"struct","value":"git_index","file":"git2/types.h","line":123,"lineto":123,"tdef":"typedef","description":" Memory representation of an index file. ","comments":"","used":{"returns":["git_index_get"],"needs":["git_index_add","git_index_clear","git_index_entrycount","git_index_find","git_index_free","git_index_get","git_index_insert","git_index_open_bare","git_index_open_inrepo","git_index_read","git_index_remove","git_index_write","git_repository_index","git_repository_open2","git_repository_open3"]}}],["git_index_entry",{"decl":["git_index_time ctime","git_index_time mtime","unsigned int dev","unsigned int ino","unsigned int mode","unsigned int uid","unsigned int gid","git_off_t file_size","git_oid oid","unsigned short flags","unsigned short flags_extended","char * path"],"type":"struct","value":"git_index_entry","file":"git2/index.h","line":55,"lineto":72,"block":"git_index_time ctime\ngit_index_time mtime\nunsigned int dev\nunsigned int ino\nunsigned int mode\nunsigned int uid\nunsigned int gid\ngit_off_t file_size\ngit_oid oid\nunsigned short flags\nunsigned short flags_extended\nchar * path","tdef":"typedef","description":" Memory representation of a file entry in the index. ","comments":"","fields":[{"type":"git_index_time","name":"ctime","comments":""},{"type":"git_index_time","name":"mtime","comments":""},{"type":"unsigned int","name":"dev","comments":""},{"type":"unsigned int","name":"ino","comments":""},{"type":"unsigned int","name":"mode","comments":""},{"type":"unsigned int","name":"uid","comments":""},{"type":"unsigned int","name":"gid","comments":""},{"type":"git_off_t","name":"file_size","comments":""},{"type":"git_oid","name":"oid","comments":""},{"type":"unsigned short","name":"flags","comments":""},{"type":"unsigned short","name":"flags_extended","comments":""},{"type":"char *","name":"path","comments":""}],"used":{"returns":["git_index_get"],"needs":["git_index_insert"]}}],["git_index_time",{"decl":["git_time_t seconds","unsigned int nanoseconds"],"type":"struct","value":"git_index_time","file":"git2/index.h","line":48,"lineto":52,"block":"git_time_t seconds\nunsigned int nanoseconds","tdef":"typedef","description":" Time used in a git index entry ","comments":"","fields":[{"type":"git_time_t","name":"seconds","comments":""},{"type":"unsigned int","name":"nanoseconds","comments":""}],"used":{"returns":[],"needs":[]}}],["git_object",{"decl":"git_object","type":"struct","value":"git_object","file":"git2/types.h","line":102,"lineto":102,"tdef":"typedef","description":" Representation of a generic object in a repository ","comments":"","used":{"returns":[],"needs":["git_object_close","git_object_id","git_object_lookup","git_object_new","git_object_owner","git_object_type","git_object_write","git_repository_open2","git_tag_set_target","git_tag_target","git_tree_entry_2object"]}}],["git_odb",{"decl":"git_odb","type":"struct","value":"git_odb","file":"git2/types.h","line":90,"lineto":90,"tdef":"typedef","description":" An open object database handle. ","comments":"","used":{"returns":["git_repository_database"],"needs":["git_odb_add_alternate","git_odb_add_backend","git_odb_close","git_odb_exists","git_odb_new","git_odb_open","git_odb_read","git_odb_read_header","git_odb_write","git_repository_open3"]}}],["git_odb_backend",{"decl":"git_odb_backend","type":"struct","value":"git_odb_backend","file":"git2/types.h","line":93,"lineto":93,"block":"git_odb * odb\nint (*)(git_rawobj *, struct git_odb_backend *, const git_oid *) read\nint (*)(git_rawobj *, struct git_odb_backend *, const git_oid *) read_header\nint (*)(git_oid *, struct git_odb_backend *, git_rawobj *) write\nint (*)(struct git_odb_backend *, const git_oid *) exists\nvoid (*)(struct git_odb_backend *) free","tdef":"typedef","description":" A custom backend in an ODB ","comments":"","fields":[{"type":"git_odb *","name":"odb","comments":""},{"type":"int (*)(git_rawobj *, struct git_odb_backend *, const git_oid *)","name":"read","comments":""},{"type":"int (*)(git_rawobj *, struct git_odb_backend *, const git_oid *)","name":"read_header","comments":""},{"type":"int (*)(git_oid *, struct git_odb_backend *, git_rawobj *)","name":"write","comments":""},{"type":"int (*)(struct git_odb_backend *, const git_oid *)","name":"exists","comments":""},{"type":"void (*)(struct git_odb_backend *)","name":"free","comments":""}],"used":{"returns":[],"needs":["git_odb_add_alternate","git_odb_add_backend"]}}],["git_oid",{"decl":["unsigned char [20] id"],"type":"struct","value":"git_oid","file":"git2/oid.h","line":47,"lineto":50,"block":"unsigned char [20] id","tdef":"typedef","description":" Unique identity of any object (commit, tree, blob, tag). ","comments":"","fields":[{"type":"unsigned char [20]","name":"id","comments":" raw binary formatted id "}],"used":{"returns":["git_commit_id","git_object_id","git_oid_shorten_new","git_reference_oid","git_tag_id","git_tag_target_oid","git_tree_entry_id","git_tree_id"],"needs":["git_blob_lookup","git_blob_writefile","git_commit_lookup","git_object_lookup","git_odb_exists","git_odb_read","git_odb_read_header","git_odb_write","git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_fmt","git_oid_mkraw","git_oid_mkstr","git_oid_pathfmt","git_oid_shorten_add","git_oid_shorten_free","git_oid_to_string","git_rawobj_hash","git_reference_create_oid","git_reference_set_oid","git_revwalk_hide","git_revwalk_next","git_revwalk_push","git_tag_lookup","git_tree_add_entry","git_tree_entry_set_id","git_tree_lookup"]}}],["git_oid_shorten",{"decl":"git_oid_shorten","type":"struct","value":"git_oid_shorten","file":"git2/oid.h","line":138,"lineto":138,"tdef":"typedef","description":" OID Shortener object","comments":"","used":{"returns":["git_oid_shorten_new"],"needs":["git_oid_shorten_add","git_oid_shorten_free"]}}],["git_otype",{"decl":["GIT_OBJ_ANY","GIT_OBJ_BAD","GIT_OBJ__EXT1","GIT_OBJ_COMMIT","GIT_OBJ_TREE","GIT_OBJ_BLOB","GIT_OBJ_TAG","GIT_OBJ__EXT2","GIT_OBJ_OFS_DELTA","GIT_OBJ_REF_DELTA"],"type":"enum","file":"git2/types.h","line":76,"lineto":87,"block":"GIT_OBJ_ANY\nGIT_OBJ_BAD\nGIT_OBJ__EXT1\nGIT_OBJ_COMMIT\nGIT_OBJ_TREE\nGIT_OBJ_BLOB\nGIT_OBJ_TAG\nGIT_OBJ__EXT2\nGIT_OBJ_OFS_DELTA\nGIT_OBJ_REF_DELTA","tdef":"typedef","description":" Basic type (loose or packed) of any Git object. ","comments":"","fields":[{"type":"int","name":"GIT_OBJ_ANY","comments":"<p>Object can be any of the following </p>\n","value":-2},{"type":"int","name":"GIT_OBJ_BAD","comments":"<p>Object is invalid. </p>\n","value":-1},{"type":"int","name":"GIT_OBJ__EXT1","comments":"<p>Reserved for future use. </p>\n","value":0},{"type":"int","name":"GIT_OBJ_COMMIT","comments":"<p>A commit object. </p>\n","value":1},{"type":"int","name":"GIT_OBJ_TREE","comments":"<p>A tree (directory listing) object. </p>\n","value":2},{"type":"int","name":"GIT_OBJ_BLOB","comments":"<p>A file revision object. </p>\n","value":3},{"type":"int","name":"GIT_OBJ_TAG","comments":"<p>An annotated tag object. </p>\n","value":4},{"type":"int","name":"GIT_OBJ__EXT2","comments":"<p>Reserved for future use. </p>\n","value":5},{"type":"int","name":"GIT_OBJ_OFS_DELTA","comments":"<p>A delta, base is given by an offset. </p>\n","value":6},{"type":"int","name":"GIT_OBJ_REF_DELTA","comments":"<p>A delta, base is given by object id. </p>\n","value":7}],"used":{"returns":["git_object_string2type","git_object_type","git_tag_type"],"needs":["git_object__size","git_object_lookup","git_object_new","git_object_type2string","git_object_typeisloose"]}}],["git_rawobj",{"decl":["void * data","size_t len","git_otype type"],"type":"struct","value":"git_rawobj","file":"git2/odb.h","line":108,"lineto":112,"block":"void * data\nsize_t len\ngit_otype type","tdef":"typedef","description":" An object read from the database. ","comments":"","fields":[{"type":"void *","name":"data","comments":" Raw, decompressed object data. "},{"type":"size_t","name":"len","comments":" Total number of bytes in data. "},{"type":"git_otype","name":"type","comments":" Type of this object. "}],"used":{"returns":[],"needs":["git_odb_read","git_odb_read_header","git_odb_write","git_rawobj_close","git_rawobj_hash"]}}],["git_reference",{"decl":"git_reference","type":"struct","value":"git_reference","file":"git2/types.h","line":139,"lineto":139,"tdef":"typedef","description":" In-memory representation of a reference. ","comments":"","used":{"returns":[],"needs":["git_reference_create_oid","git_reference_create_symbolic","git_reference_delete","git_reference_lookup","git_reference_name","git_reference_oid","git_reference_owner","git_reference_rename","git_reference_resolve","git_reference_set_oid","git_reference_set_target","git_reference_target","git_reference_type"]}}],["git_repository",{"decl":"git_repository","type":"struct","value":"git_repository","file":"git2/types.h","line":99,"lineto":99,"tdef":"typedef","description":" Representation of an existing git repository,\n including all its object contents","comments":"","used":{"returns":["git_object_owner","git_reference_owner","git_revwalk_repository"],"needs":["git_blob_lookup","git_blob_new","git_blob_writefile","git_commit_lookup","git_commit_new","git_index_open_inrepo","git_object_lookup","git_object_new","git_reference_create_oid","git_reference_create_symbolic","git_reference_listall","git_reference_lookup","git_reference_packall","git_repository_close","git_repository_database","git_repository_free","git_repository_index","git_repository_init","git_repository_open","git_repository_open2","git_repository_open3","git_revwalk_new","git_tag_lookup","git_tag_new","git_tree_lookup","git_tree_new"]}}],["git_revwalk",{"decl":"git_revwalk","type":"struct","value":"git_revwalk","file":"git2/types.h","line":105,"lineto":105,"tdef":"typedef","description":" Representation of an in-progress walk through the commits in a repo ","comments":"","used":{"returns":[],"needs":["git_revwalk_free","git_revwalk_hide","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]}}],["git_rtype",{"decl":["GIT_REF_INVALID","GIT_REF_OID","GIT_REF_SYMBOLIC","GIT_REF_PACKED","GIT_REF_HAS_PEEL","GIT_REF_LISTALL"],"type":"enum","file":"git2/types.h","line":142,"lineto":149,"block":"GIT_REF_INVALID\nGIT_REF_OID\nGIT_REF_SYMBOLIC\nGIT_REF_PACKED\nGIT_REF_HAS_PEEL\nGIT_REF_LISTALL","tdef":"typedef","description":" Basic type of any Git reference. ","comments":"","fields":[{"type":"int","name":"GIT_REF_INVALID","comments":"","value":0},{"type":"int","name":"GIT_REF_OID","comments":"<p>Invalid reference </p>\n","value":1},{"type":"int","name":"GIT_REF_SYMBOLIC","comments":"<p>A reference which points at an object id </p>\n","value":2},{"type":"int","name":"GIT_REF_PACKED","comments":"<p>A reference which points at another reference </p>\n","value":4},{"type":"int","name":"GIT_REF_HAS_PEEL","comments":"<p>A reference which points at another reference </p>\n","value":8},{"type":"int","name":"GIT_REF_LISTALL","comments":"<p>A reference which points at another reference </p>\n","value":7}],"used":{"returns":["git_reference_type"],"needs":[]}}],["git_signature",{"decl":["char * name","char * email","git_time when"],"type":"struct","value":"git_signature","file":"git2/types.h","line":132,"lineto":136,"block":"char * name\nchar * email\ngit_time when","tdef":"typedef","description":" An action signature (e.g. for committers, taggers, etc) ","comments":"","fields":[{"type":"char *","name":"name","comments":""},{"type":"char *","name":"email","comments":" full name of the author "},{"type":"git_time","name":"when","comments":" email of the author "}],"used":{"returns":["git_commit_author","git_commit_committer","git_signature_dup","git_signature_new","git_tag_tagger"],"needs":["git_commit_set_author","git_commit_set_committer","git_signature_dup","git_signature_free","git_tag_set_tagger"]}}],["git_tag",{"decl":"git_tag","type":"struct","value":"git_tag","file":"git2/types.h","line":108,"lineto":108,"tdef":"typedef","description":" Parsed representation of a tag object. ","comments":"","used":{"returns":[],"needs":["git_tag_id","git_tag_lookup","git_tag_message","git_tag_name","git_tag_new","git_tag_set_message","git_tag_set_name","git_tag_set_tagger","git_tag_set_target","git_tag_tagger","git_tag_target","git_tag_target_oid","git_tag_type"]}}],["git_time",{"decl":["time_t time","int offset"],"type":"struct","value":"git_time","file":"git2/types.h","line":126,"lineto":129,"block":"time_t time\nint offset","tdef":"typedef","description":" Time in a signature ","comments":"","fields":[{"type":"time_t","name":"time","comments":""},{"type":"int","name":"offset","comments":" time in seconds from epoch "}],"used":{"returns":[],"needs":[]}}],["git_tree",{"decl":"git_tree","type":"struct","value":"git_tree","file":"git2/types.h","line":120,"lineto":120,"tdef":"typedef","description":" Representation of a tree object. ","comments":"","used":{"returns":["git_tree_entry_byindex","git_tree_entry_byname"],"needs":["git_commit_set_tree","git_commit_tree","git_tree_add_entry","git_tree_clear_entries","git_tree_entry_2object","git_tree_entry_attributes","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entry_id","git_tree_entry_name","git_tree_entry_set_attributes","git_tree_entry_set_id","git_tree_entry_set_name","git_tree_entrycount","git_tree_id","git_tree_lookup","git_tree_new","git_tree_remove_entry_byindex","git_tree_remove_entry_byname"]}}],["git_tree_entry",{"decl":"git_tree_entry","type":"struct","value":"git_tree_entry","file":"git2/types.h","line":117,"lineto":117,"tdef":"typedef","description":" Representation of each one of the entries in a tree object. ","comments":"","used":{"returns":["git_tree_entry_byindex","git_tree_entry_byname"],"needs":["git_tree_add_entry","git_tree_entry_2object","git_tree_entry_attributes","git_tree_entry_id","git_tree_entry_name","git_tree_entry_set_attributes","git_tree_entry_set_id","git_tree_entry_set_name"]}}]],"prefix":"include","groups":[["blob",["git_blob_lookup","git_blob_new","git_blob_rawcontent","git_blob_rawsize","git_blob_set_rawcontent","git_blob_set_rawcontent_fromfile","git_blob_writefile"]],["commit",["git_commit_add_parent","git_commit_author","git_commit_committer","git_commit_id","git_commit_lookup","git_commit_message","git_commit_message_short","git_commit_new","git_commit_parent","git_commit_parentcount","git_commit_set_author","git_commit_set_committer","git_commit_set_message","git_commit_set_tree","git_commit_time","git_commit_time_offset","git_commit_tree"]],["index",["git_index_add","git_index_clear","git_index_entrycount","git_index_find","git_index_free","git_index_get","git_index_insert","git_index_open_bare","git_index_open_inrepo","git_index_read","git_index_remove","git_index_write"]],["object",["git_object__size","git_object_close","git_object_id","git_object_lookup","git_object_new","git_object_owner","git_object_string2type","git_object_type","git_object_type2string","git_object_typeisloose","git_object_write"]],["odb",["git_odb_add_alternate","git_odb_add_backend","git_odb_close","git_odb_exists","git_odb_new","git_odb_open","git_odb_read","git_odb_read_header","git_odb_write"]],["oid",["git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_fmt","git_oid_mkraw","git_oid_mkstr","git_oid_pathfmt","git_oid_shorten_add","git_oid_shorten_free","git_oid_shorten_new","git_oid_to_string"]],["rawobj",["git_rawobj_close","git_rawobj_hash"]],["reference",["git_reference_create_oid","git_reference_create_symbolic","git_reference_delete","git_reference_listall","git_reference_lookup","git_reference_name","git_reference_oid","git_reference_owner","git_reference_packall","git_reference_rename","git_reference_resolve","git_reference_set_oid","git_reference_set_target","git_reference_target","git_reference_type"]],["repository",["git_repository_close","git_repository_database","git_repository_free","git_repository_index","git_repository_init","git_repository_open","git_repository_open2","git_repository_open3"]],["revwalk",["git_revwalk_free","git_revwalk_hide","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]],["signature",["git_signature_dup","git_signature_free","git_signature_new"]],["tag",["git_tag_id","git_tag_lookup","git_tag_message","git_tag_name","git_tag_new","git_tag_set_message","git_tag_set_name","git_tag_set_tagger","git_tag_set_target","git_tag_tagger","git_tag_target","git_tag_target_oid","git_tag_type"]],["tree",["git_tree_add_entry","git_tree_clear_entries","git_tree_entry_2object","git_tree_entry_attributes","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entry_id","git_tree_entry_name","git_tree_entry_set_attributes","git_tree_entry_set_id","git_tree_entry_set_name","git_tree_entrycount","git_tree_id","git_tree_lookup","git_tree_new","git_tree_remove_entry_byindex","git_tree_remove_entry_byname"]]]}