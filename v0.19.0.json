{"files":[{"file":"git2/attr.h","functions":["git_attr_get","git_attr_get_many","git_attr_foreach","git_attr_cache_flush","git_attr_add_macro"],"meta":{},"lines":236},{"file":"git2/blob.h","functions":["git_blob_lookup","git_blob_lookup_prefix","git_blob_free","git_blob_id","git_blob_owner","git_blob_rawcontent","git_blob_rawsize","git_blob_create_fromworkdir","git_blob_create_fromdisk","git_blob_create_fromchunks","git_blob_create_frombuffer","git_blob_is_binary"],"meta":{},"lines":191},{"file":"git2/branch.h","functions":["git_branch_create","git_branch_delete","git_branch_foreach","git_branch_move","git_branch_lookup","git_branch_name","git_branch_upstream","git_branch_set_upstream","git_branch_upstream_name","git_branch_is_head","git_branch_remote_name"],"meta":{},"lines":249},{"file":"git2/checkout.h","functions":["git_checkout_notify_cb","git_checkout_progress_cb","git_checkout_head","git_checkout_index","git_checkout_tree"],"meta":{},"lines":288},{"file":"git2/clone.h","functions":["git_clone"],"meta":{},"lines":106},{"file":"git2/commit.h","functions":["git_commit_lookup","git_commit_lookup_prefix","git_commit_free","git_commit_id","git_commit_owner","git_commit_message_encoding","git_commit_message","git_commit_time","git_commit_time_offset","git_commit_committer","git_commit_author","git_commit_tree","git_commit_tree_id","git_commit_parentcount","git_commit_parent","git_commit_parent_id","git_commit_nth_gen_ancestor","git_commit_create","git_commit_create_v"],"meta":{},"lines":283},{"file":"git2/common.h","functions":["git_libgit2_version","git_libgit2_capabilities","git_libgit2_opts"],"meta":{},"lines":216},{"file":"git2/config.h","functions":["git_config_find_global","git_config_find_xdg","git_config_find_system","git_config_open_default","git_config_new","git_config_add_file_ondisk","git_config_open_ondisk","git_config_open_level","git_config_open_global","git_config_refresh","git_config_free","git_config_get_entry","git_config_get_int32","git_config_get_int64","git_config_get_bool","git_config_get_string","git_config_get_multivar","git_config_set_int32","git_config_set_int64","git_config_set_bool","git_config_set_string","git_config_set_multivar","git_config_delete_entry","git_config_foreach","git_config_foreach_match","git_config_get_mapped","git_config_lookup_map_value","git_config_parse_bool","git_config_parse_int32","git_config_parse_int64"],"meta":{},"lines":535},{"file":"git2/diff.h","functions":["git_diff_notify_cb","git_diff_file_cb","git_diff_hunk_cb","git_diff_data_cb","git_diff_list_free","git_diff_tree_to_tree","git_diff_tree_to_index","git_diff_index_to_workdir","git_diff_tree_to_workdir","git_diff_merge","git_diff_find_similar","git_diff_foreach","git_diff_print_compact","git_diff_print_raw","git_diff_status_char","git_diff_print_patch","git_diff_num_deltas","git_diff_num_deltas_of_type","git_diff_get_patch","git_diff_patch_free","git_diff_patch_delta","git_diff_patch_num_hunks","git_diff_patch_line_stats","git_diff_patch_get_hunk","git_diff_patch_num_lines_in_hunk","git_diff_patch_get_line_in_hunk","git_diff_patch_print","git_diff_patch_to_str","git_diff_blobs","git_diff_patch_from_blobs","git_diff_blob_to_buffer","git_diff_patch_from_blob_and_buffer"],"meta":{},"lines":1091},{"file":"git2/errors.h","functions":["giterr_last","giterr_clear","giterr_set_str","giterr_set_oom"],"meta":{},"lines":116},{"file":"git2/graph.h","functions":["git_graph_ahead_behind"],"meta":{},"lines":37},{"file":"git2/ignore.h","functions":["git_ignore_add_rule","git_ignore_clear_internal_rules","git_ignore_path_is_ignored"],"meta":{},"lines":74},{"file":"git2/index.h","functions":["git_index_matched_path_cb","git_index_open","git_index_new","git_index_free","git_index_owner","git_index_caps","git_index_set_caps","git_index_read","git_index_write","git_index_read_tree","git_index_write_tree","git_index_write_tree_to","git_index_entrycount","git_index_clear","git_index_get_byindex","git_index_get_bypath","git_index_remove","git_index_remove_directory","git_index_add","git_index_entry_stage","git_index_add_bypath","git_index_remove_bypath","git_index_add_all","git_index_remove_all","git_index_update_all","git_index_find","git_index_conflict_add","git_index_conflict_get","git_index_conflict_remove","git_index_conflict_cleanup","git_index_has_conflicts","git_index_conflict_iterator_new","git_index_conflict_next","git_index_conflict_iterator_free"],"meta":{},"lines":652},{"file":"git2/indexer.h","functions":["git_indexer_stream_new","git_indexer_stream_add","git_indexer_stream_finalize","git_indexer_stream_hash","git_indexer_stream_free"],"meta":{},"lines":66},{"file":"git2/merge.h","functions":[],"meta":{},"lines":42},{"file":"git2/message.h","functions":["git_message_prettify"],"meta":{},"lines":44},{"file":"git2/net.h","functions":["git_headlist_cb"],"meta":{},"lines":49},{"file":"git2/notes.h","functions":["git_note_foreach_cb","git_note_iterator_new","git_note_iterator_free","git_note_next","git_note_read","git_note_message","git_note_oid","git_note_create","git_note_remove","git_note_free","git_note_default_ref","git_note_foreach"],"meta":{},"lines":198},{"file":"git2/object.h","functions":["git_object_lookup","git_object_lookup_prefix","git_object_id","git_object_type","git_object_owner","git_object_free","git_object_type2string","git_object_string2type","git_object_typeisloose","git_object__size","git_object_peel","git_object_dup"],"meta":{},"lines":198},{"file":"git2/odb.h","functions":["git_odb_foreach_cb","git_odb_new","git_odb_open","git_odb_add_disk_alternate","git_odb_free","git_odb_read","git_odb_read_prefix","git_odb_read_header","git_odb_exists","git_odb_refresh","git_odb_foreach","git_odb_write","git_odb_open_wstream","git_odb_open_rstream","git_odb_write_pack","git_odb_hash","git_odb_hashfile","git_odb_object_free","git_odb_object_id","git_odb_object_data","git_odb_object_size","git_odb_object_type","git_odb_add_backend","git_odb_add_alternate","git_odb_num_backends","git_odb_get_backend"],"meta":{},"lines":428},{"file":"git2/odb_backend.h","functions":[],"meta":{},"lines":66},{"file":"git2/oid.h","functions":["git_oid_fromstr","git_oid_fromstrp","git_oid_fromstrn","git_oid_fromraw","git_oid_fmt","git_oid_nfmt","git_oid_pathfmt","git_oid_allocfmt","git_oid_tostr","git_oid_cpy","git_oid_cmp","git_oid_equal","git_oid_ncmp","git_oid_streq","git_oid_strcmp","git_oid_iszero","git_oid_shorten_new","git_oid_shorten_add","git_oid_shorten_free"],"meta":{},"lines":265},{"file":"git2/pack.h","functions":["git_packbuilder_new","git_packbuilder_set_threads","git_packbuilder_insert","git_packbuilder_insert_tree","git_packbuilder_insert_commit","git_packbuilder_write","git_packbuilder_foreach","git_packbuilder_object_count","git_packbuilder_written","git_packbuilder_free"],"meta":{},"lines":157},{"file":"git2/push.h","functions":[],"meta":{},"lines":36},{"file":"git2/refdb.h","functions":["git_refdb_new","git_refdb_open","git_refdb_compress","git_refdb_free"],"meta":{},"lines":63},{"file":"git2/reflog.h","functions":["git_reflog_read","git_reflog_write","git_reflog_append","git_reflog_rename","git_reflog_delete","git_reflog_entrycount","git_reflog_entry_byindex","git_reflog_drop","git_reflog_entry_id_old","git_reflog_entry_id_new","git_reflog_entry_committer","git_reflog_entry_message","git_reflog_free"],"meta":{},"lines":163},{"file":"git2/refs.h","functions":["git_reference_lookup","git_reference_name_to_id","git_reference_dwim","git_reference_symbolic_create","git_reference_create","git_reference_target","git_reference_target_peel","git_reference_symbolic_target","git_reference_type","git_reference_name","git_reference_resolve","git_reference_owner","git_reference_symbolic_set_target","git_reference_set_target","git_reference_rename","git_reference_delete","git_reference_list","git_reference_foreach","git_reference_free","git_reference_cmp","git_reference_iterator_new","git_reference_iterator_glob_new","git_reference_next","git_reference_iterator_free","git_reference_foreach_glob","git_reference_has_log","git_reference_is_branch","git_reference_is_remote","git_reference_normalize_name","git_reference_peel","git_reference_is_valid_name","git_reference_shorthand"],"meta":{},"lines":548},{"file":"git2/refspec.h","functions":["git_refspec_src","git_refspec_dst","git_refspec_string","git_refspec_force","git_refspec_direction","git_refspec_src_matches","git_refspec_dst_matches","git_refspec_transform","git_refspec_rtransform"],"meta":{},"lines":101},{"file":"git2/remote.h","functions":["git_remote_rename_problem_cb","git_remote_create","git_remote_create_inmemory","git_remote_load","git_remote_save","git_remote_name","git_remote_url","git_remote_pushurl","git_remote_set_url","git_remote_set_pushurl","git_remote_add_fetch","git_remote_get_fetch_refspecs","git_remote_add_push","git_remote_get_push_refspecs","git_remote_clear_refspecs","git_remote_refspec_count","git_remote_get_refspec","git_remote_remove_refspec","git_remote_connect","git_remote_ls","git_remote_download","git_remote_connected","git_remote_stop","git_remote_disconnect","git_remote_free","git_remote_update_tips","git_remote_valid_url","git_remote_supported_url","git_remote_list","git_remote_check_cert","git_remote_set_cred_acquire_cb","git_remote_set_transport","git_remote_set_callbacks","git_remote_stats","git_remote_autotag","git_remote_set_autotag","git_remote_rename","git_remote_update_fetchhead","git_remote_set_update_fetchhead","git_remote_is_valid_name"],"meta":{},"lines":499},{"file":"git2/repository.h","functions":["git_repository_open","git_repository_wrap_odb","git_repository_discover","git_repository_open_ext","git_repository_open_bare","git_repository_free","git_repository_init","git_repository_init_ext","git_repository_head","git_repository_head_detached","git_repository_head_orphan","git_repository_is_empty","git_repository_path","git_repository_workdir","git_repository_set_workdir","git_repository_is_bare","git_repository_config","git_repository_odb","git_repository_refdb","git_repository_index","git_repository_message","git_repository_message_remove","git_repository_merge_cleanup","git_repository_fetchhead_foreach","git_repository_mergehead_foreach","git_repository_hashfile","git_repository_set_head","git_repository_set_head_detached","git_repository_detach_head","git_repository_state","git_repository_set_namespace","git_repository_get_namespace","git_repository_is_shallow"],"meta":{},"lines":667},{"file":"git2/revparse.h","functions":["git_revparse_single","git_revparse_ext","git_revparse"],"meta":{},"lines":97},{"file":"git2/revwalk.h","functions":["git_revwalk_new","git_revwalk_reset","git_revwalk_push","git_revwalk_push_glob","git_revwalk_push_head","git_revwalk_hide","git_revwalk_hide_glob","git_revwalk_hide_head","git_revwalk_push_ref","git_revwalk_hide_ref","git_revwalk_next","git_revwalk_sorting","git_revwalk_push_range","git_revwalk_free","git_revwalk_repository"],"meta":{},"lines":248},{"file":"git2/signature.h","functions":["git_signature_new","git_signature_now","git_signature_dup","git_signature_free"],"meta":{},"lines":72},{"file":"git2/stash.h","functions":["git_stash_cb","git_stash_foreach","git_stash_drop"],"meta":{},"lines":117},{"file":"git2/status.h","functions":["git_status_cb","git_status_foreach","git_status_foreach_ext","git_status_file","git_status_list_new","git_status_list_entrycount","git_status_byindex","git_status_list_free","git_status_should_ignore"],"meta":{},"lines":312},{"file":"git2/strarray.h","functions":["git_strarray_free","git_strarray_copy"],"meta":{},"lines":53},{"file":"git2/submodule.h","functions":["git_submodule_lookup","git_submodule_foreach","git_submodule_add_setup","git_submodule_add_finalize","git_submodule_add_to_index","git_submodule_save","git_submodule_owner","git_submodule_name","git_submodule_path","git_submodule_url","git_submodule_set_url","git_submodule_index_id","git_submodule_head_id","git_submodule_wd_id","git_submodule_ignore","git_submodule_set_ignore","git_submodule_update","git_submodule_set_update","git_submodule_fetch_recurse_submodules","git_submodule_set_fetch_recurse_submodules","git_submodule_init","git_submodule_sync","git_submodule_open","git_submodule_reload","git_submodule_reload_all","git_submodule_status","git_submodule_location"],"meta":{},"lines":540},{"file":"git2/sys/refdb_backend.h","functions":[],"meta":{},"lines":122},{"file":"git2/tag.h","functions":["git_tag_lookup","git_tag_lookup_prefix","git_tag_free","git_tag_id","git_tag_owner","git_tag_target","git_tag_target_id","git_tag_target_type","git_tag_name","git_tag_tagger","git_tag_message","git_tag_create","git_tag_annotation_create","git_tag_create_frombuffer","git_tag_create_lightweight","git_tag_delete","git_tag_list","git_tag_list_match","git_tag_foreach","git_tag_peel"],"meta":{},"lines":348},{"file":"git2/threads.h","functions":["git_threads_init","git_threads_shutdown"],"meta":{},"lines":45},{"file":"git2/trace.h","functions":["git_trace_callback","git_trace_set"],"meta":{},"lines":63},{"file":"git2/transport.h","functions":["git_cred_userpass_plaintext_new","git_cred_acquire_cb","git_transport_new","git_transport_dummy","git_transport_local","git_transport_smart","git_smart_subtransport_http","git_smart_subtransport_git","git_smart_subtransport_ssh"],"meta":{},"lines":394},{"file":"git2/tree.h","functions":["git_tree_lookup","git_tree_lookup_prefix","git_tree_free","git_tree_id","git_tree_owner","git_tree_entrycount","git_tree_entry_byname","git_tree_entry_byindex","git_tree_entry_byoid","git_tree_entry_bypath","git_tree_entry_dup","git_tree_entry_free","git_tree_entry_name","git_tree_entry_id","git_tree_entry_type","git_tree_entry_filemode","git_tree_entry_cmp","git_tree_entry_to_object","git_treebuilder_create","git_treebuilder_clear","git_treebuilder_entrycount","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_filter","git_treebuilder_write","git_treewalk_cb","git_tree_walk"],"meta":{},"lines":389},{"file":"git2/types.h","functions":["git_transfer_progress_callback"],"meta":{},"lines":230}],"functions":{"git_attr_get":{"type":"function","file":"git2/attr.h","line":142,"lineto":147,"args":[{"name":"value_out","type":"const char **","comment":"Output of the value of the attribute.  Use the GIT_ATTR_...\n             macros to test for TRUE, FALSE, UNSPECIFIED, etc. or just\n             use the string value for attributes set to a value.  You\n             should NOT modify or free this value."},{"name":"repo","type":"git_repository *","comment":"The repository containing the path."},{"name":"flags","type":"uint32_t","comment":"A combination of GIT_ATTR_CHECK... flags."},{"name":"path","type":"const char *","comment":"The path to check for attributes.  Relative paths are\n             interpreted relative to the repo root.  The file does\n             not have to exist, but if it does not, then it will be\n             treated as a plain file (not a directory)."},{"name":"name","type":"const char *","comment":"The name of the attribute to look up."}],"argline":"const char **value_out, git_repository *repo, uint32_t flags, const char *path, const char *name","sig":"const char **::git_repository *::uint32_t::const char *::const char *","return":{"type":"int","comment":null},"description":"<p>Look up the value of one git attribute for path.</p>\n","comments":"","group":"attr"},"git_attr_get_many":{"type":"function","file":"git2/attr.h","line":178,"lineto":184,"args":[{"name":"values_out","type":"const char **","comment":"An array of num_attr entries that will have string\n             pointers written into it for the values of the attributes.\n             You should not modify or free the values that are written\n             into this array (although of course, you should free the\n             array itself if you allocated it)."},{"name":"repo","type":"git_repository *","comment":"The repository containing the path."},{"name":"flags","type":"uint32_t","comment":"A combination of GIT_ATTR_CHECK... flags."},{"name":"path","type":"const char *","comment":"The path inside the repo to check attributes.  This\n             does not have to exist, but if it does not, then\n             it will be treated as a plain file (i.e. not a directory)."},{"name":"num_attr","type":"size_t","comment":"The number of attributes being looked up"},{"name":"names","type":"const char **","comment":"An array of num_attr strings containing attribute names."}],"argline":"const char **values_out, git_repository *repo, uint32_t flags, const char *path, size_t num_attr, const char **names","sig":"const char **::git_repository *::uint32_t::const char *::size_t::const char **","return":{"type":"int","comment":null},"description":"<p>Look up a list of git attributes for path.</p>\n","comments":"<p>Use this if you have a known list of attributes that you want to look up in a single call.  This is somewhat more efficient than calling <code>git_attr_get()</code> multiple times.</p>\n\n<p>For example, you might write:</p>\n\n<pre><code> const char *attrs[] = { &quot;crlf&quot;, &quot;diff&quot;, &quot;foo&quot; };     const char **values[3];     git_attr_get_many(values, repo, 0, &quot;my/fun/file.c&quot;, 3, attrs);\n</code></pre>\n\n<p>Then you could loop through the 3 values to get the settings for the three attributes you asked about.</p>\n","group":"attr"},"git_attr_foreach":{"type":"function","file":"git2/attr.h","line":205,"lineto":210,"args":[{"name":"repo","type":"git_repository *","comment":"The repository containing the path."},{"name":"flags","type":"uint32_t","comment":"A combination of GIT_ATTR_CHECK... flags."},{"name":"path","type":"const char *","comment":"Path inside the repo to check attributes.  This does not have\n             to exist, but if it does not, then it will be treated as a\n             plain file (i.e. not a directory)."},{"name":"callback","type":"git_attr_foreach_cb","comment":"Function to invoke on each attribute name and value.  The\n             value may be NULL is the attribute is explicitly set to\n             UNSPECIFIED using the '!' sign.  Callback will be invoked\n             only once per attribute name, even if there are multiple\n             rules for a given file.  The highest priority rule will be\n             used.  Return a non-zero value from this to stop looping."},{"name":"payload","type":"void *","comment":"Passed on as extra parameter to callback function."}],"argline":"git_repository *repo, uint32_t flags, const char *path, git_attr_foreach_cb callback, void *payload","sig":"git_repository *::uint32_t::const char *::git_attr_foreach_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback, or error code"},"description":"<p>Loop over all the git attributes for a path.</p>\n","comments":"","group":"attr"},"git_attr_cache_flush":{"type":"function","file":"git2/attr.h","line":220,"lineto":221,"args":[{"name":"repo","type":"git_repository *","comment":null}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"void","comment":null},"description":"<p>Flush the gitattributes cache.</p>\n","comments":"<p>Call this if you have reason to believe that the attributes files on disk no longer match the cached contents of memory.  This will cause the attributes files to be reloaded the next time that an attribute access function is called.</p>\n","group":"attr"},"git_attr_add_macro":{"type":"function","file":"git2/attr.h","line":233,"lineto":236,"args":[{"name":"repo","type":"git_repository *","comment":null},{"name":"name","type":"const char *","comment":null},{"name":"values","type":"const char *","comment":null}],"argline":"git_repository *repo, const char *name, const char *values","sig":"git_repository *::const char *::const char *","return":{"type":"int","comment":null},"description":"<p>Add a macro definition.</p>\n","comments":"<p>Macros will automatically be loaded from the top level <code>.gitattributes</code> file of the repository (plus the build-in &quot;binary&quot; macro).  This function allows you to add others.  For example, to add the default macro, you would call:</p>\n\n<pre><code> git_attr_add_macro(repo, &quot;binary&quot;, &quot;-diff -crlf&quot;);\n</code></pre>\n","group":"attr"},"git_blob_lookup":{"type":"function","file":"git2/blob.h","line":32,"lineto":32,"args":[{"name":"blob","type":"git_blob **","comment":"pointer to the looked up blob"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the blob."},{"name":"id","type":"const git_oid *","comment":"identity of the blob to locate."}],"argline":"git_blob **blob, git_repository *repo, const git_oid *id","sig":"git_blob **::git_repository *::const git_oid *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Lookup a blob object from a repository.</p>\n","comments":"","group":"blob","examples":{"general.c":["ex/v0.19.0/general.html#git_blob_lookup-1"]}},"git_blob_lookup_prefix":{"type":"function","file":"git2/blob.h","line":46,"lineto":46,"args":[{"name":"blob","type":"git_blob **","comment":"pointer to the looked up blob"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the blob."},{"name":"id","type":"const git_oid *","comment":"identity of the blob to locate."},{"name":"len","type":"size_t","comment":"the length of the short identifier"}],"argline":"git_blob **blob, git_repository *repo, const git_oid *id, size_t len","sig":"git_blob **::git_repository *::const git_oid *::size_t","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Lookup a blob object from a repository,\n given a prefix of its identifier (short id).</p>\n","comments":"","group":"blob"},"git_blob_free":{"type":"function","file":"git2/blob.h","line":59,"lineto":59,"args":[{"name":"blob","type":"git_blob *","comment":"the blob to close"}],"argline":"git_blob *blob","sig":"git_blob *","return":{"type":"void","comment":null},"description":"<p>Close an open blob</p>\n","comments":"<p>This is a wrapper around git_object_free()</p>\n\n<p>IMPORTANT: It <em>is</em> necessary to call this method when you stop using a blob. Failure to do so will cause a memory leak.</p>\n","group":"blob"},"git_blob_id":{"type":"function","file":"git2/blob.h","line":67,"lineto":67,"args":[{"name":"blob","type":"const git_blob *","comment":"a previously loaded blob."}],"argline":"const git_blob *blob","sig":"const git_blob *","return":{"type":"const git_oid *","comment":" SHA1 hash for this blob."},"description":"<p>Get the id of a blob.</p>\n","comments":"","group":"blob"},"git_blob_owner":{"type":"function","file":"git2/blob.h","line":75,"lineto":75,"args":[{"name":"blob","type":"const git_blob *","comment":"A previously loaded blob."}],"argline":"const git_blob *blob","sig":"const git_blob *","return":{"type":"git_repository *","comment":" Repository that contains this blob."},"description":"<p>Get the repository that contains the blob.</p>\n","comments":"","group":"blob"},"git_blob_rawcontent":{"type":"function","file":"git2/blob.h","line":88,"lineto":88,"args":[{"name":"blob","type":"const git_blob *","comment":"pointer to the blob"}],"argline":"const git_blob *blob","sig":"const git_blob *","return":{"type":"const void *","comment":" the pointer; NULL if the blob has no contents"},"description":"<p>Get a read-only buffer with the raw content of a blob.</p>\n","comments":"<p>A pointer to the raw content of a blob is returned; this pointer is owned internally by the object and shall not be free&#39;d. The pointer may be invalidated at a later time.</p>\n","group":"blob","examples":{"general.c":["ex/v0.19.0/general.html#git_blob_rawcontent-2"]}},"git_blob_rawsize":{"type":"function","file":"git2/blob.h","line":96,"lineto":96,"args":[{"name":"blob","type":"const git_blob *","comment":"pointer to the blob"}],"argline":"const git_blob *blob","sig":"const git_blob *","return":{"type":"git_off_t","comment":" size on bytes"},"description":"<p>Get the size in bytes of the contents of a blob</p>\n","comments":"","group":"blob","examples":{"general.c":["ex/v0.19.0/general.html#git_blob_rawsize-3","ex/v0.19.0/general.html#git_blob_rawsize-4"]}},"git_blob_create_fromworkdir":{"type":"function","file":"git2/blob.h","line":109,"lineto":109,"args":[{"name":"id","type":"git_oid *","comment":"return the id of the written blob"},{"name":"repo","type":"git_repository *","comment":"repository where the blob will be written.\n\tthis repository cannot be bare"},{"name":"relative_path","type":"const char *","comment":"file from which the blob will be created,\n\trelative to the repository's working dir"}],"argline":"git_oid *id, git_repository *repo, const char *relative_path","sig":"git_oid *::git_repository *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Read a file from the working folder of a repository\n and write it to the Object Database as a loose blob</p>\n","comments":"","group":"blob"},"git_blob_create_fromdisk":{"type":"function","file":"git2/blob.h","line":121,"lineto":121,"args":[{"name":"id","type":"git_oid *","comment":"return the id of the written blob"},{"name":"repo","type":"git_repository *","comment":"repository where the blob will be written.\n\tthis repository can be bare or not"},{"name":"path","type":"const char *","comment":"file from which the blob will be created"}],"argline":"git_oid *id, git_repository *repo, const char *path","sig":"git_oid *::git_repository *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Read a file from the filesystem and write its content\n to the Object Database as a loose blob</p>\n","comments":"","group":"blob"},"git_blob_create_fromchunks":{"type":"function","file":"git2/blob.h","line":162,"lineto":167,"args":[{"name":"id","type":"git_oid *","comment":"Return the id of the written blob"},{"name":"repo","type":"git_repository *","comment":"repository where the blob will be written.\n This repository can be bare or not."},{"name":"hintpath","type":"const char *","comment":"if not NULL, will help selecting the filters\n to apply onto the content of the blob to be created."},{"name":"callback","type":"git_blob_chunk_cb","comment":null},{"name":"payload","type":"void *","comment":null}],"argline":"git_oid *id, git_repository *repo, const char *hintpath, git_blob_chunk_cb callback, void *payload","sig":"git_oid *::git_repository *::const char *::git_blob_chunk_cb::void *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Write a loose blob to the Object Database from a\n provider of chunks of data.</p>\n","comments":"<p>Provided the <code>hintpath</code> parameter is filled, its value will help to determine what git filters should be applied to the object before it can be placed to the object database.</p>\n\n<p>The implementation of the callback has to respect the following rules:</p>\n\n<ul>\n<li><p><code>content</code> will have to be filled by the consumer. The maximum number of bytes that the buffer can accept per call is defined by the <code>max_length</code> parameter. Allocation and freeing of the buffer will be taken care of by the function.</p></li>\n<li><p>The callback is expected to return the number of bytes that <code>content</code> have been filled with.</p></li>\n<li><p>When there is no more data to stream, the callback should return 0. This will prevent it from being invoked anymore.</p></li>\n<li><p>When an error occurs, the callback should return -1.</p></li>\n</ul>\n","group":"blob"},"git_blob_create_frombuffer":{"type":"function","file":"git2/blob.h","line":178,"lineto":178,"args":[{"name":"oid","type":"git_oid *","comment":"return the oid of the written blob"},{"name":"repo","type":"git_repository *","comment":"repository where to blob will be written"},{"name":"buffer","type":"const void *","comment":"data to be written into the blob"},{"name":"len","type":"size_t","comment":"length of the data"}],"argline":"git_oid *oid, git_repository *repo, const void *buffer, size_t len","sig":"git_oid *::git_repository *::const void *::size_t","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Write an in-memory buffer to the ODB as a blob</p>\n","comments":"","group":"blob"},"git_blob_is_binary":{"type":"function","file":"git2/blob.h","line":191,"lineto":191,"args":[{"name":"blob","type":"git_blob *","comment":"The blob which content should be analyzed"}],"argline":"git_blob *blob","sig":"git_blob *","return":{"type":"int","comment":" 1 if the content of the blob is detected\n as binary; 0 otherwise."},"description":"<p>Determine if the blob content is most certainly binary or not.</p>\n","comments":"<p>The heuristic used to guess if a file is binary is taken from core git: Searching for NUL bytes and looking for a reasonable ratio of printable to non-printable characters among the first 4000 bytes.</p>\n","group":"blob"},"git_branch_create":{"type":"function","file":"git2/branch.h","line":50,"lineto":55,"args":[{"name":"out","type":"git_reference **","comment":"Pointer where to store the underlying reference."},{"name":"repo","type":"git_repository *","comment":null},{"name":"branch_name","type":"const char *","comment":"Name for the branch; this name is\n validated for consistency. It should also not conflict with\n an already existing branch name."},{"name":"target","type":"const git_commit *","comment":"Commit to which this branch should point. This object\n must belong to the given `repo`."},{"name":"force","type":"int","comment":"Overwrite existing branch."}],"argline":"git_reference **out, git_repository *repo, const char *branch_name, const git_commit *target, int force","sig":"git_reference **::git_repository *::const char *::const git_commit *::int","return":{"type":"int","comment":" 0, GIT_EINVALIDSPEC or an error code.\n A proper reference is written in the refs/heads namespace\n pointing to the provided target commit."},"description":"<p>Create a new branch pointing at a target commit</p>\n","comments":"<p>A new direct reference will be created pointing to this target commit. If <code>force</code> is true and a reference already exists with the given name, it&#39;ll be replaced.</p>\n\n<p>The returned reference must be freed by the user.</p>\n\n<p>The branch name will be checked for validity. See <code>git_tag_create()</code> for rules about valid names.</p>\n","group":"branch"},"git_branch_delete":{"type":"function","file":"git2/branch.h","line":67,"lineto":67,"args":[{"name":"branch","type":"git_reference *","comment":"A valid reference representing a branch"}],"argline":"git_reference *branch","sig":"git_reference *","return":{"type":"int","comment":" 0 on success, or an error code."},"description":"<p>Delete an existing branch reference.</p>\n","comments":"<p>If the branch is successfully deleted, the passed reference object will be invalidated. The reference must be freed manually by the user.</p>\n","group":"branch"},"git_branch_foreach":{"type":"function","file":"git2/branch.h","line":91,"lineto":95,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where to find the branches."},{"name":"list_flags","type":"unsigned int","comment":"Filtering flags for the branch\n listing. Valid values are GIT_BRANCH_LOCAL, GIT_BRANCH_REMOTE\n or a combination of the two."},{"name":"branch_cb","type":"git_branch_foreach_cb","comment":"Callback to invoke per found branch."},{"name":"payload","type":"void *","comment":"Extra parameter to callback function."}],"argline":"git_repository *repo, unsigned int list_flags, git_branch_foreach_cb branch_cb, void *payload","sig":"git_repository *::unsigned int::git_branch_foreach_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback, or error code"},"description":"<p>Loop over all the branches and issue a callback for each one.</p>\n","comments":"<p>If the callback returns a non-zero value, this will stop looping.</p>\n","group":"branch"},"git_branch_move":{"type":"function","file":"git2/branch.h","line":112,"lineto":116,"args":[{"name":"out","type":"git_reference **","comment":null},{"name":"branch","type":"git_reference *","comment":"Current underlying reference of the branch."},{"name":"new_branch_name","type":"const char *","comment":"Target name of the branch once the move\n is performed; this name is validated for consistency."},{"name":"force","type":"int","comment":"Overwrite existing branch."}],"argline":"git_reference **out, git_reference *branch, const char *new_branch_name, int force","sig":"git_reference **::git_reference *::const char *::int","return":{"type":"int","comment":" 0 on success, GIT_EINVALIDSPEC or an error code."},"description":"<p>Move/rename an existing local branch reference.</p>\n","comments":"<p>The new branch name will be checked for validity. See <code>git_tag_create()</code> for rules about valid names.</p>\n","group":"branch"},"git_branch_lookup":{"type":"function","file":"git2/branch.h","line":139,"lineto":143,"args":[{"name":"out","type":"git_reference **","comment":"pointer to the looked-up branch reference"},{"name":"repo","type":"git_repository *","comment":"the repository to look up the branch"},{"name":"branch_name","type":"const char *","comment":"Name of the branch to be looked-up;\n this name is validated for consistency."},{"name":"branch_type","type":"git_branch_t","comment":"Type of the considered branch. This should\n be valued with either GIT_BRANCH_LOCAL or GIT_BRANCH_REMOTE."}],"argline":"git_reference **out, git_repository *repo, const char *branch_name, git_branch_t branch_type","sig":"git_reference **::git_repository *::const char *::git_branch_t","return":{"type":"int","comment":" 0 on success; GIT_ENOTFOUND when no matching branch\n exists, GIT_EINVALIDSPEC, otherwise an error code."},"description":"<p>Lookup a branch by its name in a repository.</p>\n","comments":"<p>The generated reference must be freed by the user.</p>\n\n<p>The branch name will be checked for validity. See <code>git_tag_create()</code> for rules about valid names.</p>\n","group":"branch"},"git_branch_name":{"type":"function","file":"git2/branch.h","line":160,"lineto":161,"args":[{"name":"out","type":"const char **","comment":"where the pointer of branch name is stored;\n this is valid as long as the ref is not freed."},{"name":"ref","type":"git_reference *","comment":"the reference ideally pointing to a branch"}],"argline":"const char **out, git_reference *ref","sig":"const char **::git_reference *","return":{"type":"int","comment":" 0 on success; otherwise an error code (e.g., if the\n  ref is no local or remote branch)."},"description":"<p>Return the name of the given local or remote branch.</p>\n","comments":"<p>The name of the branch matches the definition of the name for git_branch_lookup. That is, if the returned name is given to git_branch_lookup() then the reference is returned that was given to this function.</p>\n","group":"branch"},"git_branch_upstream":{"type":"function","file":"git2/branch.h","line":175,"lineto":177,"args":[{"name":"out","type":"git_reference **","comment":"Pointer where to store the retrieved\n reference."},{"name":"branch","type":"git_reference *","comment":"Current underlying reference of the branch."}],"argline":"git_reference **out, git_reference *branch","sig":"git_reference **::git_reference *","return":{"type":"int","comment":" 0 on success; GIT_ENOTFOUND when no remote tracking\n reference exists, otherwise an error code."},"description":"<p>Return the reference supporting the remote tracking branch,\n given a local branch reference.</p>\n","comments":"","group":"branch"},"git_branch_set_upstream":{"type":"function","file":"git2/branch.h","line":189,"lineto":189,"args":[{"name":"branch","type":"git_reference *","comment":"the branch to configure"},{"name":"upstream_name","type":"const char *","comment":"remote-tracking or local branch to set as\n upstream. Pass NULL to unset."}],"argline":"git_reference *branch, const char *upstream_name","sig":"git_reference *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Set the upstream configuration for a given local branch</p>\n","comments":"","group":"branch"},"git_branch_upstream_name":{"type":"function","file":"git2/branch.h","line":209,"lineto":213,"args":[{"name":"tracking_branch_name_out","type":"char *","comment":"The user-allocated buffer which will be\n     filled with the name of the reference. Pass NULL if you just want to\n     get the needed size of the name of the reference as the output value."},{"name":"buffer_size","type":"size_t","comment":"Size of the `out` buffer in bytes."},{"name":"repo","type":"git_repository *","comment":"the repository where the branches live"},{"name":"canonical_branch_name","type":"const char *","comment":"name of the local branch."}],"argline":"char *tracking_branch_name_out, size_t buffer_size, git_repository *repo, const char *canonical_branch_name","sig":"char *::size_t::git_repository *::const char *","return":{"type":"int","comment":" number of characters in the reference name\n     including the trailing NUL byte; GIT_ENOTFOUND when no remote tracking\n     reference exists, otherwise an error code."},"description":"<p>Return the name of the reference supporting the remote tracking branch,\n given the name of a local branch reference.</p>\n","comments":"","group":"branch"},"git_branch_is_head":{"type":"function","file":"git2/branch.h","line":223,"lineto":224,"args":[{"name":"branch","type":"git_reference *","comment":"Current underlying reference of the branch."}],"argline":"git_reference *branch","sig":"git_reference *","return":{"type":"int","comment":" 1 if HEAD points at the branch, 0 if it isn't,\n error code otherwise."},"description":"<p>Determine if the current local branch is pointed at by HEAD.</p>\n","comments":"","group":"branch"},"git_branch_remote_name":{"type":"function","file":"git2/branch.h","line":245,"lineto":249,"args":[{"name":"remote_name_out","type":"char *","comment":"The user-allocated buffer which will be\n     filled with the name of the remote. Pass NULL if you just want to\n     get the needed size of the name of the remote as the output value."},{"name":"buffer_size","type":"size_t","comment":"Size of the `out` buffer in bytes."},{"name":"repo","type":"git_repository *","comment":"The repository where the branch lives."},{"name":"canonical_branch_name","type":"const char *","comment":"name of the remote tracking branch."}],"argline":"char *remote_name_out, size_t buffer_size, git_repository *repo, const char *canonical_branch_name","sig":"char *::size_t::git_repository *::const char *","return":{"type":"int","comment":" Number of characters in the reference name\n     including the trailing NUL byte; GIT_ENOTFOUND\n     when no remote matching remote was found,\n     GIT_EAMBIGUOUS when the branch maps to several remotes,\n     otherwise an error code."},"description":"<p>Return the name of remote that the remote tracking branch belongs to.</p>\n","comments":"","group":"branch"},"git_checkout_head":{"type":"function","file":"git2/checkout.h","line":256,"lineto":258,"args":[{"name":"repo","type":"git_repository *","comment":"repository to check out (must be non-bare)"},{"name":"opts","type":"git_checkout_opts *","comment":"specifies checkout options (may be NULL)"}],"argline":"git_repository *repo, git_checkout_opts *opts","sig":"git_repository *::git_checkout_opts *","return":{"type":"int","comment":" 0 on success, GIT_EORPHANEDHEAD when HEAD points to a non existing\n branch, GIT_ERROR otherwise (use giterr_last for information\n about the error)"},"description":"<p>Updates files in the index and the working tree to match the content of\n the commit pointed at by HEAD.</p>\n","comments":"","group":"checkout"},"git_checkout_index":{"type":"function","file":"git2/checkout.h","line":269,"lineto":272,"args":[{"name":"repo","type":"git_repository *","comment":"repository into which to check out (must be non-bare)"},{"name":"index","type":"git_index *","comment":"index to be checked out (or NULL to use repository index)"},{"name":"opts","type":"git_checkout_opts *","comment":"specifies checkout options (may be NULL)"}],"argline":"git_repository *repo, git_index *index, git_checkout_opts *opts","sig":"git_repository *::git_index *::git_checkout_opts *","return":{"type":"int","comment":" 0 on success, GIT_ERROR otherwise (use giterr_last for information\n about the error)"},"description":"<p>Updates files in the working tree to match the content of the index.</p>\n","comments":"","group":"checkout"},"git_checkout_tree":{"type":"function","file":"git2/checkout.h","line":285,"lineto":288,"args":[{"name":"repo","type":"git_repository *","comment":"repository to check out (must be non-bare)"},{"name":"treeish","type":"const git_object *","comment":"a commit, tag or tree which content will be used to update\n the working directory"},{"name":"opts","type":"git_checkout_opts *","comment":"specifies checkout options (may be NULL)"}],"argline":"git_repository *repo, const git_object *treeish, git_checkout_opts *opts","sig":"git_repository *::const git_object *::git_checkout_opts *","return":{"type":"int","comment":" 0 on success, GIT_ERROR otherwise (use giterr_last for information\n about the error)"},"description":"<p>Updates files in the index and working tree to match the content of the\n tree pointed at by the treeish.</p>\n","comments":"","group":"checkout"},"git_clone":{"type":"function","file":"git2/clone.h","line":102,"lineto":106,"args":[{"name":"out","type":"git_repository **","comment":"pointer that will receive the resulting repository object"},{"name":"url","type":"const char *","comment":"the remote repository to clone"},{"name":"local_path","type":"const char *","comment":"local directory to clone to"},{"name":"options","type":"const git_clone_options *","comment":"configuration options for the clone.  If NULL, the function\n works as though GIT_OPTIONS_INIT were passed."}],"argline":"git_repository **out, const char *url, const char *local_path, const git_clone_options *options","sig":"git_repository **::const char *::const char *::const git_clone_options *","return":{"type":"int","comment":" 0 on success, GIT_ERROR otherwise (use giterr_last for information\n about the error)"},"description":"<p>Clone a remote repository, and checkout the branch pointed to by the remote\n HEAD.</p>\n","comments":"","group":"git2_clone","examples":{"network/clone.c":["ex/v0.19.0/network/clone.html#git_clone-1"]}},"git_commit_lookup":{"type":"function","file":"git2/commit.h","line":33,"lineto":33,"args":[{"name":"commit","type":"git_commit **","comment":"pointer to the looked up commit"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the commit."},{"name":"id","type":"const git_oid *","comment":"identity of the commit to locate. If the object is\n\t\tan annotated tag it will be peeled back to the commit."}],"argline":"git_commit **commit, git_repository *repo, const git_oid *id","sig":"git_commit **::git_repository *::const git_oid *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Lookup a commit object from a repository.</p>\n","comments":"","group":"commit","examples":{"general.c":["ex/v0.19.0/general.html#git_commit_lookup-5","ex/v0.19.0/general.html#git_commit_lookup-6","ex/v0.19.0/general.html#git_commit_lookup-7"]}},"git_commit_lookup_prefix":{"type":"function","file":"git2/commit.h","line":48,"lineto":48,"args":[{"name":"commit","type":"git_commit **","comment":"pointer to the looked up commit"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the commit."},{"name":"id","type":"const git_oid *","comment":"identity of the commit to locate. If the object is\n\t\tan annotated tag it will be peeled back to the commit."},{"name":"len","type":"size_t","comment":"the length of the short identifier"}],"argline":"git_commit **commit, git_repository *repo, const git_oid *id, size_t len","sig":"git_commit **::git_repository *::const git_oid *::size_t","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Lookup a commit object from a repository,\n given a prefix of its identifier (short id).</p>\n","comments":"","group":"commit"},"git_commit_free":{"type":"function","file":"git2/commit.h","line":62,"lineto":62,"args":[{"name":"commit","type":"git_commit *","comment":"the commit to close"}],"argline":"git_commit *commit","sig":"git_commit *","return":{"type":"void","comment":null},"description":"<p>Close an open commit</p>\n","comments":"<p>This is a wrapper around git_object_free()</p>\n\n<p>IMPORTANT: It <em>is</em> necessary to call this method when you stop using a commit. Failure to do so will cause a memory leak.</p>\n","group":"commit","examples":{"general.c":["ex/v0.19.0/general.html#git_commit_free-8","ex/v0.19.0/general.html#git_commit_free-9","ex/v0.19.0/general.html#git_commit_free-10","ex/v0.19.0/general.html#git_commit_free-11"]}},"git_commit_id":{"type":"function","file":"git2/commit.h","line":70,"lineto":70,"args":[{"name":"commit","type":"const git_commit *","comment":"a previously loaded commit."}],"argline":"const git_commit *commit","sig":"const git_commit *","return":{"type":"const git_oid *","comment":" object identity for the commit."},"description":"<p>Get the id of a commit.</p>\n","comments":"","group":"commit","examples":{"general.c":["ex/v0.19.0/general.html#git_commit_id-12"]}},"git_commit_owner":{"type":"function","file":"git2/commit.h","line":78,"lineto":78,"args":[{"name":"commit","type":"const git_commit *","comment":"A previously loaded commit."}],"argline":"const git_commit *commit","sig":"const git_commit *","return":{"type":"git_repository *","comment":" Repository that contains this commit."},"description":"<p>Get the repository that contains the commit.</p>\n","comments":"","group":"commit"},"git_commit_message_encoding":{"type":"function","file":"git2/commit.h","line":90,"lineto":90,"args":[{"name":"commit","type":"const git_commit *","comment":"a previously loaded commit."}],"argline":"const git_commit *commit","sig":"const git_commit *","return":{"type":"const char *","comment":" NULL, or the encoding"},"description":"<p>Get the encoding for the message of a commit,\n as a string representing a standard encoding name.</p>\n","comments":"<p>The encoding may be NULL if the <code>encoding</code> header in the commit is missing; in that case UTF-8 is assumed.</p>\n","group":"commit"},"git_commit_message":{"type":"function","file":"git2/commit.h","line":98,"lineto":98,"args":[{"name":"commit","type":"const git_commit *","comment":"a previously loaded commit."}],"argline":"const git_commit *commit","sig":"const git_commit *","return":{"type":"const char *","comment":" the message of a commit"},"description":"<p>Get the full message of a commit.</p>\n","comments":"","group":"commit","examples":{"general.c":["ex/v0.19.0/general.html#git_commit_message-13","ex/v0.19.0/general.html#git_commit_message-14","ex/v0.19.0/general.html#git_commit_message-15"]}},"git_commit_time":{"type":"function","file":"git2/commit.h","line":106,"lineto":106,"args":[{"name":"commit","type":"const git_commit *","comment":"a previously loaded commit."}],"argline":"const git_commit *commit","sig":"const git_commit *","return":{"type":"git_time_t","comment":" the time of a commit"},"description":"<p>Get the commit time (i.e. committer time) of a commit.</p>\n","comments":"","group":"commit","examples":{"general.c":["ex/v0.19.0/general.html#git_commit_time-16","ex/v0.19.0/general.html#git_commit_time-17"]}},"git_commit_time_offset":{"type":"function","file":"git2/commit.h","line":114,"lineto":114,"args":[{"name":"commit","type":"const git_commit *","comment":"a previously loaded commit."}],"argline":"const git_commit *commit","sig":"const git_commit *","return":{"type":"int","comment":" positive or negative timezone offset, in minutes from UTC"},"description":"<p>Get the commit timezone offset (i.e. committer&#39;s preferred timezone) of a commit.</p>\n","comments":"","group":"commit"},"git_commit_committer":{"type":"function","file":"git2/commit.h","line":122,"lineto":122,"args":[{"name":"commit","type":"const git_commit *","comment":"a previously loaded commit."}],"argline":"const git_commit *commit","sig":"const git_commit *","return":{"type":"const git_signature *","comment":" the committer of a commit"},"description":"<p>Get the committer of a commit.</p>\n","comments":"","group":"commit","examples":{"general.c":["ex/v0.19.0/general.html#git_commit_committer-18"]}},"git_commit_author":{"type":"function","file":"git2/commit.h","line":130,"lineto":130,"args":[{"name":"commit","type":"const git_commit *","comment":"a previously loaded commit."}],"argline":"const git_commit *commit","sig":"const git_commit *","return":{"type":"const git_signature *","comment":" the author of a commit"},"description":"<p>Get the author of a commit.</p>\n","comments":"","group":"commit","examples":{"general.c":["ex/v0.19.0/general.html#git_commit_author-19","ex/v0.19.0/general.html#git_commit_author-20"]}},"git_commit_tree":{"type":"function","file":"git2/commit.h","line":139,"lineto":139,"args":[{"name":"tree_out","type":"git_tree **","comment":"pointer where to store the tree object"},{"name":"commit","type":"const git_commit *","comment":"a previously loaded commit."}],"argline":"git_tree **tree_out, const git_commit *commit","sig":"git_tree **::const git_commit *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Get the tree pointed to by a commit.</p>\n","comments":"","group":"commit"},"git_commit_tree_id":{"type":"function","file":"git2/commit.h","line":149,"lineto":149,"args":[{"name":"commit","type":"const git_commit *","comment":"a previously loaded commit."}],"argline":"const git_commit *commit","sig":"const git_commit *","return":{"type":"const git_oid *","comment":" the id of tree pointed to by commit."},"description":"<p>Get the id of the tree pointed to by a commit. This differs from\n <code>git_commit_tree</code> in that no attempts are made to fetch an object\n from the ODB.</p>\n","comments":"","group":"commit"},"git_commit_parentcount":{"type":"function","file":"git2/commit.h","line":157,"lineto":157,"args":[{"name":"commit","type":"const git_commit *","comment":"a previously loaded commit."}],"argline":"const git_commit *commit","sig":"const git_commit *","return":{"type":"unsigned int","comment":" integer of count of parents"},"description":"<p>Get the number of parents of this commit</p>\n","comments":"","group":"commit","examples":{"general.c":["ex/v0.19.0/general.html#git_commit_parentcount-21"]}},"git_commit_parent":{"type":"function","file":"git2/commit.h","line":167,"lineto":170,"args":[{"name":"out","type":"git_commit **","comment":"Pointer where to store the parent commit"},{"name":"commit","type":"const git_commit *","comment":"a previously loaded commit."},{"name":"n","type":"unsigned int","comment":"the position of the parent (from 0 to `parentcount`)"}],"argline":"git_commit **out, const git_commit *commit, unsigned int n","sig":"git_commit **::const git_commit *::unsigned int","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Get the specified parent of the commit.</p>\n","comments":"","group":"commit","examples":{"general.c":["ex/v0.19.0/general.html#git_commit_parent-22"]}},"git_commit_parent_id":{"type":"function","file":"git2/commit.h","line":181,"lineto":183,"args":[{"name":"commit","type":"const git_commit *","comment":"a previously loaded commit."},{"name":"n","type":"unsigned int","comment":"the position of the parent (from 0 to `parentcount`)"}],"argline":"const git_commit *commit, unsigned int n","sig":"const git_commit *::unsigned int","return":{"type":"const git_oid *","comment":" the id of the parent, NULL on error."},"description":"<p>Get the oid of a specified parent for a commit. This is different from\n <code>git_commit_parent</code>, which will attempt to load the parent commit from\n the ODB.</p>\n","comments":"","group":"commit"},"git_commit_nth_gen_ancestor":{"type":"function","file":"git2/commit.h","line":199,"lineto":202,"args":[{"name":"ancestor","type":"git_commit **","comment":"Pointer where to store the ancestor commit"},{"name":"commit","type":"const git_commit *","comment":"a previously loaded commit."},{"name":"n","type":"unsigned int","comment":"the requested generation"}],"argline":"git_commit **ancestor, const git_commit *commit, unsigned int n","sig":"git_commit **::const git_commit *::unsigned int","return":{"type":"int","comment":" 0 on success; GIT_ENOTFOUND if no matching ancestor exists\n or an error code"},"description":"<p>Get the commit object that is the \n&lt;n</p>\n\n<blockquote>\n<p>th generation ancestor\n of the named commit object, following only the first parents.\n The returned commit has to be freed by the caller.</p>\n</blockquote>\n","comments":"<p>Passing <code>0</code> as the generation number returns another instance of the base commit itself.</p>\n","group":"commit"},"git_commit_create":{"type":"function","file":"git2/commit.h","line":247,"lineto":257,"args":[{"name":"id","type":"git_oid *","comment":"Pointer in which to store the OID of the newly created commit"},{"name":"repo","type":"git_repository *","comment":"Repository where to store the commit"},{"name":"update_ref","type":"const char *","comment":"If not NULL, name of the reference that\n\twill be updated to point to this commit. If the reference\n\tis not direct, it will be resolved to a direct reference.\n\tUse \"HEAD\" to update the HEAD of the current branch and\n\tmake it point to this commit. If the reference doesn't\n\texist yet, it will be created."},{"name":"author","type":"const git_signature *","comment":"Signature with author and author time of commit"},{"name":"committer","type":"const git_signature *","comment":"Signature with committer and * commit time of commit"},{"name":"message_encoding","type":"const char *","comment":"The encoding for the message in the\n  commit, represented with a standard encoding name.\n  E.g. \"UTF-8\". If NULL, no encoding header is written and\n  UTF-8 is assumed."},{"name":"message","type":"const char *","comment":"Full message for this commit"},{"name":"tree","type":"const git_tree *","comment":"An instance of a `git_tree` object that will\n  be used as the tree for the commit. This tree object must\n  also be owned by the given `repo`."},{"name":"parent_count","type":"int","comment":"Number of parents for this commit"},{"name":"parents","type":"const git_commit *[]","comment":"Array of `parent_count` pointers to `git_commit`\n  objects that will be used as the parents for this commit. This\n  array may be NULL if `parent_count` is 0 (root commit). All the\n  given commits must be owned by the `repo`."}],"argline":"git_oid *id, git_repository *repo, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_tree *tree, int parent_count, const git_commit *[] parents","sig":"git_oid *::git_repository *::const char *::const git_signature *::const git_signature *::const char *::const char *::const git_tree *::int::const git_commit *[]","return":{"type":"int","comment":" 0 or an error code\n\tThe created commit will be written to the Object Database and\n\tthe given reference will be updated to point to it"},"description":"<p>Create new commit in the repository from a list of <code>git_object</code> pointers</p>\n","comments":"<p>The message will not be cleaned up automatically. You can do that with the <code>git_message_prettify()</code> function.</p>\n","group":"commit"},"git_commit_create_v":{"type":"function","file":"git2/commit.h","line":273,"lineto":283,"args":[{"name":"id","type":"git_oid *","comment":null},{"name":"repo","type":"git_repository *","comment":null},{"name":"update_ref","type":"const char *","comment":null},{"name":"author","type":"const git_signature *","comment":null},{"name":"committer","type":"const git_signature *","comment":null},{"name":"message_encoding","type":"const char *","comment":null},{"name":"message","type":"const char *","comment":null},{"name":"tree","type":"const git_tree *","comment":null},{"name":"parent_count","type":"int","comment":null}],"argline":"git_oid *id, git_repository *repo, const char *update_ref, const git_signature *author, const git_signature *committer, const char *message_encoding, const char *message, const git_tree *tree, int parent_count","sig":"git_oid *::git_repository *::const char *::const git_signature *::const git_signature *::const char *::const char *::const git_tree *::int","return":{"type":"int","comment":null},"description":"<p>Create new commit in the repository using a variable argument list.</p>\n","comments":"<p>The message will be cleaned up from excess whitespace and it will be made sure that the last line ends with a &#39;&#39;.</p>\n\n<p>The parents for the commit are specified as a variable list of pointers to <code>const git_commit *</code>. Note that this is a convenience method which may not be safe to export for certain languages or compilers</p>\n\n<p>All other parameters remain the same at <code>git_commit_create()</code>.</p>\n","group":"commit","examples":{"general.c":["ex/v0.19.0/general.html#git_commit_create_v-23"]}},"git_libgit2_version":{"type":"function","file":"git2/common.h","line":101,"lineto":101,"args":[{"name":"major","type":"int *","comment":"Store the major version number"},{"name":"minor","type":"int *","comment":"Store the minor version number"},{"name":"rev","type":"int *","comment":"Store the revision (patch) number"}],"argline":"int *major, int *minor, int *rev","sig":"int *::int *::int *","return":{"type":"void","comment":null},"description":"<p>Return the version of the libgit2 library\n being currently used.</p>\n","comments":"","group":"libgit2"},"git_libgit2_capabilities":{"type":"function","file":"git2/common.h","line":125,"lineto":125,"args":[],"argline":"","sig":"","return":{"type":"int","comment":" A combination of GIT_CAP_* values."},"description":"<p>Query compile time options for libgit2.</p>\n","comments":"<ul>\n<li><p>GIT_CAP_THREADS   Libgit2 was compiled with thread support. Note that thread support is   still to be seen as a &#39;work in progress&#39; - basic object lookups are   believed to be threadsafe, but other operations may not be.</p></li>\n<li><p>GIT_CAP_HTTPS   Libgit2 supports the https:// protocol. This requires the openssl   library to be found when compiling libgit2.</p></li>\n</ul>\n","group":"libgit2"},"git_libgit2_opts":{"type":"function","file":"git2/common.h","line":216,"lineto":216,"args":[{"name":"option","type":"int","comment":"Option key"}],"argline":"int option","sig":"int","return":{"type":"int","comment":" 0 on success, \n<\n0 on failure"},"description":"<p>Set or query a library global option</p>\n","comments":"<p>Available options:</p>\n\n<pre><code>* opts(GIT_OPT_GET_MWINDOW_SIZE, size_t *):\n\n    &gt; Get the maximum mmap window size\n\n* opts(GIT_OPT_SET_MWINDOW_SIZE, size_t):\n\n    &gt; Set the maximum mmap window size\n\n* opts(GIT_OPT_GET_MWINDOW_MAPPED_LIMIT, size_t *):\n\n    &gt; Get the maximum memory that will be mapped in total by the library\n\n* opts(GIT_OPT_SET_MWINDOW_MAPPED_LIMIT, size_t):\n\n    &gt;Set the maximum amount of memory that can be mapped at any time        by the library\n\n* opts(GIT_OPT_GET_SEARCH_PATH, int level, char *out, size_t len)\n\n    &gt; Get the search path for a given level of config data.  &quot;level&quot; must       &gt; be one of `GIT_CONFIG_LEVEL_SYSTEM`, `GIT_CONFIG_LEVEL_GLOBAL`, or        &gt; `GIT_CONFIG_LEVEL_XDG`.  The search path is written to the `out`      &gt; buffer up to size `len`.  Returns GIT_EBUFS if buffer is too small.\n\n* opts(GIT_OPT_SET_SEARCH_PATH, int level, const char *path)\n\n    &gt; Set the search path for a level of config data.  The search path      &gt; applied to shared attributes and ignore files, too.       &gt;       &gt; - `path` lists directories delimited by GIT_PATH_LIST_SEPARATOR.      &gt;   Pass NULL to reset to the default (generally based on environment       &gt;   variables).  Use magic path `$PATH` to include the old value        &gt;   of the path (if you want to prepend or append, for instance).       &gt;       &gt; - `level` must be GIT_CONFIG_LEVEL_SYSTEM, GIT_CONFIG_LEVEL_GLOBAL,       &gt;   or GIT_CONFIG_LEVEL_XDG.\n\n* opts(GIT_OPT_SET_CACHE_OBJECT_LIMIT, git_otype type, size_t size)\n\n    &gt; Set the maximum data size for the given type of object to be      &gt; considered eligible for caching in memory.  Setting to value to       &gt; zero means that that type of object will not be cached.       &gt; Defaults to 0 for GIT_OBJ_BLOB (i.e. won&#39;t cache blobs) and 4k        &gt; for GIT_OBJ_COMMIT, GIT_OBJ_TREE, and GIT_OBJ_TAG.\n\n* opts(GIT_OPT_SET_CACHE_MAX_SIZE, ssize_t max_storage_bytes)\n\n    &gt; Set the maximum total data size that will be cached in memory     &gt; across all repositories before libgit2 starts evicting objects        &gt; from the cache.  This is a soft limit, in that the library might      &gt; briefly exceed it, but will start aggressively evicting objects       &gt; from cache when that happens.  The default cache size is 256Mb.\n\n* opts(GIT_OPT_ENABLE_CACHING, int enabled)\n\n    &gt; Enable or disable caching completely.     &gt;       &gt; Because caches are repository-specific, disabling the cache       &gt; cannot immediately clear all cached objects, but each cache will      &gt; be cleared on the next attempt to update anything in it.\n\n* opts(GIT_OPT_GET_CACHED_MEMORY, ssize_t *current, ssize_t *allowed)\n\n    &gt; Get the current bytes in cache and the maximum that would be      &gt; allowed in the cache.\n</code></pre>\n","group":"libgit2"},"git_config_find_global":{"type":"function","file":"git2/config.h","line":96,"lineto":96,"args":[{"name":"out","type":"char *","comment":"Buffer to store the path in"},{"name":"length","type":"size_t","comment":"size of the buffer in bytes"}],"argline":"char *out, size_t length","sig":"char *::size_t","return":{"type":"int","comment":" 0 if a global configuration file has been found. Its path will be stored in `buffer`."},"description":"<p>Locate the path to the global configuration file</p>\n","comments":"<p>The user or global configuration file is usually located in <code>$HOME/.gitconfig</code>.</p>\n\n<p>This method will try to guess the full path to that file, if the file exists. The returned path may be used on any <code>git_config</code> call to load the global configuration file.</p>\n\n<p>This method will not guess the path to the xdg compatible config file (.config/git/config).</p>\n","group":"config"},"git_config_find_xdg":{"type":"function","file":"git2/config.h","line":114,"lineto":114,"args":[{"name":"out","type":"char *","comment":"Buffer to store the path in"},{"name":"length","type":"size_t","comment":"size of the buffer in bytes"}],"argline":"char *out, size_t length","sig":"char *::size_t","return":{"type":"int","comment":" 0 if a xdg compatible configuration file has been\n\tfound. Its path will be stored in `buffer`."},"description":"<p>Locate the path to the global xdg compatible configuration file</p>\n","comments":"<p>The xdg compatible configuration file is usually located in <code>$HOME/.config/git/config</code>.</p>\n\n<p>This method will try to guess the full path to that file, if the file exists. The returned path may be used on any <code>git_config</code> call to load the xdg compatible configuration file.</p>\n","group":"config"},"git_config_find_system":{"type":"function","file":"git2/config.h","line":127,"lineto":127,"args":[{"name":"out","type":"char *","comment":"Buffer to store the path in"},{"name":"length","type":"size_t","comment":"size of the buffer in bytes"}],"argline":"char *out, size_t length","sig":"char *::size_t","return":{"type":"int","comment":" 0 if a system configuration file has been\n\tfound. Its path will be stored in `buffer`."},"description":"<p>Locate the path to the system configuration file</p>\n","comments":"<p>If /etc/gitconfig doesn&#39;t exist, it will look for %PROGRAMFILES%.</p>\n","group":"config"},"git_config_open_default":{"type":"function","file":"git2/config.h","line":139,"lineto":139,"args":[{"name":"out","type":"git_config **","comment":"Pointer to store the config instance"}],"argline":"git_config **out","sig":"git_config **","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Open the global, XDG and system configuration files</p>\n","comments":"<p>Utility wrapper that finds the global, XDG and system configuration files and opens them into a single prioritized config object that can be used when accessing default config data outside a repository.</p>\n","group":"config"},"git_config_new":{"type":"function","file":"git2/config.h","line":150,"lineto":150,"args":[{"name":"out","type":"git_config **","comment":"pointer to the new configuration"}],"argline":"git_config **out","sig":"git_config **","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Allocate a new configuration object</p>\n","comments":"<p>This object is empty, so you have to add a file to it before you can do anything with it.</p>\n","group":"config"},"git_config_add_file_ondisk":{"type":"function","file":"git2/config.h","line":174,"lineto":178,"args":[{"name":"cfg","type":"git_config *","comment":"the configuration to add the file to"},{"name":"path","type":"const char *","comment":"path to the configuration file to add"},{"name":"level","type":"git_config_level_t","comment":"the priority level of the backend"},{"name":"force","type":"int","comment":"replace config file at the given priority level"}],"argline":"git_config *cfg, const char *path, git_config_level_t level, int force","sig":"git_config *::const char *::git_config_level_t::int","return":{"type":"int","comment":" 0 on success, GIT_EEXISTS when adding more than one file\n  for a given priority level (and force_replace set to 0),\n  GIT_ENOTFOUND when the file doesn't exist or error code"},"description":"<p>Add an on-disk config file instance to an existing config</p>\n","comments":"<p>The on-disk file pointed at by <code>path</code> will be opened and parsed; it&#39;s expected to be a native Git config file following the default Git config syntax (see man git-config).</p>\n\n<p>Note that the configuration object will free the file automatically.</p>\n\n<p>Further queries on this config object will access each of the config file instances in order (instances with a higher priority level will be accessed first).</p>\n","group":"config"},"git_config_open_ondisk":{"type":"function","file":"git2/config.h","line":193,"lineto":193,"args":[{"name":"out","type":"git_config **","comment":"The configuration instance to create"},{"name":"path","type":"const char *","comment":"Path to the on-disk file to open"}],"argline":"git_config **out, const char *path","sig":"git_config **::const char *","return":{"type":"int","comment":" 0 on success, GIT_ENOTFOUND when the file doesn't exist\n or an error code"},"description":"<p>Create a new config instance containing a single on-disk file</p>\n","comments":"<p>This method is a simple utility wrapper for the following sequence of calls:   - git_config_new    - git_config_add_file_ondisk</p>\n","group":"config","examples":{"general.c":["ex/v0.19.0/general.html#git_config_open_ondisk-24"]}},"git_config_open_level":{"type":"function","file":"git2/config.h","line":211,"lineto":214,"args":[{"name":"out","type":"git_config **","comment":"The configuration instance to create"},{"name":"parent","type":"const git_config *","comment":"Multi-level config to search for the given level"},{"name":"level","type":"git_config_level_t","comment":"Configuration level to search for"}],"argline":"git_config **out, const git_config *parent, git_config_level_t level","sig":"git_config **::const git_config *::git_config_level_t","return":{"type":"int","comment":" 0, GIT_ENOTFOUND if the passed level cannot be found in the\n multi-level parent config, or an error code"},"description":"<p>Build a single-level focused config object from a multi-level one.</p>\n","comments":"<p>The returned config object can be used to perform get/set/delete operations on a single specific level.</p>\n\n<p>Getting several times the same level from the same parent multi-level config will return different config instances, but containing the same config_file instance.</p>\n","group":"config"},"git_config_open_global":{"type":"function","file":"git2/config.h","line":228,"lineto":228,"args":[{"name":"out","type":"git_config **","comment":"pointer in which to store the config object"},{"name":"config","type":"git_config *","comment":"the config object in which to look"}],"argline":"git_config **out, git_config *config","sig":"git_config **::git_config *","return":{"type":"int","comment":null},"description":"<p>Open the global/XDG configuration file according to git&#39;s rules</p>\n","comments":"<p>Git allows you to store your global configuration at <code>$HOME/.config</code> or <code>$XDG_CONFIG_HOME/git/config</code>. For backwards compatability, the XDG file shouldn&#39;t be used unless the use has created it explicitly. With this function you&#39;ll open the correct one to write to.</p>\n","group":"config"},"git_config_refresh":{"type":"function","file":"git2/config.h","line":242,"lineto":242,"args":[{"name":"cfg","type":"git_config *","comment":"The configuration to refresh"}],"argline":"git_config *cfg","sig":"git_config *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Reload changed config files</p>\n","comments":"<p>A config file may be changed on disk out from under the in-memory config object.  This function causes us to look for files that have been modified since we last loaded them and refresh the config with the latest information.</p>\n","group":"config"},"git_config_free":{"type":"function","file":"git2/config.h","line":249,"lineto":249,"args":[{"name":"cfg","type":"git_config *","comment":"the configuration to free"}],"argline":"git_config *cfg","sig":"git_config *","return":{"type":"void","comment":null},"description":"<p>Free the configuration and its associated memory and files</p>\n","comments":"","group":"config"},"git_config_get_entry":{"type":"function","file":"git2/config.h","line":262,"lineto":265,"args":[{"name":"out","type":"const git_config_entry **","comment":"pointer to the variable git_config_entry"},{"name":"cfg","type":"const git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"}],"argline":"const git_config_entry **out, const git_config *cfg, const char *name","sig":"const git_config_entry **::const git_config *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Get the git_config_entry of a config variable.</p>\n","comments":"<p>The git_config_entry is owned by the config and should not be freed by the user.</p>\n","group":"config"},"git_config_get_int32":{"type":"function","file":"git2/config.h","line":279,"lineto":279,"args":[{"name":"out","type":"int32_t *","comment":"pointer to the variable where the value should be stored"},{"name":"cfg","type":"const git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"}],"argline":"int32_t *out, const git_config *cfg, const char *name","sig":"int32_t *::const git_config *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Get the value of an integer config variable.</p>\n","comments":"<p>All config files will be looked into, in the order of their defined level. A higher level means a higher priority. The first occurence of the variable will be returned here.</p>\n","group":"config","examples":{"general.c":["ex/v0.19.0/general.html#git_config_get_int32-25"]}},"git_config_get_int64":{"type":"function","file":"git2/config.h","line":293,"lineto":293,"args":[{"name":"out","type":"int64_t *","comment":"pointer to the variable where the value should be stored"},{"name":"cfg","type":"const git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"}],"argline":"int64_t *out, const git_config *cfg, const char *name","sig":"int64_t *::const git_config *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Get the value of a long integer config variable.</p>\n","comments":"<p>All config files will be looked into, in the order of their defined level. A higher level means a higher priority. The first occurrence of the variable will be returned here.</p>\n","group":"config"},"git_config_get_bool":{"type":"function","file":"git2/config.h","line":310,"lineto":310,"args":[{"name":"out","type":"int *","comment":"pointer to the variable where the value should be stored"},{"name":"cfg","type":"const git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"}],"argline":"int *out, const git_config *cfg, const char *name","sig":"int *::const git_config *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Get the value of a boolean config variable.</p>\n","comments":"<p>This function uses the usual C convention of 0 being false and anything else true.</p>\n\n<p>All config files will be looked into, in the order of their defined level. A higher level means a higher priority. The first occurrence of the variable will be returned here.</p>\n","group":"config"},"git_config_get_string":{"type":"function","file":"git2/config.h","line":327,"lineto":327,"args":[{"name":"out","type":"const char **","comment":"pointer to the variable's value"},{"name":"cfg","type":"const git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"}],"argline":"const char **out, const git_config *cfg, const char *name","sig":"const char **::const git_config *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Get the value of a string config variable.</p>\n","comments":"<p>The string is owned by the variable and should not be freed by the user.</p>\n\n<p>All config files will be looked into, in the order of their defined level. A higher level means a higher priority. The first occurrence of the variable will be returned here.</p>\n","group":"config","examples":{"general.c":["ex/v0.19.0/general.html#git_config_get_string-26"]}},"git_config_get_multivar":{"type":"function","file":"git2/config.h","line":341,"lineto":341,"args":[{"name":"cfg","type":"const git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"regexp","type":"const char *","comment":"regular expression to filter which variables we're\n interested in. Use NULL to indicate all"},{"name":"callback","type":"git_config_foreach_cb","comment":"the function to be called on each value of the variable"},{"name":"payload","type":"void *","comment":"opaque pointer to pass to the callback"}],"argline":"const git_config *cfg, const char *name, const char *regexp, git_config_foreach_cb callback, void *payload","sig":"const git_config *::const char *::const char *::git_config_foreach_cb::void *","return":{"type":"int","comment":null},"description":"<p>Get each value of a multivar.</p>\n","comments":"<p>The callback will be called on each variable found</p>\n","group":"config"},"git_config_set_int32":{"type":"function","file":"git2/config.h","line":352,"lineto":352,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"value","type":"int32_t","comment":"Integer value for the variable"}],"argline":"git_config *cfg, const char *name, int32_t value","sig":"git_config *::const char *::int32_t","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Set the value of an integer config variable in the config file\n with the highest level (usually the local one).</p>\n","comments":"","group":"config"},"git_config_set_int64":{"type":"function","file":"git2/config.h","line":363,"lineto":363,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"value","type":"int64_t","comment":"Long integer value for the variable"}],"argline":"git_config *cfg, const char *name, int64_t value","sig":"git_config *::const char *::int64_t","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Set the value of a long integer config variable in the config file\n with the highest level (usually the local one).</p>\n","comments":"","group":"config"},"git_config_set_bool":{"type":"function","file":"git2/config.h","line":374,"lineto":374,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"value","type":"int","comment":"the value to store"}],"argline":"git_config *cfg, const char *name, int value","sig":"git_config *::const char *::int","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Set the value of a boolean config variable in the config file\n with the highest level (usually the local one).</p>\n","comments":"","group":"config"},"git_config_set_string":{"type":"function","file":"git2/config.h","line":388,"lineto":388,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"value","type":"const char *","comment":"the string to store."}],"argline":"git_config *cfg, const char *name, const char *value","sig":"git_config *::const char *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Set the value of a string config variable in the config file\n with the highest level (usually the local one).</p>\n","comments":"<p>A copy of the string is made and the user is free to use it afterwards.</p>\n","group":"config"},"git_config_set_multivar":{"type":"function","file":"git2/config.h","line":398,"lineto":398,"args":[{"name":"cfg","type":"git_config *","comment":"where to look for the variable"},{"name":"name","type":"const char *","comment":"the variable's name"},{"name":"regexp","type":"const char *","comment":"a regular expression to indicate which values to replace"},{"name":"value","type":"const char *","comment":"the new value."}],"argline":"git_config *cfg, const char *name, const char *regexp, const char *value","sig":"git_config *::const char *::const char *::const char *","return":{"type":"int","comment":null},"description":"<p>Set a multivar in the local config file.</p>\n","comments":"","group":"config"},"git_config_delete_entry":{"type":"function","file":"git2/config.h","line":407,"lineto":407,"args":[{"name":"cfg","type":"git_config *","comment":"the configuration"},{"name":"name","type":"const char *","comment":"the variable to delete"}],"argline":"git_config *cfg, const char *name","sig":"git_config *::const char *","return":{"type":"int","comment":null},"description":"<p>Delete a config variable from the config file\n with the highest level (usually the local one).</p>\n","comments":"","group":"config"},"git_config_foreach":{"type":"function","file":"git2/config.h","line":422,"lineto":425,"args":[{"name":"cfg","type":"const git_config *","comment":"where to get the variables from"},{"name":"callback","type":"git_config_foreach_cb","comment":"the function to call on each variable"},{"name":"payload","type":"void *","comment":"the data to pass to the callback"}],"argline":"const git_config *cfg, git_config_foreach_cb callback, void *payload","sig":"const git_config *::git_config_foreach_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback, or error code"},"description":"<p>Perform an operation on each config variable.</p>\n","comments":"<p>The callback receives the normalized name and value of each variable in the config backend, and the data pointer passed to this function. As soon as one of the callback functions returns something other than 0, this function stops iterating and returns <code>GIT_EUSER</code>.</p>\n","group":"config"},"git_config_foreach_match":{"type":"function","file":"git2/config.h","line":440,"lineto":444,"args":[{"name":"cfg","type":"const git_config *","comment":"where to get the variables from"},{"name":"regexp","type":"const char *","comment":"regular expression to match against config names"},{"name":"callback","type":"git_config_foreach_cb","comment":"the function to call on each variable"},{"name":"payload","type":"void *","comment":"the data to pass to the callback"}],"argline":"const git_config *cfg, const char *regexp, git_config_foreach_cb callback, void *payload","sig":"const git_config *::const char *::git_config_foreach_cb::void *","return":{"type":"int","comment":" 0 or the return value of the callback which didn't return 0"},"description":"<p>Perform an operation on each config variable matching a regular expression.</p>\n","comments":"<p>This behaviors like <code>git_config_foreach</code> with an additional filter of a regular expression that filters which config keys are passed to the callback.</p>\n","group":"config"},"git_config_get_mapped":{"type":"function","file":"git2/config.h","line":480,"lineto":485,"args":[{"name":"out","type":"int *","comment":"place to store the result of the mapping"},{"name":"cfg","type":"const git_config *","comment":"config file to get the variables from"},{"name":"name","type":"const char *","comment":"name of the config variable to lookup"},{"name":"maps","type":"const git_cvar_map *","comment":"array of `git_cvar_map` objects specifying the possible mappings"},{"name":"map_n","type":"size_t","comment":"number of mapping objects in `maps`"}],"argline":"int *out, const git_config *cfg, const char *name, const git_cvar_map *maps, size_t map_n","sig":"int *::const git_config *::const char *::const git_cvar_map *::size_t","return":{"type":"int","comment":" 0 on success, error code otherwise"},"description":"<p>Query the value of a config variable and return it mapped to\n an integer constant.</p>\n","comments":"<p>This is a helper method to easily map different possible values to a variable to integer constants that easily identify them.</p>\n\n<p>A mapping array looks as follows:</p>\n\n<pre><code>git_cvar_map autocrlf_mapping[] = {     {GIT_CVAR_FALSE, NULL, GIT_AUTO_CRLF_FALSE},        {GIT_CVAR_TRUE, NULL, GIT_AUTO_CRLF_TRUE},      {GIT_CVAR_STRING, &quot;input&quot;, GIT_AUTO_CRLF_INPUT},        {GIT_CVAR_STRING, &quot;default&quot;, GIT_AUTO_CRLF_DEFAULT}};\n</code></pre>\n\n<p>On any &quot;false&quot; value for the variable (e.g. &quot;false&quot;, &quot;FALSE&quot;, &quot;no&quot;), the mapping will store <code>GIT_AUTO_CRLF_FALSE</code> in the <code>out</code> parameter.</p>\n\n<p>The same thing applies for any &quot;true&quot; value such as &quot;true&quot;, &quot;yes&quot; or &quot;1&quot;, storing the <code>GIT_AUTO_CRLF_TRUE</code> variable.</p>\n\n<p>Otherwise, if the value matches the string &quot;input&quot; (with case insensitive comparison), the given constant will be stored in <code>out</code>, and likewise for &quot;default&quot;.</p>\n\n<p>If not a single match can be made to store in <code>out</code>, an error code will be returned.</p>\n","group":"config"},"git_config_lookup_map_value":{"type":"function","file":"git2/config.h","line":495,"lineto":499,"args":[{"name":"out","type":"int *","comment":"place to store the result of the parsing"},{"name":"maps","type":"const git_cvar_map *","comment":"array of `git_cvar_map` objects specifying the possible mappings"},{"name":"map_n","type":"size_t","comment":"number of mapping objects in `maps`"},{"name":"value","type":"const char *","comment":"value to parse"}],"argline":"int *out, const git_cvar_map *maps, size_t map_n, const char *value","sig":"int *::const git_cvar_map *::size_t::const char *","return":{"type":"int","comment":null},"description":"<p>Maps a string value to an integer constant</p>\n","comments":"","group":"config"},"git_config_parse_bool":{"type":"function","file":"git2/config.h","line":511,"lineto":511,"args":[{"name":"out","type":"int *","comment":"place to store the result of the parsing"},{"name":"value","type":"const char *","comment":"value to parse"}],"argline":"int *out, const char *value","sig":"int *::const char *","return":{"type":"int","comment":null},"description":"<p>Parse a string value as a bool.</p>\n","comments":"<p>Valid values for true are: &#39;true&#39;, &#39;yes&#39;, &#39;on&#39;, 1 or any  number different from 0 Valid values for false are: &#39;false&#39;, &#39;no&#39;, &#39;off&#39;, 0</p>\n","group":"config"},"git_config_parse_int32":{"type":"function","file":"git2/config.h","line":523,"lineto":523,"args":[{"name":"out","type":"int32_t *","comment":"place to store the result of the parsing"},{"name":"value","type":"const char *","comment":"value to parse"}],"argline":"int32_t *out, const char *value","sig":"int32_t *::const char *","return":{"type":"int","comment":null},"description":"<p>Parse a string value as an int32.</p>\n","comments":"<p>An optional value suffix of &#39;k&#39;, &#39;m&#39;, or &#39;g&#39; will cause the value to be multiplied by 1024, 1048576, or 1073741824 prior to output.</p>\n","group":"config"},"git_config_parse_int64":{"type":"function","file":"git2/config.h","line":535,"lineto":535,"args":[{"name":"out","type":"int64_t *","comment":"place to store the result of the parsing"},{"name":"value","type":"const char *","comment":"value to parse"}],"argline":"int64_t *out, const char *value","sig":"int64_t *::const char *","return":{"type":"int","comment":null},"description":"<p>Parse a string value as an int64.</p>\n","comments":"<p>An optional value suffix of &#39;k&#39;, &#39;m&#39;, or &#39;g&#39; will cause the value to be multiplied by 1024, 1048576, or 1073741824 prior to output.</p>\n","group":"config"},"git_diff_list_free":{"type":"function","file":"git2/diff.h","line":530,"lineto":530,"args":[{"name":"diff","type":"git_diff_list *","comment":"The previously created diff list; cannot be used after free."}],"argline":"git_diff_list *diff","sig":"git_diff_list *","return":{"type":"void","comment":null},"description":"<p>Deallocate a diff list.</p>\n","comments":"","group":"diff"},"git_diff_tree_to_tree":{"type":"function","file":"git2/diff.h","line":548,"lineto":553,"args":[{"name":"diff","type":"git_diff_list **","comment":"Output pointer to a git_diff_list pointer to be allocated."},{"name":"repo","type":"git_repository *","comment":"The repository containing the trees."},{"name":"old_tree","type":"git_tree *","comment":"A git_tree object to diff from, or NULL for empty tree."},{"name":"new_tree","type":"git_tree *","comment":"A git_tree object to diff to, or NULL for empty tree."},{"name":"opts","type":"const git_diff_options *","comment":"Structure with options to influence diff or NULL for defaults."}],"argline":"git_diff_list **diff, git_repository *repo, git_tree *old_tree, git_tree *new_tree, const git_diff_options *opts","sig":"git_diff_list **::git_repository *::git_tree *::git_tree *::const git_diff_options *","return":{"type":"int","comment":null},"description":"<p>Create a diff list with the difference between two tree objects.</p>\n","comments":"<p>This is equivalent to <code>git diff &lt;old-tree&gt; &lt;new-tree&gt;</code></p>\n\n<p>The first tree will be used for the &quot;old_file&quot; side of the delta and the second tree will be used for the &quot;new_file&quot; side of the delta.  You can pass NULL to indicate an empty tree, although it is an error to pass NULL for both the <code>old_tree</code> and <code>new_tree</code>.</p>\n","group":"diff"},"git_diff_tree_to_index":{"type":"function","file":"git2/diff.h","line":570,"lineto":575,"args":[{"name":"diff","type":"git_diff_list **","comment":"Output pointer to a git_diff_list pointer to be allocated."},{"name":"repo","type":"git_repository *","comment":"The repository containing the tree and index."},{"name":"old_tree","type":"git_tree *","comment":"A git_tree object to diff from, or NULL for empty tree."},{"name":"index","type":"git_index *","comment":"The index to diff with; repo index used if NULL."},{"name":"opts","type":"const git_diff_options *","comment":"Structure with options to influence diff or NULL for defaults."}],"argline":"git_diff_list **diff, git_repository *repo, git_tree *old_tree, git_index *index, const git_diff_options *opts","sig":"git_diff_list **::git_repository *::git_tree *::git_index *::const git_diff_options *","return":{"type":"int","comment":null},"description":"<p>Create a diff list between a tree and repository index.</p>\n","comments":"<p>This is equivalent to <code>git diff --cached &lt;treeish&gt;</code> or if you pass the HEAD tree, then like <code>git diff --cached</code>.</p>\n\n<p>The tree you pass will be used for the &quot;old_file&quot; side of the delta, and the index will be used for the &quot;new_file&quot; side of the delta.</p>\n","group":"diff"},"git_diff_index_to_workdir":{"type":"function","file":"git2/diff.h","line":593,"lineto":597,"args":[{"name":"diff","type":"git_diff_list **","comment":"Output pointer to a git_diff_list pointer to be allocated."},{"name":"repo","type":"git_repository *","comment":"The repository."},{"name":"index","type":"git_index *","comment":"The index to diff from; repo index used if NULL."},{"name":"opts","type":"const git_diff_options *","comment":"Structure with options to influence diff or NULL for defaults."}],"argline":"git_diff_list **diff, git_repository *repo, git_index *index, const git_diff_options *opts","sig":"git_diff_list **::git_repository *::git_index *::const git_diff_options *","return":{"type":"int","comment":null},"description":"<p>Create a diff list between the repository index and the workdir directory.</p>\n","comments":"<p>This matches the <code>git diff</code> command.  See the note below on <code>git_diff_tree_to_workdir</code> for a discussion of the difference between <code>git diff</code> and <code>git diff HEAD</code> and how to emulate a <code>git diff &lt;treeish&gt;</code> using libgit2.</p>\n\n<p>The index will be used for the &quot;old_file&quot; side of the delta, and the working directory will be used for the &quot;new_file&quot; side of the delta.</p>\n","group":"diff"},"git_diff_tree_to_workdir":{"type":"function","file":"git2/diff.h","line":628,"lineto":632,"args":[{"name":"diff","type":"git_diff_list **","comment":"A pointer to a git_diff_list pointer that will be allocated."},{"name":"repo","type":"git_repository *","comment":"The repository containing the tree."},{"name":"old_tree","type":"git_tree *","comment":"A git_tree object to diff from, or NULL for empty tree."},{"name":"opts","type":"const git_diff_options *","comment":"Structure with options to influence diff or NULL for defaults."}],"argline":"git_diff_list **diff, git_repository *repo, git_tree *old_tree, const git_diff_options *opts","sig":"git_diff_list **::git_repository *::git_tree *::const git_diff_options *","return":{"type":"int","comment":null},"description":"<p>Create a diff list between a tree and the working directory.</p>\n","comments":"<p>The tree you provide will be used for the &quot;old_file&quot; side of the delta, and the working directory will be used for the &quot;new_file&quot; side.</p>\n\n<p>Please note: this is <em>NOT</em> the same as <code>git diff &lt;treeish&gt;</code>.  Running <code>git diff HEAD</code> or the like actually uses information from the index, along with the tree and working directory info.</p>\n\n<p>This function returns strictly the differences between the tree and the files contained in the working directory, regardless of the state of files in the index.  It may come as a surprise, but there is no direct equivalent in core git.</p>\n\n<p>To emulate <code>git diff &lt;treeish&gt;</code>, call both <code>git_diff_tree_to_index</code> and <code>git_diff_index_to_workdir</code>, then call <code>git_diff_merge</code> on the results. That will yield a <code>git_diff_list</code> that matches the git output.</p>\n\n<p>If this seems confusing, take the case of a file with a staged deletion where the file has then been put back into the working dir and modified. The tree-to-workdir diff for that file is &#39;modified&#39;, but core git would show status &#39;deleted&#39; since there is a pending deletion in the index.</p>\n","group":"diff"},"git_diff_merge":{"type":"function","file":"git2/diff.h","line":647,"lineto":649,"args":[{"name":"onto","type":"git_diff_list *","comment":"Diff to merge into."},{"name":"from","type":"const git_diff_list *","comment":"Diff to merge."}],"argline":"git_diff_list *onto, const git_diff_list *from","sig":"git_diff_list *::const git_diff_list *","return":{"type":"int","comment":null},"description":"<p>Merge one diff list into another.</p>\n","comments":"<p>This merges items from the &quot;from&quot; list into the &quot;onto&quot; list.  The resulting diff list will have all items that appear in either list. If an item appears in both lists, then it will be &quot;merged&quot; to appear as if the old version was from the &quot;onto&quot; list and the new version is from the &quot;from&quot; list (with the exception that if the item has a pending DELETE in the middle, then it will show as deleted).</p>\n","group":"diff"},"git_diff_find_similar":{"type":"function","file":"git2/diff.h","line":663,"lineto":665,"args":[{"name":"diff","type":"git_diff_list *","comment":"Diff list to run detection algorithms on"},{"name":"options","type":"git_diff_find_options *","comment":"Control how detection should be run, NULL for defaults"}],"argline":"git_diff_list *diff, git_diff_find_options *options","sig":"git_diff_list *::git_diff_find_options *","return":{"type":"int","comment":" 0 on success, -1 on failure"},"description":"<p>Transform a diff list marking file renames, copies, etc.</p>\n","comments":"<p>This modifies a diff list in place, replacing old entries that look like renames or copies with new entries reflecting those changes. This also will, if requested, break modified files into add/remove pairs if the amount of change is above a threshold.</p>\n","group":"diff"},"git_diff_foreach":{"type":"function","file":"git2/diff.h","line":702,"lineto":707,"args":[{"name":"diff","type":"git_diff_list *","comment":"A git_diff_list generated by one of the above functions."},{"name":"file_cb","type":"git_diff_file_cb","comment":"Callback function to make per file in the diff."},{"name":"hunk_cb","type":"git_diff_hunk_cb","comment":"Optional callback to make per hunk of text diff.  This\n                callback is called to describe a range of lines in the\n                diff.  It will not be issued for binary files."},{"name":"line_cb","type":"git_diff_data_cb","comment":"Optional callback to make per line of diff text.  This\n                same callback will be made for context lines, added, and\n                removed lines, and even for a deleted trailing newline."},{"name":"payload","type":"void *","comment":"Reference pointer that will be passed to your callbacks."}],"argline":"git_diff_list *diff, git_diff_file_cb file_cb, git_diff_hunk_cb hunk_cb, git_diff_data_cb line_cb, void *payload","sig":"git_diff_list *::git_diff_file_cb::git_diff_hunk_cb::git_diff_data_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback, or error code"},"description":"<p>Loop over all deltas in a diff list issuing callbacks.</p>\n","comments":"<p>This will iterate through all of the files described in a diff.  You should provide a file callback to learn about each file.</p>\n\n<p>The &quot;hunk&quot; and &quot;line&quot; callbacks are optional, and the text diff of the files will only be calculated if they are not NULL.  Of course, these callbacks will not be invoked for binary files on the diff list or for files whose only changed is a file mode change.</p>\n\n<p>Returning a non-zero value from any of the callbacks will terminate the iteration and cause this return <code>GIT_EUSER</code>.</p>\n","group":"diff"},"git_diff_print_compact":{"type":"function","file":"git2/diff.h","line":720,"lineto":723,"args":[{"name":"diff","type":"git_diff_list *","comment":"A git_diff_list generated by one of the above functions."},{"name":"print_cb","type":"git_diff_data_cb","comment":"Callback to make per line of diff text."},{"name":"payload","type":"void *","comment":"Reference pointer that will be passed to your callback."}],"argline":"git_diff_list *diff, git_diff_data_cb print_cb, void *payload","sig":"git_diff_list *::git_diff_data_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback, or error code"},"description":"<p>Iterate over a diff generating text output like &quot;git diff --name-status&quot;.</p>\n","comments":"<p>Returning a non-zero value from the callbacks will terminate the iteration and cause this return <code>GIT_EUSER</code>.</p>\n","group":"diff"},"git_diff_print_raw":{"type":"function","file":"git2/diff.h","line":736,"lineto":739,"args":[{"name":"diff","type":"git_diff_list *","comment":"A git_diff_list generated by one of the above functions."},{"name":"print_cb","type":"git_diff_data_cb","comment":"Callback to make per line of diff text."},{"name":"payload","type":"void *","comment":"Reference pointer that will be passed to your callback."}],"argline":"git_diff_list *diff, git_diff_data_cb print_cb, void *payload","sig":"git_diff_list *::git_diff_data_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback, or error code"},"description":"<p>Iterate over a diff generating text output like &quot;git diff --raw&quot;.</p>\n","comments":"<p>Returning a non-zero value from the callbacks will terminate the iteration and cause this return <code>GIT_EUSER</code>.</p>\n","group":"diff"},"git_diff_status_char":{"type":"function","file":"git2/diff.h","line":753,"lineto":753,"args":[{"name":"status","type":"git_delta_t","comment":"The git_delta_t value to look up"}],"argline":"git_delta_t status","sig":"git_delta_t","return":{"type":"char","comment":" The single character label for that code"},"description":"<p>Look up the single character abbreviation for a delta status code.</p>\n","comments":"<p>When you call <code>git_diff_print_compact</code> it prints single letter codes into the output such as &#39;A&#39; for added, &#39;D&#39; for deleted, &#39;M&#39; for modified, etc. It is sometimes convenient to convert a git_delta_t value into these letters for your own purposes.  This function does just that.  By the way, unmodified will return a space (i.e. &#39; &#39;).</p>\n","group":"diff"},"git_diff_print_patch":{"type":"function","file":"git2/diff.h","line":772,"lineto":775,"args":[{"name":"diff","type":"git_diff_list *","comment":"A git_diff_list generated by one of the above functions."},{"name":"print_cb","type":"git_diff_data_cb","comment":"Callback function to output lines of the diff.  This\n                 same function will be called for file headers, hunk\n                 headers, and diff lines.  Fortunately, you can probably\n                 use various GIT_DIFF_LINE constants to determine what\n                 text you are given."},{"name":"payload","type":"void *","comment":"Reference pointer that will be passed to your callbacks."}],"argline":"git_diff_list *diff, git_diff_data_cb print_cb, void *payload","sig":"git_diff_list *::git_diff_data_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback, or error code"},"description":"<p>Iterate over a diff generating text output like &quot;git diff&quot;.</p>\n","comments":"<p>This is a super easy way to generate a patch from a diff.</p>\n\n<p>Returning a non-zero value from the callbacks will terminate the iteration and cause this return <code>GIT_EUSER</code>.</p>\n","group":"diff"},"git_diff_num_deltas":{"type":"function","file":"git2/diff.h","line":783,"lineto":783,"args":[{"name":"diff","type":"git_diff_list *","comment":"A git_diff_list generated by one of the above functions"}],"argline":"git_diff_list *diff","sig":"git_diff_list *","return":{"type":"size_t","comment":" Count of number of deltas in the list"},"description":"<p>Query how many diff records are there in a diff list.</p>\n","comments":"","group":"diff"},"git_diff_num_deltas_of_type":{"type":"function","file":"git2/diff.h","line":796,"lineto":798,"args":[{"name":"diff","type":"git_diff_list *","comment":"A git_diff_list generated by one of the above functions"},{"name":"type","type":"git_delta_t","comment":"A git_delta_t value to filter the count"}],"argline":"git_diff_list *diff, git_delta_t type","sig":"git_diff_list *::git_delta_t","return":{"type":"size_t","comment":" Count of number of deltas matching delta_t type"},"description":"<p>Query how many diff deltas are there in a diff list filtered by type.</p>\n","comments":"<p>This works just like <code>git_diff_entrycount()</code> with an extra parameter that is a <code>git_delta_t</code> and returns just the count of how many deltas match that particular type.</p>\n","group":"diff"},"git_diff_get_patch":{"type":"function","file":"git2/diff.h","line":825,"lineto":829,"args":[{"name":"patch_out","type":"git_diff_patch **","comment":"Output parameter for the delta patch object"},{"name":"delta_out","type":"const git_diff_delta **","comment":"Output parameter for the delta object"},{"name":"diff","type":"git_diff_list *","comment":"Diff list object"},{"name":"idx","type":"size_t","comment":"Index into diff list"}],"argline":"git_diff_patch **patch_out, const git_diff_delta **delta_out, git_diff_list *diff, size_t idx","sig":"git_diff_patch **::const git_diff_delta **::git_diff_list *::size_t","return":{"type":"int","comment":" 0 on success, other value \n<\n 0 on error"},"description":"<p>Return the diff delta and patch for an entry in the diff list.</p>\n","comments":"<p>The <code>git_diff_patch</code> is a newly created object contains the text diffs for the delta.  You have to call <code>git_diff_patch_free()</code> when you are done with it.  You can use the patch object to loop over all the hunks and lines in the diff of the one delta.</p>\n\n<p>For an unchanged file or a binary file, no <code>git_diff_patch</code> will be created, the output will be set to NULL, and the <code>binary</code> flag will be set true in the <code>git_diff_delta</code> structure.</p>\n\n<p>The <code>git_diff_delta</code> pointer points to internal data and you do not have to release it when you are done with it.  It will go away when the <code>git_diff_list</code> and <code>git_diff_patch</code> go away.</p>\n\n<p>It is okay to pass NULL for either of the output parameters; if you pass NULL for the <code>git_diff_patch</code>, then the text diff will not be calculated.</p>\n","group":"diff"},"git_diff_patch_free":{"type":"function","file":"git2/diff.h","line":834,"lineto":835,"args":[{"name":"patch","type":"git_diff_patch *","comment":null}],"argline":"git_diff_patch *patch","sig":"git_diff_patch *","return":{"type":"void","comment":null},"description":"<p>Free a git_diff_patch object.</p>\n","comments":"","group":"diff"},"git_diff_patch_delta":{"type":"function","file":"git2/diff.h","line":840,"lineto":841,"args":[{"name":"patch","type":"git_diff_patch *","comment":null}],"argline":"git_diff_patch *patch","sig":"git_diff_patch *","return":{"type":"const git_diff_delta *","comment":null},"description":"<p>Get the delta associated with a patch</p>\n","comments":"","group":"diff"},"git_diff_patch_num_hunks":{"type":"function","file":"git2/diff.h","line":846,"lineto":847,"args":[{"name":"patch","type":"git_diff_patch *","comment":null}],"argline":"git_diff_patch *patch","sig":"git_diff_patch *","return":{"type":"size_t","comment":null},"description":"<p>Get the number of hunks in a patch</p>\n","comments":"","group":"diff"},"git_diff_patch_line_stats":{"type":"function","file":"git2/diff.h","line":865,"lineto":869,"args":[{"name":"total_context","type":"size_t *","comment":"Count of context lines in output, can be NULL."},{"name":"total_additions","type":"size_t *","comment":"Count of addition lines in output, can be NULL."},{"name":"total_deletions","type":"size_t *","comment":"Count of deletion lines in output, can be NULL."},{"name":"patch","type":"const git_diff_patch *","comment":"The git_diff_patch object"}],"argline":"size_t *total_context, size_t *total_additions, size_t *total_deletions, const git_diff_patch *patch","sig":"size_t *::size_t *::size_t *::const git_diff_patch *","return":{"type":"int","comment":" 0 on success, \n<\n0 on error"},"description":"<p>Get line counts of each type in a patch.</p>\n","comments":"<p>This helps imitate a diff --numstat type of output.  For that purpose, you only need the <code>total_additions</code> and <code>total_deletions</code> values, but we include the <code>total_context</code> line count in case you want the total number of lines of diff output that will be generated.</p>\n\n<p>All outputs are optional. Pass NULL if you don&#39;t need a particular count.</p>\n","group":"diff"},"git_diff_patch_get_hunk":{"type":"function","file":"git2/diff.h","line":887,"lineto":893,"args":[{"name":"range","type":"const git_diff_range **","comment":"Output pointer to git_diff_range of hunk"},{"name":"header","type":"const char **","comment":"Output pointer to header string for hunk.  Unlike the\n               content pointer for each line, this will be NUL-terminated"},{"name":"header_len","type":"size_t *","comment":"Output value of characters in header string"},{"name":"lines_in_hunk","type":"size_t *","comment":"Output count of total lines in this hunk"},{"name":"patch","type":"git_diff_patch *","comment":"Input pointer to patch object"},{"name":"hunk_idx","type":"size_t","comment":"Input index of hunk to get information about"}],"argline":"const git_diff_range **range, const char **header, size_t *header_len, size_t *lines_in_hunk, git_diff_patch *patch, size_t hunk_idx","sig":"const git_diff_range **::const char **::size_t *::size_t *::git_diff_patch *::size_t","return":{"type":"int","comment":" 0 on success, GIT_ENOTFOUND if hunk_idx out of range, \n<\n0 on error"},"description":"<p>Get the information about a hunk in a patch</p>\n","comments":"<p>Given a patch and a hunk index into the patch, this returns detailed information about that hunk.  Any of the output pointers can be passed as NULL if you don&#39;t care about that particular piece of information.</p>\n","group":"diff"},"git_diff_patch_num_lines_in_hunk":{"type":"function","file":"git2/diff.h","line":902,"lineto":904,"args":[{"name":"patch","type":"git_diff_patch *","comment":"The git_diff_patch object"},{"name":"hunk_idx","type":"size_t","comment":"Index of the hunk"}],"argline":"git_diff_patch *patch, size_t hunk_idx","sig":"git_diff_patch *::size_t","return":{"type":"int","comment":" Number of lines in hunk or -1 if invalid hunk index"},"description":"<p>Get the number of lines in a hunk.</p>\n","comments":"","group":"diff"},"git_diff_patch_get_line_in_hunk":{"type":"function","file":"git2/diff.h","line":924,"lineto":932,"args":[{"name":"line_origin","type":"char *","comment":"A GIT_DIFF_LINE constant from above"},{"name":"content","type":"const char **","comment":"Pointer to content of diff line, not NUL-terminated"},{"name":"content_len","type":"size_t *","comment":"Number of characters in content"},{"name":"old_lineno","type":"int *","comment":"Line number in old file or -1 if line is added"},{"name":"new_lineno","type":"int *","comment":"Line number in new file or -1 if line is deleted"},{"name":"patch","type":"git_diff_patch *","comment":"The patch to look in"},{"name":"hunk_idx","type":"size_t","comment":"The index of the hunk"},{"name":"line_of_hunk","type":"size_t","comment":"The index of the line in the hunk"}],"argline":"char *line_origin, const char **content, size_t *content_len, int *old_lineno, int *new_lineno, git_diff_patch *patch, size_t hunk_idx, size_t line_of_hunk","sig":"char *::const char **::size_t *::int *::int *::git_diff_patch *::size_t::size_t","return":{"type":"int","comment":" 0 on success, \n<\n0 on failure"},"description":"<p>Get data about a line in a hunk of a patch.</p>\n","comments":"<p>Given a patch, a hunk index, and a line index in the hunk, this will return a lot of details about that line.  If you pass a hunk index larger than the number of hunks or a line index larger than the number of lines in the hunk, this will return -1.</p>\n","group":"diff"},"git_diff_patch_print":{"type":"function","file":"git2/diff.h","line":946,"lineto":949,"args":[{"name":"patch","type":"git_diff_patch *","comment":"A git_diff_patch representing changes to one file"},{"name":"print_cb","type":"git_diff_data_cb","comment":"Callback function to output lines of the patch.  Will be\n                 called for file headers, hunk headers, and diff lines."},{"name":"payload","type":"void *","comment":"Reference pointer that will be passed to your callbacks."}],"argline":"git_diff_patch *patch, git_diff_data_cb print_cb, void *payload","sig":"git_diff_patch *::git_diff_data_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback, or error code"},"description":"<p>Serialize the patch to text via callback.</p>\n","comments":"<p>Returning a non-zero value from the callback will terminate the iteration and cause this return <code>GIT_EUSER</code>.</p>\n","group":"diff"},"git_diff_patch_to_str":{"type":"function","file":"git2/diff.h","line":958,"lineto":960,"args":[{"name":"string","type":"char **","comment":"Allocated string; caller must free."},{"name":"patch","type":"git_diff_patch *","comment":"A git_diff_patch representing changes to one file"}],"argline":"char **string, git_diff_patch *patch","sig":"char **::git_diff_patch *","return":{"type":"int","comment":" 0 on success, \n<\n0 on failure."},"description":"<p>Get the content of a patch as a single diff text.</p>\n","comments":"","group":"diff"},"git_diff_blobs":{"type":"function","file":"git2/diff.h","line":996,"lineto":1005,"args":[{"name":"old_blob","type":"const git_blob *","comment":"Blob for old side of diff, or NULL for empty blob"},{"name":"old_as_path","type":"const char *","comment":"Treat old blob as if it had this filename; can be NULL"},{"name":"new_blob","type":"const git_blob *","comment":"Blob for new side of diff, or NULL for empty blob"},{"name":"new_as_path","type":"const char *","comment":"Treat new blob as if it had this filename; can be NULL"},{"name":"options","type":"const git_diff_options *","comment":"Options for diff, or NULL for default options"},{"name":"file_cb","type":"git_diff_file_cb","comment":"Callback for \"file\"; made once if there is a diff; can be NULL"},{"name":"hunk_cb","type":"git_diff_hunk_cb","comment":"Callback for each hunk in diff; can be NULL"},{"name":"line_cb","type":"git_diff_data_cb","comment":"Callback for each line in diff; can be NULL"},{"name":"payload","type":"void *","comment":"Payload passed to each callback function"}],"argline":"const git_blob *old_blob, const char *old_as_path, const git_blob *new_blob, const char *new_as_path, const git_diff_options *options, git_diff_file_cb file_cb, git_diff_hunk_cb hunk_cb, git_diff_data_cb line_cb, void *payload","sig":"const git_blob *::const char *::const git_blob *::const char *::const git_diff_options *::git_diff_file_cb::git_diff_hunk_cb::git_diff_data_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback return, or error code"},"description":"<p>Directly run a diff on two blobs.</p>\n","comments":"<p>Compared to a file, a blob lacks some contextual information. As such, the <code>git_diff_file</code> given to the callback will have some fake data; i.e. <code>mode</code> will be 0 and <code>path</code> will be NULL.</p>\n\n<p>NULL is allowed for either <code>old_blob</code> or <code>new_blob</code> and will be treated as an empty blob, with the <code>oid</code> set to NULL in the <code>git_diff_file</code> data. Passing NULL for both blobs is a noop; no callbacks will be made at all.</p>\n\n<p>We do run a binary content check on the blob content and if either blob looks like binary data, the <code>git_diff_delta</code> binary attribute will be set to 1 and no call to the hunk_cb nor line_cb will be made (unless you pass <code>GIT_DIFF_FORCE_TEXT</code> of course).</p>\n","group":"diff"},"git_diff_patch_from_blobs":{"type":"function","file":"git2/diff.h","line":1023,"lineto":1029,"args":[{"name":"out","type":"git_diff_patch **","comment":"The generated patch; NULL on error"},{"name":"old_blob","type":"const git_blob *","comment":"Blob for old side of diff, or NULL for empty blob"},{"name":"old_as_path","type":"const char *","comment":"Treat old blob as if it had this filename; can be NULL"},{"name":"new_blob","type":"const git_blob *","comment":"Blob for new side of diff, or NULL for empty blob"},{"name":"new_as_path","type":"const char *","comment":"Treat new blob as if it had this filename; can be NULL"},{"name":"opts","type":"const git_diff_options *","comment":"Options for diff, or NULL for default options"}],"argline":"git_diff_patch **out, const git_blob *old_blob, const char *old_as_path, const git_blob *new_blob, const char *new_as_path, const git_diff_options *opts","sig":"git_diff_patch **::const git_blob *::const char *::const git_blob *::const char *::const git_diff_options *","return":{"type":"int","comment":" 0 on success or error code \n<\n 0"},"description":"<p>Directly generate a patch from the difference between two blobs.</p>\n","comments":"<p>This is just like <code>git_diff_blobs()</code> except it generates a patch object for the difference instead of directly making callbacks.  You can use the standard <code>git_diff_patch</code> accessor functions to read the patch data, and you must call <code>git_diff_patch_free()</code> on the patch when done.</p>\n","group":"diff"},"git_diff_blob_to_buffer":{"type":"function","file":"git2/diff.h","line":1055,"lineto":1065,"args":[{"name":"old_blob","type":"const git_blob *","comment":"Blob for old side of diff, or NULL for empty blob"},{"name":"old_as_path","type":"const char *","comment":"Treat old blob as if it had this filename; can be NULL"},{"name":"buffer","type":"const char *","comment":"Raw data for new side of diff, or NULL for empty"},{"name":"buffer_len","type":"size_t","comment":"Length of raw data for new side of diff"},{"name":"buffer_as_path","type":"const char *","comment":"Treat buffer as if it had this filename; can be NULL"},{"name":"options","type":"const git_diff_options *","comment":"Options for diff, or NULL for default options"},{"name":"file_cb","type":"git_diff_file_cb","comment":"Callback for \"file\"; made once if there is a diff; can be NULL"},{"name":"hunk_cb","type":"git_diff_hunk_cb","comment":"Callback for each hunk in diff; can be NULL"},{"name":"data_cb","type":"git_diff_data_cb","comment":"Callback for each line in diff; can be NULL"},{"name":"payload","type":"void *","comment":"Payload passed to each callback function"}],"argline":"const git_blob *old_blob, const char *old_as_path, const char *buffer, size_t buffer_len, const char *buffer_as_path, const git_diff_options *options, git_diff_file_cb file_cb, git_diff_hunk_cb hunk_cb, git_diff_data_cb data_cb, void *payload","sig":"const git_blob *::const char *::const char *::size_t::const char *::const git_diff_options *::git_diff_file_cb::git_diff_hunk_cb::git_diff_data_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback return, or error code"},"description":"<p>Directly run a diff between a blob and a buffer.</p>\n","comments":"<p>As with <code>git_diff_blobs</code>, comparing a blob and buffer lacks some context, so the <code>git_diff_file</code> parameters to the callbacks will be faked a la the rules for <code>git_diff_blobs()</code>.</p>\n\n<p>Passing NULL for <code>old_blob</code> will be treated as an empty blob (i.e. the <code>file_cb</code> will be invoked with GIT_DELTA_ADDED and the diff will be the entire content of the buffer added).  Passing NULL to the buffer will do the reverse, with GIT_DELTA_REMOVED and blob content removed.</p>\n","group":"diff"},"git_diff_patch_from_blob_and_buffer":{"type":"function","file":"git2/diff.h","line":1084,"lineto":1091,"args":[{"name":"out","type":"git_diff_patch **","comment":"The generated patch; NULL on error"},{"name":"old_blob","type":"const git_blob *","comment":"Blob for old side of diff, or NULL for empty blob"},{"name":"old_as_path","type":"const char *","comment":"Treat old blob as if it had this filename; can be NULL"},{"name":"buffer","type":"const char *","comment":"Raw data for new side of diff, or NULL for empty"},{"name":"buffer_len","type":"size_t","comment":"Length of raw data for new side of diff"},{"name":"buffer_as_path","type":"const char *","comment":"Treat buffer as if it had this filename; can be NULL"},{"name":"opts","type":"const git_diff_options *","comment":"Options for diff, or NULL for default options"}],"argline":"git_diff_patch **out, const git_blob *old_blob, const char *old_as_path, const char *buffer, size_t buffer_len, const char *buffer_as_path, const git_diff_options *opts","sig":"git_diff_patch **::const git_blob *::const char *::const char *::size_t::const char *::const git_diff_options *","return":{"type":"int","comment":" 0 on success or error code \n<\n 0"},"description":"<p>Directly generate a patch from the difference between a blob and a buffer.</p>\n","comments":"<p>This is just like <code>git_diff_blob_to_buffer()</code> except it generates a patch object for the difference instead of directly making callbacks.  You can use the standard <code>git_diff_patch</code> accessor functions to read the patch data, and you must call <code>git_diff_patch_free()</code> on the patch when done.</p>\n","group":"diff"},"giterr_last":{"type":"function","file":"git2/errors.h","line":77,"lineto":77,"args":[],"argline":"","sig":"","return":{"type":"const git_error *","comment":" A git_error object."},"description":"<p>Return the last <code>git_error</code> object that was generated for the\n current thread or NULL if no error has occurred.</p>\n","comments":"","group":"giterr","examples":{"general.c":["ex/v0.19.0/general.html#giterr_last-27"],"network/clone.c":["ex/v0.19.0/network/clone.html#giterr_last-2"],"network/git2.c":["ex/v0.19.0/network/git2.html#giterr_last-1","ex/v0.19.0/network/git2.html#giterr_last-2"]}},"giterr_clear":{"type":"function","file":"git2/errors.h","line":82,"lineto":82,"args":[],"argline":"","sig":"","return":{"type":"void","comment":null},"description":"<p>Clear the last library error that occurred for this thread.</p>\n","comments":"","group":"giterr"},"giterr_set_str":{"type":"function","file":"git2/errors.h","line":105,"lineto":105,"args":[{"name":"error_class","type":"int","comment":"One of the `git_error_t` enum above describing the\n                    general subsystem that is responsible for the error."},{"name":"string","type":"const char *","comment":"The formatted error message to keep"}],"argline":"int error_class, const char *string","sig":"int::const char *","return":{"type":"void","comment":null},"description":"<p>Set the error message string for this thread.</p>\n","comments":"<p>This function is public so that custom ODB backends and the like can relay an error message through libgit2.  Most regular users of libgit2 will never need to call this function -- actually, calling it in most circumstances (for example, calling from within a callback function) will just end up having the value overwritten by libgit2 internals.</p>\n\n<p>This error message is stored in thread-local storage and only applies to the particular thread that this libgit2 call is made from.</p>\n\n<p>NOTE: Passing the <code>error_class</code> as GITERR_OS has a special behavior: we attempt to append the system default error message for the last OS error that occurred and then clear the last error.  The specific implementation of looking up and clearing this last OS error will vary by platform.</p>\n","group":"giterr"},"giterr_set_oom":{"type":"function","file":"git2/errors.h","line":116,"lineto":116,"args":[],"argline":"","sig":"","return":{"type":"void","comment":null},"description":"<p>Set the error message to a special value for memory allocation failure.</p>\n","comments":"<p>The normal <code>giterr_set_str()</code> function attempts to <code>strdup()</code> the string that is passed in.  This is not a good idea when the error in question is a memory allocation failure.  That circumstance has a special setter function that sets the error string to a known and statically allocated internal value.</p>\n","group":"giterr"},"git_graph_ahead_behind":{"type":"function","file":"git2/graph.h","line":37,"lineto":37,"args":[{"name":"ahead","type":"size_t *","comment":"number of unique from commits in `upstream`"},{"name":"behind","type":"size_t *","comment":"number of unique from commits in `local`"},{"name":"repo","type":"git_repository *","comment":"the repository where the commits exist"},{"name":"local","type":"const git_oid *","comment":"the commit for local"},{"name":"upstream","type":"const git_oid *","comment":"the commit for upstream"}],"argline":"size_t *ahead, size_t *behind, git_repository *repo, const git_oid *local, const git_oid *upstream","sig":"size_t *::size_t *::git_repository *::const git_oid *::const git_oid *","return":{"type":"int","comment":null},"description":"<p>Count the number of unique commits between two commit objects</p>\n","comments":"<p>There is no need for branches containing the commits to have any upstream relationship, but it helps to think of one as a branch and the other as its upstream, the <code>ahead</code> and <code>behind</code> values will be what git would report for the branches.</p>\n","group":"graph"},"git_ignore_add_rule":{"type":"function","file":"git2/ignore.h","line":37,"lineto":39,"args":[{"name":"repo","type":"git_repository *","comment":"The repository to add ignore rules to."},{"name":"rules","type":"const char *","comment":"Text of rules, a la the contents of a .gitignore file.\n              It is okay to have multiple rules in the text; if so,\n              each rule should be terminated with a newline."}],"argline":"git_repository *repo, const char *rules","sig":"git_repository *::const char *","return":{"type":"int","comment":" 0 on success"},"description":"<p>Add ignore rules for a repository.</p>\n","comments":"<p>Excludesfile rules (i.e. .gitignore rules) are generally read from .gitignore files in the repository tree or from a shared system file only if a &quot;core.excludesfile&quot; config value is set.  The library also keeps a set of per-repository internal ignores that can be configured in-memory and will not persist.  This function allows you to add to that internal rules list.</p>\n\n<p>Example usage:</p>\n\n<pre><code> error = git_ignore_add_rule(myrepo, &quot;*.c/ with space&quot;);\n</code></pre>\n\n<p>This would add three rules to the ignores.</p>\n","group":"ignore"},"git_ignore_clear_internal_rules":{"type":"function","file":"git2/ignore.h","line":52,"lineto":53,"args":[{"name":"repo","type":"git_repository *","comment":"The repository to remove ignore rules from."}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":" 0 on success"},"description":"<p>Clear ignore rules that were explicitly added.</p>\n","comments":"<p>Resets to the default internal ignore rules.  This will not turn off rules in .gitignore files that actually exist in the filesystem.</p>\n\n<p>The default internal ignores ignore &quot;.&quot;, &quot;..&quot; and &quot;.git&quot; entries.</p>\n","group":"ignore"},"git_ignore_path_is_ignored":{"type":"function","file":"git2/ignore.h","line":71,"lineto":74,"args":[{"name":"ignored","type":"int *","comment":"boolean returning 0 if the file is not ignored, 1 if it is"},{"name":"repo","type":"git_repository *","comment":"a repository object"},{"name":"path","type":"const char *","comment":"the file to check ignores for, relative to the repo's workdir."}],"argline":"int *ignored, git_repository *repo, const char *path","sig":"int *::git_repository *::const char *","return":{"type":"int","comment":" 0 if ignore rules could be processed for the file (regardless\n         of whether it exists or not), or an error \n<\n 0 if they could not."},"description":"<p>Test if the ignore rules apply to a given path.</p>\n","comments":"<p>This function checks the ignore rules to see if they would apply to the given file.  This indicates if the file would be ignored regardless of whether the file is already in the index or committed to the repository.</p>\n\n<p>One way to think of this is if you were to do &quot;git add .&quot; on the directory containing the file, would it be added or not?</p>\n","group":"ignore"},"git_index_open":{"type":"function","file":"git2/index.h","line":165,"lineto":165,"args":[{"name":"out","type":"git_index **","comment":"the pointer for the new index"},{"name":"index_path","type":"const char *","comment":"the path to the index file in disk"}],"argline":"git_index **out, const char *index_path","sig":"git_index **::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create a new bare Git index object as a memory representation\n of the Git index file in &#39;index_path&#39;, without a repository\n to back it.</p>\n","comments":"<p>Since there is no ODB or working directory behind this index, any Index methods which rely on these (e.g. index_add) will fail with the GIT_EBAREINDEX error code.</p>\n\n<p>If you need to access the index of an actual repository, use the <code>git_repository_index</code> wrapper.</p>\n\n<p>The index must be freed once it&#39;s no longer in use.</p>\n","group":"index"},"git_index_new":{"type":"function","file":"git2/index.h","line":178,"lineto":178,"args":[{"name":"out","type":"git_index **","comment":"the pointer for the new index"}],"argline":"git_index **out","sig":"git_index **","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create an in-memory index object.</p>\n","comments":"<p>This index object cannot be read/written to the filesystem, but may be used to perform in-memory index operations.</p>\n\n<p>The index must be freed once it&#39;s no longer in use.</p>\n","group":"index"},"git_index_free":{"type":"function","file":"git2/index.h","line":185,"lineto":185,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"void","comment":null},"description":"<p>Free an existing index object.</p>\n","comments":"","group":"index","examples":{"general.c":["ex/v0.19.0/general.html#git_index_free-28"]}},"git_index_owner":{"type":"function","file":"git2/index.h","line":193,"lineto":193,"args":[{"name":"index","type":"const git_index *","comment":"The index"}],"argline":"const git_index *index","sig":"const git_index *","return":{"type":"git_repository *","comment":" A pointer to the repository"},"description":"<p>Get the repository this index relates to</p>\n","comments":"","group":"index"},"git_index_caps":{"type":"function","file":"git2/index.h","line":201,"lineto":201,"args":[{"name":"index","type":"const git_index *","comment":"An existing index object"}],"argline":"const git_index *index","sig":"const git_index *","return":{"type":"unsigned int","comment":" A combination of GIT_INDEXCAP values"},"description":"<p>Read index capabilities flags.</p>\n","comments":"","group":"index"},"git_index_set_caps":{"type":"function","file":"git2/index.h","line":214,"lineto":214,"args":[{"name":"index","type":"git_index *","comment":"An existing index object"},{"name":"caps","type":"unsigned int","comment":"A combination of GIT_INDEXCAP values"}],"argline":"git_index *index, unsigned int caps","sig":"git_index *::unsigned int","return":{"type":"int","comment":" 0 on success, -1 on failure"},"description":"<p>Set index capabilities flags.</p>\n","comments":"<p>If you pass <code>GIT_INDEXCAP_FROM_OWNER</code> for the caps, then the capabilities will be read from the config of the owner object, looking at <code>core.ignorecase</code>, <code>core.filemode</code>, <code>core.symlinks</code>.</p>\n","group":"index"},"git_index_read":{"type":"function","file":"git2/index.h","line":223,"lineto":223,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Update the contents of an existing index object in memory\n by reading from the hard disk.</p>\n","comments":"","group":"index"},"git_index_write":{"type":"function","file":"git2/index.h","line":232,"lineto":232,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Write an existing index object from memory back to disk\n using an atomic file lock.</p>\n","comments":"","group":"index"},"git_index_read_tree":{"type":"function","file":"git2/index.h","line":243,"lineto":243,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"tree","type":"const git_tree *","comment":"tree to read"}],"argline":"git_index *index, const git_tree *tree","sig":"git_index *::const git_tree *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Read a tree into the index file with stats</p>\n","comments":"<p>The current index contents will be replaced by the specified tree.</p>\n","group":"index"},"git_index_write_tree":{"type":"function","file":"git2/index.h","line":264,"lineto":264,"args":[{"name":"out","type":"git_oid *","comment":"Pointer where to store the OID of the written tree"},{"name":"index","type":"git_index *","comment":"Index to write"}],"argline":"git_oid *out, git_index *index","sig":"git_oid *::git_index *","return":{"type":"int","comment":" 0 on success, GIT_EUNMERGED when the index is not clean\n or an error code"},"description":"<p>Write the index as a tree</p>\n","comments":"<p>This method will scan the index and write a representation of its current state back to disk; it recursively creates tree objects for each of the subtrees stored in the index, but only returns the OID of the root tree. This is the OID that can be used e.g. to create a commit.</p>\n\n<p>The index instance cannot be bare, and needs to be associated to an existing repository.</p>\n\n<p>The index must not contain any file in conflict.</p>\n","group":"index"},"git_index_write_tree_to":{"type":"function","file":"git2/index.h","line":281,"lineto":281,"args":[{"name":"out","type":"git_oid *","comment":"Pointer where to store OID of the the written tree"},{"name":"index","type":"git_index *","comment":"Index to write"},{"name":"repo","type":"git_repository *","comment":"Repository where to write the tree"}],"argline":"git_oid *out, git_index *index, git_repository *repo","sig":"git_oid *::git_index *::git_repository *","return":{"type":"int","comment":" 0 on success, GIT_EUNMERGED when the index is not clean\n or an error code"},"description":"<p>Write the index as a tree to the given repository</p>\n","comments":"<p>This method will do the same as <code>git_index_write_tree</code>, but letting the user choose the repository where the tree will be written.</p>\n\n<p>The index must not contain any file in conflict.</p>\n","group":"index"},"git_index_entrycount":{"type":"function","file":"git2/index.h","line":300,"lineto":300,"args":[{"name":"index","type":"const git_index *","comment":"an existing index object"}],"argline":"const git_index *index","sig":"const git_index *","return":{"type":"size_t","comment":" integer of count of current entries"},"description":"<p>Get the count of entries currently in the index</p>\n","comments":"","group":"index","examples":{"general.c":["ex/v0.19.0/general.html#git_index_entrycount-29"]}},"git_index_clear":{"type":"function","file":"git2/index.h","line":309,"lineto":309,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"void","comment":null},"description":"<p>Clear the contents (all the entries) of an index object.\n This clears the index object in memory; changes must be manually\n written to disk for them to take effect.</p>\n","comments":"","group":"index"},"git_index_get_byindex":{"type":"function","file":"git2/index.h","line":322,"lineto":323,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"n","type":"size_t","comment":"the position of the entry"}],"argline":"git_index *index, size_t n","sig":"git_index *::size_t","return":{"type":"const git_index_entry *","comment":" a pointer to the entry; NULL if out of bounds"},"description":"<p>Get a pointer to one of the entries in the index</p>\n","comments":"<p>The entry is not modifiable and should not be freed.  Because the <code>git_index_entry</code> struct is a publicly defined struct, you should be able to make your own permanent copy of the data if necessary.</p>\n","group":"index","examples":{"general.c":["ex/v0.19.0/general.html#git_index_get_byindex-30"]}},"git_index_get_bypath":{"type":"function","file":"git2/index.h","line":337,"lineto":338,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"path to search"},{"name":"stage","type":"int","comment":"stage to search"}],"argline":"git_index *index, const char *path, int stage","sig":"git_index *::const char *::int","return":{"type":"const git_index_entry *","comment":" a pointer to the entry; NULL if it was not found"},"description":"<p>Get a pointer to one of the entries in the index</p>\n","comments":"<p>The entry is not modifiable and should not be freed.  Because the <code>git_index_entry</code> struct is a publicly defined struct, you should be able to make your own permanent copy of the data if necessary.</p>\n","group":"index"},"git_index_remove":{"type":"function","file":"git2/index.h","line":348,"lineto":348,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"path to search"},{"name":"stage","type":"int","comment":"stage to search"}],"argline":"git_index *index, const char *path, int stage","sig":"git_index *::const char *::int","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Remove an entry from the index</p>\n","comments":"","group":"index"},"git_index_remove_directory":{"type":"function","file":"git2/index.h","line":358,"lineto":359,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"dir","type":"const char *","comment":"container directory path"},{"name":"stage","type":"int","comment":"stage to search"}],"argline":"git_index *index, const char *dir, int stage","sig":"git_index *::const char *::int","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Remove all entries from the index under a given directory</p>\n","comments":"","group":"index"},"git_index_add":{"type":"function","file":"git2/index.h","line":375,"lineto":375,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"source_entry","type":"const git_index_entry *","comment":"new entry object"}],"argline":"git_index *index, const git_index_entry *source_entry","sig":"git_index *::const git_index_entry *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Add or update an index entry from an in-memory struct</p>\n","comments":"<p>If a previous index entry exists that has the same path and stage as the given &#39;source_entry&#39;, it will be replaced.  Otherwise, the &#39;source_entry&#39; will be added.</p>\n\n<p>A full copy (including the &#39;path&#39; string) of the given &#39;source_entry&#39; will be inserted on the index.</p>\n","group":"index"},"git_index_entry_stage":{"type":"function","file":"git2/index.h","line":387,"lineto":387,"args":[{"name":"entry","type":"const git_index_entry *","comment":"The entry"}],"argline":"const git_index_entry *entry","sig":"const git_index_entry *","return":{"type":"int","comment":null},"description":"<p>Return the stage number from a git index entry</p>\n","comments":"<p>This entry is calculated from the entry&#39;s flag attribute like this:</p>\n\n<pre><code>(entry-&gt;flags &amp; GIT_IDXENTRY_STAGEMASK) &gt;&gt; GIT_IDXENTRY_STAGESHIFT\n</code></pre>\n","group":"index"},"git_index_add_bypath":{"type":"function","file":"git2/index.h","line":418,"lineto":418,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"filename to add"}],"argline":"git_index *index, const char *path","sig":"git_index *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Add or update an index entry from a file on disk</p>\n","comments":"<p>The file <code>path</code> must be relative to the repository&#39;s working folder and must be readable.</p>\n\n<p>This method will fail in bare index instances.</p>\n\n<p>This forces the file to be added to the index, not looking at gitignore rules.  Those rules can be evaluated through the git_status APIs (in status.h) before calling this.</p>\n\n<p>If this file currently is the result of a merge conflict, this file will no longer be marked as conflicting.  The data about the conflict will be moved to the &quot;resolve undo&quot; (REUC) section.</p>\n","group":"index"},"git_index_remove_bypath":{"type":"function","file":"git2/index.h","line":434,"lineto":434,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"filename to remove"}],"argline":"git_index *index, const char *path","sig":"git_index *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Remove an index entry corresponding to a file on disk</p>\n","comments":"<p>The file <code>path</code> must be relative to the repository&#39;s working folder.  It may exist.</p>\n\n<p>If this file currently is the result of a merge conflict, this file will no longer be marked as conflicting.  The data about the conflict will be moved to the &quot;resolve undo&quot; (REUC) section.</p>\n","group":"index"},"git_index_add_all":{"type":"function","file":"git2/index.h","line":481,"lineto":486,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"pathspec","type":"const git_strarray *","comment":"array of path patterns"},{"name":"flags","type":"unsigned int","comment":"combination of git_index_add_option_t flags"},{"name":"callback","type":"git_index_matched_path_cb","comment":"notification callback for each added/updated path (also\n                 gets index of matching pathspec entry); can be NULL;\n                 return 0 to add, >0 to skip, \n<\n0 to abort scan."},{"name":"payload","type":"void *","comment":"payload passed through to callback function"}],"argline":"git_index *index, const git_strarray *pathspec, unsigned int flags, git_index_matched_path_cb callback, void *payload","sig":"git_index *::const git_strarray *::unsigned int::git_index_matched_path_cb::void *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Add or update index entries matching files in the working directory.</p>\n","comments":"<p>This method will fail in bare index instances.</p>\n\n<p>The <code>pathspec</code> is a list of file names or shell glob patterns that will matched against files in the repository&#39;s working directory.  Each file that matches will be added to the index (either updating an existing entry or adding a new entry).  You can disable glob expansion and force exact matching with the <code>GIT_INDEX_ADD_DISABLE_PATHSPEC_MATCH</code> flag.</p>\n\n<p>Files that are ignored will be skipped (unlike <code>git_index_add_bypath</code>). If a file is already tracked in the index, then it <em>will</em> be updated even if it is ignored.  Pass the <code>GIT_INDEX_ADD_FORCE</code> flag to skip the checking of ignore rules.</p>\n\n<p>To emulate <code>git add -A</code> and generate an error if the pathspec contains the exact path of an ignored file (when not using FORCE), add the <code>GIT_INDEX_ADD_CHECK_PATHSPEC</code> flag.  This checks that each entry in the <code>pathspec</code> that is an exact match to a filename on disk is either not ignored or already in the index.  If this check fails, the function will return GIT_EINVALIDSPEC.</p>\n\n<p>To emulate <code>git add -A</code> with the &quot;dry-run&quot; option, just use a callback function that always returns a positive value.  See below for details.</p>\n\n<p>If any files are currently the result of a merge conflict, those files will no longer be marked as conflicting.  The data about the conflicts will be moved to the &quot;resolve undo&quot; (REUC) section.</p>\n\n<p>If you provide a callback function, it will be invoked on each matching item in the working directory immediately <em>before</em> it is added to / updated in the index.  Returning zero will add the item to the index, greater than zero will skip the item, and less than zero will abort the scan and cause GIT_EUSER to be returned.</p>\n","group":"index"},"git_index_remove_all":{"type":"function","file":"git2/index.h","line":503,"lineto":507,"args":[{"name":"index","type":"git_index *","comment":"An existing index object"},{"name":"pathspec","type":"const git_strarray *","comment":"array of path patterns"},{"name":"callback","type":"git_index_matched_path_cb","comment":"notification callback for each removed path (also\n                 gets index of matching pathspec entry); can be NULL;\n                 return 0 to add, >0 to skip, \n<\n0 to abort scan."},{"name":"payload","type":"void *","comment":"payload passed through to callback function"}],"argline":"git_index *index, const git_strarray *pathspec, git_index_matched_path_cb callback, void *payload","sig":"git_index *::const git_strarray *::git_index_matched_path_cb::void *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Remove all matching index entries.</p>\n","comments":"<p>If you provide a callback function, it will be invoked on each matching item in the index immediately <em>before</em> it is removed.  Return 0 to remove the item, &gt; 0 to skip the item, and &lt; 0 to abort the scan.</p>\n","group":"index"},"git_index_update_all":{"type":"function","file":"git2/index.h","line":532,"lineto":536,"args":[{"name":"index","type":"git_index *","comment":"An existing index object"},{"name":"pathspec","type":"const git_strarray *","comment":"array of path patterns"},{"name":"callback","type":"git_index_matched_path_cb","comment":"notification callback for each updated path (also\n                 gets index of matching pathspec entry); can be NULL;\n                 return 0 to add, >0 to skip, \n<\n0 to abort scan."},{"name":"payload","type":"void *","comment":"payload passed through to callback function"}],"argline":"git_index *index, const git_strarray *pathspec, git_index_matched_path_cb callback, void *payload","sig":"git_index *::const git_strarray *::git_index_matched_path_cb::void *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Update all index entries to match the working directory</p>\n","comments":"<p>This method will fail in bare index instances.</p>\n\n<p>This scans the existing index entries and synchronizes them with the working directory, deleting them if the corresponding working directory file no longer exists otherwise updating the information (including adding the latest version of file to the ODB if needed).</p>\n\n<p>If you provide a callback function, it will be invoked on each matching item in the index immediately <em>before</em> it is updated (either refreshed or removed depending on working directory state).  Return 0 to proceed with updating the item, &gt; 0 to skip the item, and &lt; 0 to abort the scan.</p>\n","group":"index"},"git_index_find":{"type":"function","file":"git2/index.h","line":548,"lineto":548,"args":[{"name":"at_pos","type":"size_t *","comment":"the address to which the position of the index entry is written (optional)"},{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"path to search"}],"argline":"size_t *at_pos, git_index *index, const char *path","sig":"size_t *::git_index *::const char *","return":{"type":"int","comment":" a zero-based position in the index if found;\n GIT_ENOTFOUND otherwise"},"description":"<p>Find the first position of any entries which point to given\n path in the Git index.</p>\n","comments":"","group":"index"},"git_index_conflict_add":{"type":"function","file":"git2/index.h","line":572,"lineto":576,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"ancestor_entry","type":"const git_index_entry *","comment":"the entry data for the ancestor of the conflict"},{"name":"our_entry","type":"const git_index_entry *","comment":"the entry data for our side of the merge conflict"},{"name":"their_entry","type":"const git_index_entry *","comment":"the entry data for their side of the merge conflict"}],"argline":"git_index *index, const git_index_entry *ancestor_entry, const git_index_entry *our_entry, const git_index_entry *their_entry","sig":"git_index *::const git_index_entry *::const git_index_entry *::const git_index_entry *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Add or update index entries to represent a conflict</p>\n","comments":"<p>The entries are the entries from the tree included in the merge.  Any entry may be null to indicate that that file was not present in the trees during the merge.  For example, ancestor_entry may be NULL to indicate that a file was added in both branches and must be resolved.</p>\n","group":"index"},"git_index_conflict_get":{"type":"function","file":"git2/index.h","line":591,"lineto":596,"args":[{"name":"ancestor_out","type":"const git_index_entry **","comment":"Pointer to store the ancestor entry"},{"name":"our_out","type":"const git_index_entry **","comment":"Pointer to store the our entry"},{"name":"their_out","type":"const git_index_entry **","comment":"Pointer to store the their entry"},{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"path to search"}],"argline":"const git_index_entry **ancestor_out, const git_index_entry **our_out, const git_index_entry **their_out, git_index *index, const char *path","sig":"const git_index_entry **::const git_index_entry **::const git_index_entry **::git_index *::const char *","return":{"type":"int","comment":null},"description":"<p>Get the index entries that represent a conflict of a single file.</p>\n","comments":"<p>The entries are not modifiable and should not be freed.  Because the <code>git_index_entry</code> struct is a publicly defined struct, you should be able to make your own permanent copy of the data if necessary.</p>\n","group":"index"},"git_index_conflict_remove":{"type":"function","file":"git2/index.h","line":604,"lineto":604,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"},{"name":"path","type":"const char *","comment":"to search"}],"argline":"git_index *index, const char *path","sig":"git_index *::const char *","return":{"type":"int","comment":null},"description":"<p>Removes the index entries that represent a conflict of a single file.</p>\n","comments":"","group":"index"},"git_index_conflict_cleanup":{"type":"function","file":"git2/index.h","line":611,"lineto":611,"args":[{"name":"index","type":"git_index *","comment":"an existing index object"}],"argline":"git_index *index","sig":"git_index *","return":{"type":"void","comment":null},"description":"<p>Remove all conflicts in the index (entries with a stage greater than 0.)</p>\n","comments":"","group":"index"},"git_index_has_conflicts":{"type":"function","file":"git2/index.h","line":618,"lineto":618,"args":[{"name":"index","type":"const git_index *","comment":null}],"argline":"const git_index *index","sig":"const git_index *","return":{"type":"int","comment":" 1 if at least one conflict is found, 0 otherwise."},"description":"<p>Determine if the index contains entries representing file conflicts.</p>\n","comments":"","group":"index"},"git_index_conflict_iterator_new":{"type":"function","file":"git2/index.h","line":626,"lineto":628,"args":[{"name":"iterator_out","type":"git_index_conflict_iterator **","comment":null},{"name":"index","type":"git_index *","comment":null}],"argline":"git_index_conflict_iterator **iterator_out, git_index *index","sig":"git_index_conflict_iterator **::git_index *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create an iterator for the conflicts in the index.  You may not modify the\n index while iterating, the results are undefined.</p>\n","comments":"","group":"index"},"git_index_conflict_next":{"type":"function","file":"git2/index.h","line":640,"lineto":644,"args":[{"name":"ancestor_out","type":"const git_index_entry **","comment":"Pointer to store the ancestor side of the conflict"},{"name":"our_out","type":"const git_index_entry **","comment":"Pointer to store our side of the conflict"},{"name":"their_out","type":"const git_index_entry **","comment":"Pointer to store their side of the conflict"},{"name":"iterator","type":"git_index_conflict_iterator *","comment":null}],"argline":"const git_index_entry **ancestor_out, const git_index_entry **our_out, const git_index_entry **their_out, git_index_conflict_iterator *iterator","sig":"const git_index_entry **::const git_index_entry **::const git_index_entry **::git_index_conflict_iterator *","return":{"type":"int","comment":" 0 (no error), GIT_ITEROVER (iteration is done) or an error code\n         (negative value)"},"description":"<p>Returns the current conflict (ancestor, ours and theirs entry) and\n advance the iterator internally to the next value.</p>\n","comments":"","group":"index"},"git_index_conflict_iterator_free":{"type":"function","file":"git2/index.h","line":651,"lineto":652,"args":[{"name":"iterator","type":"git_index_conflict_iterator *","comment":"pointer to the iterator"}],"argline":"git_index_conflict_iterator *iterator","sig":"git_index_conflict_iterator *","return":{"type":"void","comment":null},"description":"<p>Frees a <code>git_index_conflict_iterator</code>.</p>\n","comments":"","group":"index"},"git_indexer_stream_new":{"type":"function","file":"git2/indexer.h","line":26,"lineto":30,"args":[{"name":"out","type":"git_indexer_stream **","comment":"where to store the indexer instance"},{"name":"path","type":"const char *","comment":"to the directory where the packfile should be stored"},{"name":"progress_cb","type":"git_transfer_progress_callback","comment":"function to call with progress information"},{"name":"progress_cb_payload","type":"void *","comment":"payload for the progress callback"}],"argline":"git_indexer_stream **out, const char *path, git_transfer_progress_callback progress_cb, void *progress_cb_payload","sig":"git_indexer_stream **::const char *::git_transfer_progress_callback::void *","return":{"type":"int","comment":null},"description":"<p>Create a new streaming indexer instance</p>\n","comments":"","group":"indexer","examples":{"network/index-pack.c":["ex/v0.19.0/network/index-pack.html#git_indexer_stream_new-1"]}},"git_indexer_stream_add":{"type":"function","file":"git2/indexer.h","line":40,"lineto":40,"args":[{"name":"idx","type":"git_indexer_stream *","comment":"the indexer"},{"name":"data","type":"const void *","comment":"the data to add"},{"name":"size","type":"size_t","comment":"the size of the data in bytes"},{"name":"stats","type":"git_transfer_progress *","comment":"stat storage"}],"argline":"git_indexer_stream *idx, const void *data, size_t size, git_transfer_progress *stats","sig":"git_indexer_stream *::const void *::size_t::git_transfer_progress *","return":{"type":"int","comment":null},"description":"<p>Add data to the indexer</p>\n","comments":"","group":"indexer","examples":{"network/index-pack.c":["ex/v0.19.0/network/index-pack.html#git_indexer_stream_add-2"]}},"git_indexer_stream_finalize":{"type":"function","file":"git2/indexer.h","line":49,"lineto":49,"args":[{"name":"idx","type":"git_indexer_stream *","comment":"the indexer"},{"name":"stats","type":"git_transfer_progress *","comment":null}],"argline":"git_indexer_stream *idx, git_transfer_progress *stats","sig":"git_indexer_stream *::git_transfer_progress *","return":{"type":"int","comment":null},"description":"<p>Finalize the pack and index</p>\n","comments":"<p>Resolve any pending deltas and write out the index file</p>\n","group":"indexer","examples":{"network/index-pack.c":["ex/v0.19.0/network/index-pack.html#git_indexer_stream_finalize-3"]}},"git_indexer_stream_hash":{"type":"function","file":"git2/indexer.h","line":59,"lineto":59,"args":[{"name":"idx","type":"const git_indexer_stream *","comment":"the indexer instance"}],"argline":"const git_indexer_stream *idx","sig":"const git_indexer_stream *","return":{"type":"const git_oid *","comment":null},"description":"<p>Get the packfile&#39;s hash</p>\n","comments":"<p>A packfile&#39;s name is derived from the sorted hashing of all object names. This is only correct after the index has been finalized.</p>\n","group":"indexer","examples":{"network/index-pack.c":["ex/v0.19.0/network/index-pack.html#git_indexer_stream_hash-4"]}},"git_indexer_stream_free":{"type":"function","file":"git2/indexer.h","line":66,"lineto":66,"args":[{"name":"idx","type":"git_indexer_stream *","comment":"the indexer to free"}],"argline":"git_indexer_stream *idx","sig":"git_indexer_stream *","return":{"type":"void","comment":null},"description":"<p>Free the indexer and its resources</p>\n","comments":"","group":"indexer","examples":{"network/index-pack.c":["ex/v0.19.0/network/index-pack.html#git_indexer_stream_free-5"]}},"git_message_prettify":{"type":"function","file":"git2/message.h","line":40,"lineto":44,"args":[{"name":"out","type":"char *","comment":"The user-allocated buffer which will be filled with the\n     cleaned up message. Pass NULL if you just want to get the needed\n     size of the prettified message as the output value."},{"name":"out_size","type":"size_t","comment":"Size of the `out` buffer in bytes."},{"name":"message","type":"const char *","comment":"The message to be prettified."},{"name":"strip_comments","type":"int","comment":"Non-zero to remove lines starting with \"#\", 0 to\n     leave them in."}],"argline":"char *out, size_t out_size, const char *message, int strip_comments","sig":"char *::size_t::const char *::int","return":{"type":"int","comment":" -1 on error, else number of characters in prettified message\n     including the trailing NUL byte"},"description":"<p>Clean up message from excess whitespace and make sure that the last line\n ends with a &#39;</p>\n\n<p>&#39;.</p>\n","comments":"<p>Optionally, can remove lines starting with a &quot;#&quot;.</p>\n","group":"message"},"git_note_iterator_new":{"type":"function","file":"git2/notes.h","line":49,"lineto":52,"args":[{"name":"out","type":"git_note_iterator **","comment":"pointer to the iterator"},{"name":"repo","type":"git_repository *","comment":"repository where to look up the note"},{"name":"notes_ref","type":"const char *","comment":"canonical name of the reference to use (optional); defaults to\n                  \"refs/notes/commits\""}],"argline":"git_note_iterator **out, git_repository *repo, const char *notes_ref","sig":"git_note_iterator **::git_repository *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Creates a new iterator for notes</p>\n","comments":"<p>The iterator must be freed manually by the user.</p>\n","group":"note"},"git_note_iterator_free":{"type":"function","file":"git2/notes.h","line":59,"lineto":59,"args":[{"name":"it","type":"git_note_iterator *","comment":"pointer to the iterator"}],"argline":"git_note_iterator *it","sig":"git_note_iterator *","return":{"type":"void","comment":null},"description":"<p>Frees an git_note_iterator</p>\n","comments":"","group":"note"},"git_note_next":{"type":"function","file":"git2/notes.h","line":74,"lineto":77,"args":[{"name":"note_id","type":"git_oid *","comment":"id of blob containing the message"},{"name":"annotated_id","type":"git_oid *","comment":"id of the git object being annotated"},{"name":"it","type":"git_note_iterator *","comment":"pointer to the iterator"}],"argline":"git_oid *note_id, git_oid *annotated_id, git_note_iterator *it","sig":"git_oid *::git_oid *::git_note_iterator *","return":{"type":"int","comment":" 0 (no error), GIT_ITEROVER (iteration is done) or an error code\n         (negative value)"},"description":"<p>Returns the current item (note_id and annotated_id) and advance the iterator\n internally to the next value</p>\n","comments":"<p>The notes must not be freed manually by the user.</p>\n","group":"note"},"git_note_read":{"type":"function","file":"git2/notes.h","line":93,"lineto":97,"args":[{"name":"out","type":"git_note **","comment":"pointer to the read note; NULL in case of error"},{"name":"repo","type":"git_repository *","comment":"repository where to look up the note"},{"name":"notes_ref","type":"const char *","comment":"canonical name of the reference to use (optional); defaults to\n                  \"refs/notes/commits\""},{"name":"oid","type":"const git_oid *","comment":"OID of the git object to read the note from"}],"argline":"git_note **out, git_repository *repo, const char *notes_ref, const git_oid *oid","sig":"git_note **::git_repository *::const char *::const git_oid *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Read the note for an object</p>\n","comments":"<p>The note must be freed manually by the user.</p>\n","group":"note"},"git_note_message":{"type":"function","file":"git2/notes.h","line":105,"lineto":105,"args":[{"name":"note","type":"const git_note *","comment":""}],"argline":"const git_note *note","sig":"const git_note *","return":{"type":"const char *","comment":" the note message"},"description":"<p>Get the note message</p>\n","comments":"","group":"note"},"git_note_oid":{"type":"function","file":"git2/notes.h","line":114,"lineto":114,"args":[{"name":"note","type":"const git_note *","comment":""}],"argline":"const git_note *note","sig":"const git_note *","return":{"type":"const git_oid *","comment":" the note object OID"},"description":"<p>Get the note object OID</p>\n","comments":"","group":"note"},"git_note_create":{"type":"function","file":"git2/notes.h","line":131,"lineto":139,"args":[{"name":"out","type":"git_oid *","comment":"pointer to store the OID (optional); NULL in case of error"},{"name":"repo","type":"git_repository *","comment":"repository where to store the note"},{"name":"author","type":"const git_signature *","comment":"signature of the notes commit author"},{"name":"committer","type":"const git_signature *","comment":"signature of the notes commit committer"},{"name":"notes_ref","type":"const char *","comment":"canonical name of the reference to use (optional);\n\t\t\t\t\tdefaults to \"refs/notes/commits\""},{"name":"oid","type":"const git_oid *","comment":"OID of the git object to decorate"},{"name":"note","type":"const char *","comment":"Content of the note to add for object oid"},{"name":"force","type":"int","comment":"Overwrite existing note"}],"argline":"git_oid *out, git_repository *repo, const git_signature *author, const git_signature *committer, const char *notes_ref, const git_oid *oid, const char *note, int force","sig":"git_oid *::git_repository *::const git_signature *::const git_signature *::const char *::const git_oid *::const char *::int","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Add a note for an object</p>\n","comments":"","group":"note"},"git_note_remove":{"type":"function","file":"git2/notes.h","line":154,"lineto":159,"args":[{"name":"repo","type":"git_repository *","comment":"repository where the note lives"},{"name":"notes_ref","type":"const char *","comment":"canonical name of the reference to use (optional);\n\t\t\t\t\tdefaults to \"refs/notes/commits\""},{"name":"author","type":"const git_signature *","comment":"signature of the notes commit author"},{"name":"committer","type":"const git_signature *","comment":"signature of the notes commit committer"},{"name":"oid","type":"const git_oid *","comment":"OID of the git object to remove the note from"}],"argline":"git_repository *repo, const char *notes_ref, const git_signature *author, const git_signature *committer, const git_oid *oid","sig":"git_repository *::const char *::const git_signature *::const git_signature *::const git_oid *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Remove the note for an object</p>\n","comments":"","group":"note"},"git_note_free":{"type":"function","file":"git2/notes.h","line":166,"lineto":166,"args":[{"name":"note","type":"git_note *","comment":"git_note object"}],"argline":"git_note *note","sig":"git_note *","return":{"type":"void","comment":null},"description":"<p>Free a git_note object</p>\n","comments":"","group":"note"},"git_note_default_ref":{"type":"function","file":"git2/notes.h","line":176,"lineto":176,"args":[{"name":"out","type":"const char **","comment":"Pointer to the default notes reference"},{"name":"repo","type":"git_repository *","comment":"The Git repository"}],"argline":"const char **out, git_repository *repo","sig":"const char **::git_repository *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Get the default notes reference for a repository</p>\n","comments":"","group":"note"},"git_note_foreach":{"type":"function","file":"git2/notes.h","line":194,"lineto":198,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where to find the notes."},{"name":"notes_ref","type":"const char *","comment":"Reference to read from (optional); defaults to\n        \"refs/notes/commits\"."},{"name":"note_cb","type":"git_note_foreach_cb","comment":"Callback to invoke per found annotation.  Return non-zero\n        to stop looping."},{"name":"payload","type":"void *","comment":"Extra parameter to callback function."}],"argline":"git_repository *repo, const char *notes_ref, git_note_foreach_cb note_cb, void *payload","sig":"git_repository *::const char *::git_note_foreach_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback, or error code"},"description":"<p>Loop over all the notes within a specified namespace\n and issue a callback for each one.</p>\n","comments":"","group":"note"},"git_object_lookup":{"type":"function","file":"git2/object.h","line":41,"lineto":45,"args":[{"name":"object","type":"git_object **","comment":"pointer to the looked-up object"},{"name":"repo","type":"git_repository *","comment":"the repository to look up the object"},{"name":"id","type":"const git_oid *","comment":"the unique identifier for the object"},{"name":"type","type":"git_otype","comment":"the type of the object"}],"argline":"git_object **object, git_repository *repo, const git_oid *id, git_otype type","sig":"git_object **::git_repository *::const git_oid *::git_otype","return":{"type":"int","comment":" a reference to the object"},"description":"<p>Lookup a reference to one of the objects in a repository.</p>\n","comments":"<p>The generated reference is owned by the repository and should be closed with the <code>git_object_free</code> method instead of free&#39;d manually.</p>\n\n<p>The &#39;type&#39; parameter must match the type of the object in the odb; the method will fail otherwise. The special value &#39;GIT_OBJ_ANY&#39; may be passed to let the method guess the object&#39;s type.</p>\n","group":"object"},"git_object_lookup_prefix":{"type":"function","file":"git2/object.h","line":74,"lineto":79,"args":[{"name":"object_out","type":"git_object **","comment":"pointer where to store the looked-up object"},{"name":"repo","type":"git_repository *","comment":"the repository to look up the object"},{"name":"id","type":"const git_oid *","comment":"a short identifier for the object"},{"name":"len","type":"size_t","comment":"the length of the short identifier"},{"name":"type","type":"git_otype","comment":"the type of the object"}],"argline":"git_object **object_out, git_repository *repo, const git_oid *id, size_t len, git_otype type","sig":"git_object **::git_repository *::const git_oid *::size_t::git_otype","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Lookup a reference to one of the objects in a repository,\n given a prefix of its identifier (short id).</p>\n","comments":"<p>The object obtained will be so that its identifier matches the first &#39;len&#39; hexadecimal characters (packets of 4 bits) of the given &#39;id&#39;. &#39;len&#39; must be at least GIT_OID_MINPREFIXLEN, and long enough to identify a unique object matching the prefix; otherwise the method will fail.</p>\n\n<p>The generated reference is owned by the repository and should be closed with the <code>git_object_free</code> method instead of free&#39;d manually.</p>\n\n<p>The &#39;type&#39; parameter must match the type of the object in the odb; the method will fail otherwise. The special value &#39;GIT_OBJ_ANY&#39; may be passed to let the method guess the object&#39;s type.</p>\n","group":"object"},"git_object_id":{"type":"function","file":"git2/object.h","line":87,"lineto":87,"args":[{"name":"obj","type":"const git_object *","comment":"the repository object"}],"argline":"const git_object *obj","sig":"const git_object *","return":{"type":"const git_oid *","comment":" the SHA1 id"},"description":"<p>Get the id (SHA1) of a repository object</p>\n","comments":"","group":"object"},"git_object_type":{"type":"function","file":"git2/object.h","line":95,"lineto":95,"args":[{"name":"obj","type":"const git_object *","comment":"the repository object"}],"argline":"const git_object *obj","sig":"const git_object *","return":{"type":"git_otype","comment":" the object's type"},"description":"<p>Get the object type of an object</p>\n","comments":"","group":"object"},"git_object_owner":{"type":"function","file":"git2/object.h","line":109,"lineto":109,"args":[{"name":"obj","type":"const git_object *","comment":"the object"}],"argline":"const git_object *obj","sig":"const git_object *","return":{"type":"git_repository *","comment":" the repository who owns this object"},"description":"<p>Get the repository that owns this object</p>\n","comments":"<p>Freeing or calling <code>git_repository_close</code> on the returned pointer will invalidate the actual object.</p>\n\n<p>Any other operation may be run on the repository without affecting the object.</p>\n","group":"object"},"git_object_free":{"type":"function","file":"git2/object.h","line":126,"lineto":126,"args":[{"name":"object","type":"git_object *","comment":"the object to close"}],"argline":"git_object *object","sig":"git_object *","return":{"type":"void","comment":null},"description":"<p>Close an open object</p>\n","comments":"<p>This method instructs the library to close an existing object; note that git_objects are owned and cached by the repository so the object may or may not be freed after this library call, depending on how aggressive is the caching mechanism used by the repository.</p>\n\n<p>IMPORTANT: It <em>is</em> necessary to call this method when you stop using an object. Failure to do so will cause a memory leak.</p>\n","group":"object","examples":{"general.c":["ex/v0.19.0/general.html#git_object_free-31"]}},"git_object_type2string":{"type":"function","file":"git2/object.h","line":137,"lineto":137,"args":[{"name":"type","type":"git_otype","comment":"object type to convert."}],"argline":"git_otype type","sig":"git_otype","return":{"type":"const char *","comment":" the corresponding string representation."},"description":"<p>Convert an object type to it&#39;s string representation.</p>\n","comments":"<p>The result is a pointer to a string in static memory and should not be free()&#39;ed.</p>\n","group":"object","examples":{"general.c":["ex/v0.19.0/general.html#git_object_type2string-32"]}},"git_object_string2type":{"type":"function","file":"git2/object.h","line":145,"lineto":145,"args":[{"name":"str","type":"const char *","comment":"the string to convert."}],"argline":"const char *str","sig":"const char *","return":{"type":"git_otype","comment":" the corresponding git_otype."},"description":"<p>Convert a string object type representation to it&#39;s git_otype.</p>\n","comments":"","group":"object"},"git_object_typeisloose":{"type":"function","file":"git2/object.h","line":154,"lineto":154,"args":[{"name":"type","type":"git_otype","comment":"object type to test."}],"argline":"git_otype type","sig":"git_otype","return":{"type":"int","comment":" true if the type represents a valid loose object type,\n false otherwise."},"description":"<p>Determine if the given git_otype is a valid loose object type.</p>\n","comments":"","group":"object"},"git_object__size":{"type":"function","file":"git2/object.h","line":168,"lineto":168,"args":[{"name":"type","type":"git_otype","comment":"object type to get its size"}],"argline":"git_otype type","sig":"git_otype","return":{"type":"size_t","comment":" size in bytes of the object"},"description":"<p>Get the size in bytes for the structure which\n acts as an in-memory representation of any given\n object type.</p>\n","comments":"<p>For all the core types, this would the equivalent of calling <code>sizeof(git_commit)</code> if the core types were not opaque on the external API.</p>\n","group":"object"},"git_object_peel":{"type":"function","file":"git2/object.h","line":186,"lineto":189,"args":[{"name":"peeled","type":"git_object **","comment":"Pointer to the peeled git_object"},{"name":"object","type":"const git_object *","comment":"The object to be processed"},{"name":"target_type","type":"git_otype","comment":"The type of the requested object (GIT_OBJ_COMMIT,\n GIT_OBJ_TAG, GIT_OBJ_TREE, GIT_OBJ_BLOB or GIT_OBJ_ANY)."}],"argline":"git_object **peeled, const git_object *object, git_otype target_type","sig":"git_object **::const git_object *::git_otype","return":{"type":"int","comment":" 0 on success, GIT_EAMBIGUOUS, GIT_ENOTFOUND or an error code"},"description":"<p>Recursively peel an object until an object of the specified type is met.</p>\n","comments":"<p>The retrieved <code>peeled</code> object is owned by the repository and should be closed with the <code>git_object_free</code> method.</p>\n\n<p>If you pass <code>GIT_OBJ_ANY</code> as the target type, then the object will be peeled until the type changes (e.g. a tag will be chased until the referenced object is no longer a tag).</p>\n","group":"object"},"git_object_dup":{"type":"function","file":"git2/object.h","line":198,"lineto":198,"args":[{"name":"dest","type":"git_object **","comment":"Pointer to store the copy of the object"},{"name":"source","type":"git_object *","comment":"Original object to copy"}],"argline":"git_object **dest, git_object *source","sig":"git_object **::git_object *","return":{"type":"int","comment":null},"description":"<p>Create an in-memory copy of a Git object. The copy must be\n explicitly free&#39;d or it will leak.</p>\n","comments":"","group":"object"},"git_odb_new":{"type":"function","file":"git2/odb.h","line":38,"lineto":38,"args":[{"name":"out","type":"git_odb **","comment":"location to store the database pointer, if opened.\n\t\t\tSet to NULL if the open failed."}],"argline":"git_odb **out","sig":"git_odb **","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create a new object database with no backends.</p>\n","comments":"<p>Before the ODB can be used for read/writing, a custom database backend must be manually added using <code>git_odb_add_backend()</code></p>\n","group":"odb"},"git_odb_open":{"type":"function","file":"git2/odb.h","line":56,"lineto":56,"args":[{"name":"out","type":"git_odb **","comment":"location to store the database pointer, if opened.\n\t\t\tSet to NULL if the open failed."},{"name":"objects_dir","type":"const char *","comment":"path of the backends' \"objects\" directory."}],"argline":"git_odb **out, const char *objects_dir","sig":"git_odb **::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create a new object database and automatically add\n the two default backends:</p>\n","comments":"<pre><code>- git_odb_backend_loose: read and write loose object files      from disk, assuming `objects_dir` as the Objects folder\n\n- git_odb_backend_pack: read objects from packfiles,        assuming `objects_dir` as the Objects folder which      contains a &#39;pack/&#39; folder with the corresponding data\n</code></pre>\n","group":"odb"},"git_odb_add_disk_alternate":{"type":"function","file":"git2/odb.h","line":73,"lineto":73,"args":[{"name":"odb","type":"git_odb *","comment":"database to add the backend to"},{"name":"path","type":"const char *","comment":"path to the objects folder for the alternate"}],"argline":"git_odb *odb, const char *path","sig":"git_odb *::const char *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Add an on-disk alternate to an existing Object DB.</p>\n","comments":"<p>Note that the added path must point to an <code>objects</code>, not to a full repository, to use it as an alternate store.</p>\n\n<p>Alternate backends are always checked for objects <em>after</em> all the main backends have been exhausted.</p>\n\n<p>Writing is disabled on alternate backends.</p>\n","group":"odb"},"git_odb_free":{"type":"function","file":"git2/odb.h","line":80,"lineto":80,"args":[{"name":"db","type":"git_odb *","comment":"database pointer to close. If NULL no action is taken."}],"argline":"git_odb *db","sig":"git_odb *","return":{"type":"void","comment":null},"description":"<p>Close an open object database.</p>\n","comments":"","group":"odb"},"git_odb_read":{"type":"function","file":"git2/odb.h","line":99,"lineto":99,"args":[{"name":"out","type":"git_odb_object **","comment":"pointer where to store the read object"},{"name":"db","type":"git_odb *","comment":"database to search for the object in."},{"name":"id","type":"const git_oid *","comment":"identity of the object to read."}],"argline":"git_odb_object **out, git_odb *db, const git_oid *id","sig":"git_odb_object **::git_odb *::const git_oid *","return":{"type":"int","comment":" - 0 if the object was read;\n - GIT_ENOTFOUND if the object is not in the database."},"description":"<p>Read an object from the database.</p>\n","comments":"<p>This method queries all available ODB backends trying to read the given OID.</p>\n\n<p>The returned object is reference counted and internally cached, so it should be closed by the user once it&#39;s no longer in use.</p>\n","group":"odb","examples":{"general.c":["ex/v0.19.0/general.html#git_odb_read-33"]}},"git_odb_read_prefix":{"type":"function","file":"git2/odb.h","line":128,"lineto":128,"args":[{"name":"out","type":"git_odb_object **","comment":"pointer where to store the read object"},{"name":"db","type":"git_odb *","comment":"database to search for the object in."},{"name":"short_id","type":"const git_oid *","comment":"a prefix of the id of the object to read."},{"name":"len","type":"size_t","comment":"the length of the prefix"}],"argline":"git_odb_object **out, git_odb *db, const git_oid *short_id, size_t len","sig":"git_odb_object **::git_odb *::const git_oid *::size_t","return":{"type":"int","comment":" \n - 0 if the object was read;\n - GIT_ENOTFOUND if the object is not in the database.\n - GIT_EAMBIGUOUS if the prefix is ambiguous (several objects match the prefix)"},"description":"<p>Read an object from the database, given a prefix\n of its identifier.</p>\n","comments":"<p>This method queries all available ODB backends trying to match the &#39;len&#39; first hexadecimal characters of the &#39;short_id&#39;. The remaining (GIT_OID_HEXSZ-len)*4 bits of &#39;short_id&#39; must be 0s. &#39;len&#39; must be at least GIT_OID_MINPREFIXLEN, and the prefix must be long enough to identify a unique object in all the backends; the method will fail otherwise.</p>\n\n<p>The returned object is reference counted and internally cached, so it should be closed by the user once it&#39;s no longer in use.</p>\n","group":"odb"},"git_odb_read_header":{"type":"function","file":"git2/odb.h","line":148,"lineto":148,"args":[{"name":"len_out","type":"size_t *","comment":"pointer where to store the length"},{"name":"type_out","type":"git_otype *","comment":"pointer where to store the type"},{"name":"db","type":"git_odb *","comment":"database to search for the object in."},{"name":"id","type":"const git_oid *","comment":"identity of the object to read."}],"argline":"size_t *len_out, git_otype *type_out, git_odb *db, const git_oid *id","sig":"size_t *::git_otype *::git_odb *::const git_oid *","return":{"type":"int","comment":" - 0 if the object was read;\n - GIT_ENOTFOUND if the object is not in the database."},"description":"<p>Read the header of an object from the database, without\n reading its full contents.</p>\n","comments":"<p>The header includes the length and the type of an object.</p>\n\n<p>Note that most backends do not support reading only the header of an object, so the whole object will be read and then the header will be returned.</p>\n","group":"odb"},"git_odb_exists":{"type":"function","file":"git2/odb.h","line":159,"lineto":159,"args":[{"name":"db","type":"git_odb *","comment":"database to be searched for the given object."},{"name":"id","type":"const git_oid *","comment":"the object to search for."}],"argline":"git_odb *db, const git_oid *id","sig":"git_odb *::const git_oid *","return":{"type":"int","comment":" - 1, if the object was found\n - 0, otherwise"},"description":"<p>Determine if the given object can be found in the object database.</p>\n","comments":"","group":"odb"},"git_odb_refresh":{"type":"function","file":"git2/odb.h","line":179,"lineto":179,"args":[{"name":"db","type":"struct git_odb *","comment":"database to refresh"}],"argline":"struct git_odb *db","sig":"struct git_odb *","return":{"type":"int","comment":" 0 on success, error code otherwise"},"description":"<p>Refresh the object database to load newly added files.</p>\n","comments":"<p>If the object databases have changed on disk while the library is running, this function will force a reload of the underlying indexes.</p>\n\n<p>Use this function when you&#39;re confident that an external application has tampered with the ODB.</p>\n\n<p>NOTE that it is not necessary to call this function at all. The library will automatically attempt to refresh the ODB when a lookup fails, to see if the looked up object exists on disk but hasn&#39;t been loaded yet.</p>\n","group":"odb"},"git_odb_foreach":{"type":"function","file":"git2/odb.h","line":194,"lineto":194,"args":[{"name":"db","type":"git_odb *","comment":"database to use"},{"name":"cb","type":"git_odb_foreach_cb","comment":"the callback to call for each object"},{"name":"payload","type":"void *","comment":"data to pass to the callback"}],"argline":"git_odb *db, git_odb_foreach_cb cb, void *payload","sig":"git_odb *::git_odb_foreach_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback, or error code"},"description":"<p>List all objects available in the database</p>\n","comments":"<p>The callback will be called for each object available in the database. Note that the objects are likely to be returned in the index order, which would make accessing the objects in that order inefficient. Return a non-zero value from the callback to stop looping.</p>\n","group":"odb"},"git_odb_write":{"type":"function","file":"git2/odb.h","line":214,"lineto":214,"args":[{"name":"out","type":"git_oid *","comment":"pointer to store the OID result of the write"},{"name":"odb","type":"git_odb *","comment":"object database where to store the object"},{"name":"data","type":"const void *","comment":"buffer with the data to store"},{"name":"len","type":"size_t","comment":"size of the buffer"},{"name":"type","type":"git_otype","comment":"type of the data to store"}],"argline":"git_oid *out, git_odb *odb, const void *data, size_t len, git_otype type","sig":"git_oid *::git_odb *::const void *::size_t::git_otype","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Write an object directly into the ODB</p>\n","comments":"<p>This method writes a full object straight into the ODB. For most cases, it is preferred to write objects through a write stream, which is both faster and less memory intensive, specially for big objects.</p>\n\n<p>This method is provided for compatibility with custom backends which are not able to support streaming writes</p>\n","group":"odb","examples":{"general.c":["ex/v0.19.0/general.html#git_odb_write-34"]}},"git_odb_open_wstream":{"type":"function","file":"git2/odb.h","line":243,"lineto":243,"args":[{"name":"out","type":"git_odb_stream **","comment":"pointer where to store the stream"},{"name":"db","type":"git_odb *","comment":"object database where the stream will write"},{"name":"size","type":"size_t","comment":"final size of the object that will be written"},{"name":"type","type":"git_otype","comment":"type of the object that will be written"}],"argline":"git_odb_stream **out, git_odb *db, size_t size, git_otype type","sig":"git_odb_stream **::git_odb *::size_t::git_otype","return":{"type":"int","comment":" 0 if the stream was created; error code otherwise"},"description":"<p>Open a stream to write an object into the ODB</p>\n","comments":"<p>The type and final length of the object must be specified when opening the stream.</p>\n\n<p>The returned stream will be of type <code>GIT_STREAM_WRONLY</code> and will have the following methods:</p>\n\n<pre><code>    - stream-&gt;write: write `n` bytes into the stream        - stream-&gt;finalize_write: close the stream and store the object in          the odb     - stream-&gt;free: free the stream\n</code></pre>\n\n<p>The streaming write won&#39;t be effective until <code>stream-&gt;finalize_write</code> is called and returns without an error</p>\n\n<p>The stream must always be free&#39;d or will leak memory.</p>\n","group":"odb"},"git_odb_open_rstream":{"type":"function","file":"git2/odb.h","line":269,"lineto":269,"args":[{"name":"out","type":"git_odb_stream **","comment":"pointer where to store the stream"},{"name":"db","type":"git_odb *","comment":"object database where the stream will read from"},{"name":"oid","type":"const git_oid *","comment":"oid of the object the stream will read from"}],"argline":"git_odb_stream **out, git_odb *db, const git_oid *oid","sig":"git_odb_stream **::git_odb *::const git_oid *","return":{"type":"int","comment":" 0 if the stream was created; error code otherwise"},"description":"<p>Open a stream to read an object from the ODB</p>\n","comments":"<p>Note that most backends do <em>not</em> support streaming reads because they store their objects as compressed/delta&#39;ed blobs.</p>\n\n<p>It&#39;s recommended to use <code>git_odb_read</code> instead, which is assured to work on all backends.</p>\n\n<p>The returned stream will be of type <code>GIT_STREAM_RDONLY</code> and will have the following methods:</p>\n\n<pre><code>    - stream-&gt;read: read `n` bytes from the stream      - stream-&gt;free: free the stream\n</code></pre>\n\n<p>The stream must always be free&#39;d or will leak memory.</p>\n","group":"odb"},"git_odb_write_pack":{"type":"function","file":"git2/odb.h","line":289,"lineto":293,"args":[{"name":"out","type":"git_odb_writepack **","comment":"pointer to the writepack functions"},{"name":"db","type":"git_odb *","comment":"object database where the stream will read from"},{"name":"progress_cb","type":"git_transfer_progress_callback","comment":"function to call with progress information.\n Be aware that this is called inline with network and indexing operations,\n so performance may be affected."},{"name":"progress_payload","type":"void *","comment":"payload for the progress callback"}],"argline":"git_odb_writepack **out, git_odb *db, git_transfer_progress_callback progress_cb, void *progress_payload","sig":"git_odb_writepack **::git_odb *::git_transfer_progress_callback::void *","return":{"type":"int","comment":null},"description":"<p>Open a stream for writing a pack file to the ODB.</p>\n","comments":"<p>If the ODB layer understands pack files, then the given packfile will likely be streamed directly to disk (and a corresponding index created).  If the ODB layer does not understand pack files, the objects will be stored in whatever format the ODB layer uses.</p>\n","group":"odb"},"git_odb_hash":{"type":"function","file":"git2/odb.h","line":307,"lineto":307,"args":[{"name":"out","type":"git_oid *","comment":"the resulting object-ID."},{"name":"data","type":"const void *","comment":"data to hash"},{"name":"len","type":"size_t","comment":"size of the data"},{"name":"type","type":"git_otype","comment":"of the data to hash"}],"argline":"git_oid *out, const void *data, size_t len, git_otype type","sig":"git_oid *::const void *::size_t::git_otype","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Determine the object-ID (sha1 hash) of a data buffer</p>\n","comments":"<p>The resulting SHA-1 OID will be the identifier for the data buffer as if the data buffer it were to written to the ODB.</p>\n","group":"odb"},"git_odb_hashfile":{"type":"function","file":"git2/odb.h","line":322,"lineto":322,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"path","type":"const char *","comment":"file to read and determine object id for"},{"name":"type","type":"git_otype","comment":"the type of the object that will be hashed"}],"argline":"git_oid *out, const char *path, git_otype type","sig":"git_oid *::const char *::git_otype","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Read a file from disk and fill a git_oid with the object id\n that the file would have if it were written to the Object\n Database as an object of the given type (w/o applying filters).\n Similar functionality to git.git&#39;s <code>git hash-object</code> without\n the <code>-w</code> flag, however, with the --no-filters flag.\n If you need filters, see git_repository_hashfile.</p>\n","comments":"","group":"odb"},"git_odb_object_free":{"type":"function","file":"git2/odb.h","line":332,"lineto":332,"args":[{"name":"object","type":"git_odb_object *","comment":"object to close"}],"argline":"git_odb_object *object","sig":"git_odb_object *","return":{"type":"void","comment":null},"description":"<p>Close an ODB object</p>\n","comments":"<p>This method must always be called once a <code>git_odb_object</code> is no longer needed, otherwise memory will leak.</p>\n","group":"odb","examples":{"general.c":["ex/v0.19.0/general.html#git_odb_object_free-35"]}},"git_odb_object_id":{"type":"function","file":"git2/odb.h","line":342,"lineto":342,"args":[{"name":"object","type":"git_odb_object *","comment":"the object"}],"argline":"git_odb_object *object","sig":"git_odb_object *","return":{"type":"const git_oid *","comment":" a pointer to the OID"},"description":"<p>Return the OID of an ODB object</p>\n","comments":"<p>This is the OID from which the object was read from</p>\n","group":"odb"},"git_odb_object_data":{"type":"function","file":"git2/odb.h","line":355,"lineto":355,"args":[{"name":"object","type":"git_odb_object *","comment":"the object"}],"argline":"git_odb_object *object","sig":"git_odb_object *","return":{"type":"const void *","comment":" a pointer to the data"},"description":"<p>Return the data of an ODB object</p>\n","comments":"<p>This is the uncompressed, raw data as read from the ODB, without the leading header.</p>\n\n<p>This pointer is owned by the object and shall not be free&#39;d.</p>\n","group":"odb","examples":{"general.c":["ex/v0.19.0/general.html#git_odb_object_data-36"]}},"git_odb_object_size":{"type":"function","file":"git2/odb.h","line":366,"lineto":366,"args":[{"name":"object","type":"git_odb_object *","comment":"the object"}],"argline":"git_odb_object *object","sig":"git_odb_object *","return":{"type":"size_t","comment":" the size"},"description":"<p>Return the size of an ODB object</p>\n","comments":"<p>This is the real size of the <code>data</code> buffer, not the actual size of the object.</p>\n","group":"odb","examples":{"general.c":["ex/v0.19.0/general.html#git_odb_object_size-37"]}},"git_odb_object_type":{"type":"function","file":"git2/odb.h","line":374,"lineto":374,"args":[{"name":"object","type":"git_odb_object *","comment":"the object"}],"argline":"git_odb_object *object","sig":"git_odb_object *","return":{"type":"git_otype","comment":" the type"},"description":"<p>Return the type of an ODB object</p>\n","comments":"","group":"odb","examples":{"general.c":["ex/v0.19.0/general.html#git_odb_object_type-38"]}},"git_odb_add_backend":{"type":"function","file":"git2/odb.h","line":389,"lineto":389,"args":[{"name":"odb","type":"git_odb *","comment":"database to add the backend to"},{"name":"backend","type":"git_odb_backend *","comment":"pointer to a git_odb_backend instance"},{"name":"priority","type":"int","comment":"Value for ordering the backends queue"}],"argline":"git_odb *odb, git_odb_backend *backend, int priority","sig":"git_odb *::git_odb_backend *::int","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Add a custom backend to an existing Object DB</p>\n","comments":"<p>The backends are checked in relative ordering, based on the value of the <code>priority</code> parameter.</p>\n\n<p>Read <odb_backends.h> for more information.</p>\n","group":"odb"},"git_odb_add_alternate":{"type":"function","file":"git2/odb.h","line":410,"lineto":410,"args":[{"name":"odb","type":"git_odb *","comment":"database to add the backend to"},{"name":"backend","type":"git_odb_backend *","comment":"pointer to a git_odb_backend instance"},{"name":"priority","type":"int","comment":"Value for ordering the backends queue"}],"argline":"git_odb *odb, git_odb_backend *backend, int priority","sig":"git_odb *::git_odb_backend *::int","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Add a custom backend to an existing Object DB; this\n backend will work as an alternate.</p>\n","comments":"<p>Alternate backends are always checked for objects <em>after</em> all the main backends have been exhausted.</p>\n\n<p>The backends are checked in relative ordering, based on the value of the <code>priority</code> parameter.</p>\n\n<p>Writing is disabled on alternate backends.</p>\n\n<p>Read <odb_backends.h> for more information.</p>\n","group":"odb"},"git_odb_num_backends":{"type":"function","file":"git2/odb.h","line":418,"lineto":418,"args":[{"name":"odb","type":"git_odb *","comment":"object database"}],"argline":"git_odb *odb","sig":"git_odb *","return":{"type":"size_t","comment":" number of backends in the ODB"},"description":"<p>Get the number of ODB backend objects</p>\n","comments":"","group":"odb"},"git_odb_get_backend":{"type":"function","file":"git2/odb.h","line":428,"lineto":428,"args":[{"name":"out","type":"git_odb_backend **","comment":"output pointer to ODB backend at pos"},{"name":"odb","type":"git_odb *","comment":"object database"},{"name":"pos","type":"size_t","comment":"index into object database backend list"}],"argline":"git_odb_backend **out, git_odb *odb, size_t pos","sig":"git_odb_backend **::git_odb *::size_t","return":{"type":"int","comment":" 0 on success; GIT_ENOTFOUND if pos is invalid; other errors \n<\n 0"},"description":"<p>Lookup an ODB backend object by index</p>\n","comments":"","group":"odb"},"git_oid_fromstr":{"type":"function","file":"git2/oid.h","line":47,"lineto":47,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"str","type":"const char *","comment":"input hex string; must be pointing at the start of\n\t\tthe hex sequence and have at least the number of bytes\n\t\tneeded for an oid encoded in hex (40 bytes)."}],"argline":"git_oid *out, const char *str","sig":"git_oid *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Parse a hex formatted object id into a git_oid.</p>\n","comments":"","group":"oid","examples":{"general.c":["ex/v0.19.0/general.html#git_oid_fromstr-39","ex/v0.19.0/general.html#git_oid_fromstr-40","ex/v0.19.0/general.html#git_oid_fromstr-41","ex/v0.19.0/general.html#git_oid_fromstr-42","ex/v0.19.0/general.html#git_oid_fromstr-43","ex/v0.19.0/general.html#git_oid_fromstr-44","ex/v0.19.0/general.html#git_oid_fromstr-45","ex/v0.19.0/general.html#git_oid_fromstr-46"]}},"git_oid_fromstrp":{"type":"function","file":"git2/oid.h","line":57,"lineto":57,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"str","type":"const char *","comment":"input hex string; must be at least 4 characters\n      long and null-terminated."}],"argline":"git_oid *out, const char *str","sig":"git_oid *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Parse a hex formatted null-terminated string into a git_oid.</p>\n","comments":"","group":"oid"},"git_oid_fromstrn":{"type":"function","file":"git2/oid.h","line":70,"lineto":70,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"str","type":"const char *","comment":"input hex string of at least size `length`"},{"name":"length","type":"size_t","comment":"length of the input string"}],"argline":"git_oid *out, const char *str, size_t length","sig":"git_oid *::const char *::size_t","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Parse N characters of a hex formatted object id into a git_oid</p>\n","comments":"<p>If N is odd, N-1 characters will be parsed instead. The remaining space in the git_oid will be set to zero.</p>\n","group":"oid"},"git_oid_fromraw":{"type":"function","file":"git2/oid.h","line":78,"lineto":78,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"raw","type":"const unsigned char *","comment":"the raw input bytes to be copied."}],"argline":"git_oid *out, const unsigned char *raw","sig":"git_oid *::const unsigned char *","return":{"type":"void","comment":null},"description":"<p>Copy an already raw oid into a git_oid structure.</p>\n","comments":"","group":"oid"},"git_oid_fmt":{"type":"function","file":"git2/oid.h","line":90,"lineto":90,"args":[{"name":"out","type":"char *","comment":"output hex string; must be pointing at the start of\n\t\tthe hex sequence and have at least the number of bytes\n\t\tneeded for an oid encoded in hex (40 bytes). Only the\n\t\toid digits are written; a '\n\\\n0' terminator must be added\n\t\tby the caller if it is required."},{"name":"id","type":"const git_oid *","comment":"oid structure to format."}],"argline":"char *out, const git_oid *id","sig":"char *::const git_oid *","return":{"type":"void","comment":null},"description":"<p>Format a git_oid into a hex string.</p>\n","comments":"","group":"oid","examples":{"general.c":["ex/v0.19.0/general.html#git_oid_fmt-47","ex/v0.19.0/general.html#git_oid_fmt-48","ex/v0.19.0/general.html#git_oid_fmt-49","ex/v0.19.0/general.html#git_oid_fmt-50","ex/v0.19.0/general.html#git_oid_fmt-51"],"network/fetch.c":["ex/v0.19.0/network/fetch.html#git_oid_fmt-1","ex/v0.19.0/network/fetch.html#git_oid_fmt-2"],"network/index-pack.c":["ex/v0.19.0/network/index-pack.html#git_oid_fmt-6"],"network/ls-remote.c":["ex/v0.19.0/network/ls-remote.html#git_oid_fmt-1"]}},"git_oid_nfmt":{"type":"function","file":"git2/oid.h","line":101,"lineto":101,"args":[{"name":"out","type":"char *","comment":"output hex string; you say how many bytes to write.\n\t\tIf the number of bytes is > GIT_OID_HEXSZ, extra bytes\n\t\twill be zeroed; if not, a '\n\\\n0' terminator is NOT added."},{"name":"n","type":"size_t","comment":"number of characters to write into out string"},{"name":"id","type":"const git_oid *","comment":"oid structure to format."}],"argline":"char *out, size_t n, const git_oid *id","sig":"char *::size_t::const git_oid *","return":{"type":"void","comment":null},"description":"<p>Format a git_oid into a partial hex string.</p>\n","comments":"","group":"oid"},"git_oid_pathfmt":{"type":"function","file":"git2/oid.h","line":116,"lineto":116,"args":[{"name":"out","type":"char *","comment":"output hex string; must be pointing at the start of\n\t\tthe hex sequence and have at least the number of bytes\n\t\tneeded for an oid encoded in hex (41 bytes). Only the\n\t\toid digits are written; a '\n\\\n0' terminator must be added\n\t\tby the caller if it is required."},{"name":"id","type":"const git_oid *","comment":"oid structure to format."}],"argline":"char *out, const git_oid *id","sig":"char *::const git_oid *","return":{"type":"void","comment":null},"description":"<p>Format a git_oid into a loose-object path string.</p>\n","comments":"<p>The resulting string is &quot;aa/...&quot;, where &quot;aa&quot; is the first two hex digits of the oid and &quot;...&quot; is the remaining 38 digits.</p>\n","group":"oid"},"git_oid_allocfmt":{"type":"function","file":"git2/oid.h","line":125,"lineto":125,"args":[{"name":"id","type":"const git_oid *","comment":"the oid structure to format"}],"argline":"const git_oid *id","sig":"const git_oid *","return":{"type":"char *","comment":" the c-string; NULL if memory is exhausted. Caller must\n\t\t\tdeallocate the string with git__free()."},"description":"<p>Format a git_oid into a newly allocated c-string.</p>\n","comments":"","group":"oid"},"git_oid_tostr":{"type":"function","file":"git2/oid.h","line":144,"lineto":144,"args":[{"name":"out","type":"char *","comment":"the buffer into which the oid string is output."},{"name":"n","type":"size_t","comment":"the size of the out buffer."},{"name":"id","type":"const git_oid *","comment":"the oid structure to format."}],"argline":"char *out, size_t n, const git_oid *id","sig":"char *::size_t::const git_oid *","return":{"type":"char *","comment":" the out buffer pointer, assuming no input parameter\n\t\t\terrors, otherwise a pointer to an empty string."},"description":"<p>Format a git_oid into a buffer as a hex format c-string.</p>\n","comments":"<p>If the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting oid c-string will be truncated to n-1 characters (but will still be NUL-byte terminated).</p>\n\n<p>If there are any input parameter errors (out == NULL, n == 0, oid == NULL), then a pointer to an empty string is returned, so that the return value can always be printed.</p>\n","group":"oid"},"git_oid_cpy":{"type":"function","file":"git2/oid.h","line":152,"lineto":152,"args":[{"name":"out","type":"git_oid *","comment":"oid structure the result is written into."},{"name":"src","type":"const git_oid *","comment":"oid structure to copy from."}],"argline":"git_oid *out, const git_oid *src","sig":"git_oid *::const git_oid *","return":{"type":"void","comment":null},"description":"<p>Copy an oid from one structure to another.</p>\n","comments":"","group":"oid"},"git_oid_cmp":{"type":"function","file":"git2/oid.h","line":161,"lineto":161,"args":[{"name":"a","type":"const git_oid *","comment":"first oid structure."},{"name":"b","type":"const git_oid *","comment":"second oid structure."}],"argline":"const git_oid *a, const git_oid *b","sig":"const git_oid *::const git_oid *","return":{"type":"int","comment":" \n<\n0, 0, >0 if a \n<\n b, a == b, a > b."},"description":"<p>Compare two oid structures.</p>\n","comments":"","group":"oid"},"git_oid_equal":{"type":"function","file":"git2/oid.h","line":170,"lineto":173,"args":[{"name":"a","type":"const git_oid *","comment":"first oid structure."},{"name":"b","type":"const git_oid *","comment":"second oid structure."}],"argline":"const git_oid *a, const git_oid *b","sig":"const git_oid *::const git_oid *","return":{"type":"int","comment":" true if equal, false otherwise"},"description":"<p>Compare two oid structures for equality</p>\n","comments":"","group":"oid"},"git_oid_ncmp":{"type":"function","file":"git2/oid.h","line":184,"lineto":184,"args":[{"name":"a","type":"const git_oid *","comment":"first oid structure."},{"name":"b","type":"const git_oid *","comment":"second oid structure."},{"name":"len","type":"size_t","comment":"the number of hex chars to compare"}],"argline":"const git_oid *a, const git_oid *b, size_t len","sig":"const git_oid *::const git_oid *::size_t","return":{"type":"int","comment":" 0 in case of a match"},"description":"<p>Compare the first &#39;len&#39; hexadecimal characters (packets of 4 bits)\n of two oid structures.</p>\n","comments":"","group":"oid"},"git_oid_streq":{"type":"function","file":"git2/oid.h","line":194,"lineto":194,"args":[{"name":"id","type":"const git_oid *","comment":"oid structure."},{"name":"str","type":"const char *","comment":"input hex string of an object id."}],"argline":"const git_oid *id, const char *str","sig":"const git_oid *::const char *","return":{"type":"int","comment":" GIT_ENOTOID if str is not a valid hex string,\n 0 in case of a match, GIT_ERROR otherwise."},"description":"<p>Check if an oid equals an hex formatted object id.</p>\n","comments":"","group":"oid"},"git_oid_strcmp":{"type":"function","file":"git2/oid.h","line":204,"lineto":204,"args":[{"name":"id","type":"const git_oid *","comment":"oid structure."},{"name":"str","type":"const char *","comment":"input hex string of an object id."}],"argline":"const git_oid *id, const char *str","sig":"const git_oid *::const char *","return":{"type":"int","comment":" -1 if str is not valid, \n<\n0 if id sorts before str,\n         0 if id matches str, >0 if id sorts after str."},"description":"<p>Compare an oid to an hex formatted object id.</p>\n","comments":"","group":"oid"},"git_oid_iszero":{"type":"function","file":"git2/oid.h","line":211,"lineto":211,"args":[{"name":"id","type":"const git_oid *","comment":null}],"argline":"const git_oid *id","sig":"const git_oid *","return":{"type":"int","comment":" 1 if all zeros, 0 otherwise."},"description":"<p>Check is an oid is all zeros.</p>\n","comments":"","group":"oid","examples":{"network/fetch.c":["ex/v0.19.0/network/fetch.html#git_oid_iszero-3"]}},"git_oid_shorten_new":{"type":"function","file":"git2/oid.h","line":232,"lineto":232,"args":[{"name":"min_length","type":"size_t","comment":"The minimal length for all identifiers,\n\t\twhich will be used even if shorter OIDs would still\n\t\tbe unique."}],"argline":"size_t min_length","sig":"size_t","return":{"type":"git_oid_shorten *","comment":" a `git_oid_shorten` instance, NULL if OOM"},"description":"<p>Create a new OID shortener.</p>\n","comments":"<p>The OID shortener is used to process a list of OIDs in text form and return the shortest length that would uniquely identify all of them.</p>\n\n<p>E.g. look at the result of <code>git log --abbrev</code>.</p>\n","group":"oid"},"git_oid_shorten_add":{"type":"function","file":"git2/oid.h","line":258,"lineto":258,"args":[{"name":"os","type":"git_oid_shorten *","comment":"a `git_oid_shorten` instance"},{"name":"text_id","type":"const char *","comment":"an OID in text form"}],"argline":"git_oid_shorten *os, const char *text_id","sig":"git_oid_shorten *::const char *","return":{"type":"int","comment":" the minimal length to uniquely identify all OIDs\n\t\tadded so far to the set; or an error code (\n<\n0) if an\n\t\terror occurs."},"description":"<p>Add a new OID to set of shortened OIDs and calculate\n the minimal length to uniquely identify all the OIDs in\n the set.</p>\n","comments":"<p>The OID is expected to be a 40-char hexadecimal string. The OID is owned by the user and will not be modified or freed.</p>\n\n<p>For performance reasons, there is a hard-limit of how many OIDs can be added to a single set (around ~22000, assuming a mostly randomized distribution), which should be enough for any kind of program, and keeps the algorithm fast and memory-efficient.</p>\n\n<p>Attempting to add more than those OIDs will result in a GIT_ENOMEM error</p>\n","group":"oid"},"git_oid_shorten_free":{"type":"function","file":"git2/oid.h","line":265,"lineto":265,"args":[{"name":"os","type":"git_oid_shorten *","comment":"a `git_oid_shorten` instance"}],"argline":"git_oid_shorten *os","sig":"git_oid_shorten *","return":{"type":"void","comment":null},"description":"<p>Free an OID shortener instance</p>\n","comments":"","group":"oid"},"git_packbuilder_new":{"type":"function","file":"git2/pack.h","line":56,"lineto":56,"args":[{"name":"out","type":"git_packbuilder **","comment":"The new packbuilder object"},{"name":"repo","type":"git_repository *","comment":"The repository"}],"argline":"git_packbuilder **out, git_repository *repo","sig":"git_packbuilder **::git_repository *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Initialize a new packbuilder</p>\n","comments":"","group":"packbuilder"},"git_packbuilder_set_threads":{"type":"function","file":"git2/pack.h","line":69,"lineto":69,"args":[{"name":"pb","type":"git_packbuilder *","comment":"The packbuilder"},{"name":"n","type":"unsigned int","comment":"Number of threads to spawn"}],"argline":"git_packbuilder *pb, unsigned int n","sig":"git_packbuilder *::unsigned int","return":{"type":"unsigned int","comment":" number of actual threads to be used"},"description":"<p>Set number of threads to spawn</p>\n","comments":"<p>By default, libgit2 won&#39;t spawn any threads at all; when set to 0, libgit2 will autodetect the number of CPUs.</p>\n","group":"packbuilder"},"git_packbuilder_insert":{"type":"function","file":"git2/pack.h","line":83,"lineto":83,"args":[{"name":"pb","type":"git_packbuilder *","comment":"The packbuilder"},{"name":"id","type":"const git_oid *","comment":"The oid of the commit"},{"name":"name","type":"const char *","comment":"The name; might be NULL"}],"argline":"git_packbuilder *pb, const git_oid *id, const char *name","sig":"git_packbuilder *::const git_oid *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Insert a single object</p>\n","comments":"<p>For an optimal pack it&#39;s mandatory to insert objects in recency order, commits followed by trees and blobs.</p>\n","group":"packbuilder"},"git_packbuilder_insert_tree":{"type":"function","file":"git2/pack.h","line":95,"lineto":95,"args":[{"name":"pb","type":"git_packbuilder *","comment":"The packbuilder"},{"name":"id","type":"const git_oid *","comment":"The oid of the root tree"}],"argline":"git_packbuilder *pb, const git_oid *id","sig":"git_packbuilder *::const git_oid *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Insert a root tree object</p>\n","comments":"<p>This will add the tree as well as all referenced trees and blobs.</p>\n","group":"packbuilder"},"git_packbuilder_insert_commit":{"type":"function","file":"git2/pack.h","line":107,"lineto":107,"args":[{"name":"pb","type":"git_packbuilder *","comment":"The packbuilder"},{"name":"id","type":"const git_oid *","comment":"The oid of the commit"}],"argline":"git_packbuilder *pb, const git_oid *id","sig":"git_packbuilder *::const git_oid *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Insert a commit object</p>\n","comments":"<p>This will add a commit as well as the completed referenced tree.</p>\n","group":"packbuilder"},"git_packbuilder_write":{"type":"function","file":"git2/pack.h","line":119,"lineto":123,"args":[{"name":"pb","type":"git_packbuilder *","comment":"The packbuilder"},{"name":"path","type":"const char *","comment":"to the directory where the packfile and index should be stored"},{"name":"progress_cb","type":"git_transfer_progress_callback","comment":"function to call with progress information from the indexer (optional)"},{"name":"progress_cb_payload","type":"void *","comment":"payload for the progress callback (optional)"}],"argline":"git_packbuilder *pb, const char *path, git_transfer_progress_callback progress_cb, void *progress_cb_payload","sig":"git_packbuilder *::const char *::git_transfer_progress_callback::void *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Write the new pack and corresponding index file to path.</p>\n","comments":"","group":"packbuilder"},"git_packbuilder_foreach":{"type":"function","file":"git2/pack.h","line":134,"lineto":134,"args":[{"name":"pb","type":"git_packbuilder *","comment":"the packbuilder"},{"name":"cb","type":"git_packbuilder_foreach_cb","comment":"the callback to call with each packed object's buffer"},{"name":"payload","type":"void *","comment":"the callback's data"}],"argline":"git_packbuilder *pb, git_packbuilder_foreach_cb cb, void *payload","sig":"git_packbuilder *::git_packbuilder_foreach_cb::void *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create the new pack and pass each object to the callback</p>\n","comments":"","group":"packbuilder"},"git_packbuilder_object_count":{"type":"function","file":"git2/pack.h","line":142,"lineto":142,"args":[{"name":"pb","type":"git_packbuilder *","comment":"the packbuilder"}],"argline":"git_packbuilder *pb","sig":"git_packbuilder *","return":{"type":"uint32_t","comment":""},"description":"<p>Get the total number of objects the packbuilder will write out</p>\n","comments":"","group":"packbuilder"},"git_packbuilder_written":{"type":"function","file":"git2/pack.h","line":150,"lineto":150,"args":[{"name":"pb","type":"git_packbuilder *","comment":"the packbuilder"}],"argline":"git_packbuilder *pb","sig":"git_packbuilder *","return":{"type":"uint32_t","comment":""},"description":"<p>Get the number of objects the packbuilder has already written out</p>\n","comments":"","group":"packbuilder"},"git_packbuilder_free":{"type":"function","file":"git2/pack.h","line":157,"lineto":157,"args":[{"name":"pb","type":"git_packbuilder *","comment":"The packbuilder"}],"argline":"git_packbuilder *pb","sig":"git_packbuilder *","return":{"type":"void","comment":null},"description":"<p>Free the packbuilder and all associated data</p>\n","comments":"","group":"packbuilder"},"git_refdb_new":{"type":"function","file":"git2/refdb.h","line":35,"lineto":35,"args":[{"name":"out","type":"git_refdb **","comment":"location to store the database pointer, if opened.\n\t\t\tSet to NULL if the open failed."},{"name":"repo","type":"git_repository *","comment":"the repository"}],"argline":"git_refdb **out, git_repository *repo","sig":"git_refdb **::git_repository *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create a new reference database with no backends.</p>\n","comments":"<p>Before the Ref DB can be used for read/writing, a custom database backend must be manually set using <code>git_refdb_set_backend()</code></p>\n","group":"refdb"},"git_refdb_open":{"type":"function","file":"git2/refdb.h","line":49,"lineto":49,"args":[{"name":"out","type":"git_refdb **","comment":"location to store the database pointer, if opened.\n\t\t\tSet to NULL if the open failed."},{"name":"repo","type":"git_repository *","comment":"the repository"}],"argline":"git_refdb **out, git_repository *repo","sig":"git_refdb **::git_repository *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create a new reference database and automatically add\n the default backends:</p>\n","comments":"<ul>\n<li>git_refdb_dir: read and write loose and packed refs      from disk, assuming the repository dir as the folder</li>\n</ul>\n","group":"refdb"},"git_refdb_compress":{"type":"function","file":"git2/refdb.h","line":56,"lineto":56,"args":[{"name":"refdb","type":"git_refdb *","comment":null}],"argline":"git_refdb *refdb","sig":"git_refdb *","return":{"type":"int","comment":null},"description":"<p>Suggests that the given refdb compress or optimize its references.\n This mechanism is implementation specific.  For on-disk reference\n databases, for example, this may pack all loose references.</p>\n","comments":"","group":"refdb"},"git_refdb_free":{"type":"function","file":"git2/refdb.h","line":63,"lineto":63,"args":[{"name":"refdb","type":"git_refdb *","comment":"reference database pointer or NULL"}],"argline":"git_refdb *refdb","sig":"git_refdb *","return":{"type":"void","comment":null},"description":"<p>Close an open reference database.</p>\n","comments":"","group":"refdb"},"git_reflog_read":{"type":"function","file":"git2/reflog.h","line":37,"lineto":37,"args":[{"name":"out","type":"git_reflog **","comment":"pointer to reflog"},{"name":"ref","type":"const git_reference *","comment":"reference to read the reflog for"}],"argline":"git_reflog **out, const git_reference *ref","sig":"git_reflog **::const git_reference *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Read the reflog for the given reference</p>\n","comments":"<p>If there is no reflog file for the given reference yet, an empty reflog object will be returned.</p>\n\n<p>The reflog must be freed manually by using git_reflog_free().</p>\n","group":"reflog"},"git_reflog_write":{"type":"function","file":"git2/reflog.h","line":46,"lineto":46,"args":[{"name":"reflog","type":"git_reflog *","comment":"an existing reflog object"}],"argline":"git_reflog *reflog","sig":"git_reflog *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Write an existing in-memory reflog object back to disk\n using an atomic file lock.</p>\n","comments":"","group":"reflog"},"git_reflog_append":{"type":"function","file":"git2/reflog.h","line":59,"lineto":59,"args":[{"name":"reflog","type":"git_reflog *","comment":"an existing reflog object"},{"name":"id","type":"const git_oid *","comment":"the OID the reference is now pointing to"},{"name":"committer","type":"const git_signature *","comment":"the signature of the committer"},{"name":"msg","type":"const char *","comment":"the reflog message"}],"argline":"git_reflog *reflog, const git_oid *id, const git_signature *committer, const char *msg","sig":"git_reflog *::const git_oid *::const git_signature *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Add a new entry to the reflog.</p>\n","comments":"<p><code>msg</code> is optional and can be NULL.</p>\n","group":"reflog"},"git_reflog_rename":{"type":"function","file":"git2/reflog.h","line":73,"lineto":73,"args":[{"name":"ref","type":"git_reference *","comment":"the reference"},{"name":"name","type":"const char *","comment":"the new name of the reference"}],"argline":"git_reference *ref, const char *name","sig":"git_reference *::const char *","return":{"type":"int","comment":" 0 on success, GIT_EINVALIDSPEC or an error code"},"description":"<p>Rename the reflog for the given reference</p>\n","comments":"<p>The reflog to be renamed is expected to already exist</p>\n\n<p>The new name will be checked for validity. See <code>git_reference_create_symbolic()</code> for rules about valid names.</p>\n","group":"reflog"},"git_reflog_delete":{"type":"function","file":"git2/reflog.h","line":81,"lineto":81,"args":[{"name":"ref","type":"git_reference *","comment":"the reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Delete the reflog for the given reference</p>\n","comments":"","group":"reflog"},"git_reflog_entrycount":{"type":"function","file":"git2/reflog.h","line":89,"lineto":89,"args":[{"name":"reflog","type":"git_reflog *","comment":"the previously loaded reflog"}],"argline":"git_reflog *reflog","sig":"git_reflog *","return":{"type":"size_t","comment":" the number of log entries"},"description":"<p>Get the number of log entries in a reflog</p>\n","comments":"","group":"reflog"},"git_reflog_entry_byindex":{"type":"function","file":"git2/reflog.h","line":102,"lineto":102,"args":[{"name":"reflog","type":"git_reflog *","comment":"a previously loaded reflog"},{"name":"idx","type":"size_t","comment":"the position of the entry to lookup. Should be greater than or\n equal to 0 (zero) and less than `git_reflog_entrycount()`."}],"argline":"git_reflog *reflog, size_t idx","sig":"git_reflog *::size_t","return":{"type":"const git_reflog_entry *","comment":" the entry; NULL if not found"},"description":"<p>Lookup an entry by its index</p>\n","comments":"<p>Requesting the reflog entry with an index of 0 (zero) will return the most recently created entry.</p>\n","group":"reflog"},"git_reflog_drop":{"type":"function","file":"git2/reflog.h","line":121,"lineto":124,"args":[{"name":"reflog","type":"git_reflog *","comment":"a previously loaded reflog."},{"name":"idx","type":"size_t","comment":"the position of the entry to remove. Should be greater than or\n equal to 0 (zero) and less than `git_reflog_entrycount()`."},{"name":"rewrite_previous_entry","type":"int","comment":"1 to rewrite the history; 0 otherwise."}],"argline":"git_reflog *reflog, size_t idx, int rewrite_previous_entry","sig":"git_reflog *::size_t::int","return":{"type":"int","comment":" 0 on success, GIT_ENOTFOUND if the entry doesn't exist\n or an error code."},"description":"<p>Remove an entry from the reflog by its index</p>\n","comments":"<p>To ensure there&#39;s no gap in the log history, set <code>rewrite_previous_entry</code> param value to 1. When deleting entry <code>n</code>, member old_oid of entry <code>n-1</code> (if any) will be updated with the value of member new_oid of entry <code>n+1</code>.</p>\n","group":"reflog"},"git_reflog_entry_id_old":{"type":"function","file":"git2/reflog.h","line":132,"lineto":132,"args":[{"name":"entry","type":"const git_reflog_entry *","comment":"a reflog entry"}],"argline":"const git_reflog_entry *entry","sig":"const git_reflog_entry *","return":{"type":"const git_oid *","comment":" the old oid"},"description":"<p>Get the old oid</p>\n","comments":"","group":"reflog"},"git_reflog_entry_id_new":{"type":"function","file":"git2/reflog.h","line":140,"lineto":140,"args":[{"name":"entry","type":"const git_reflog_entry *","comment":"a reflog entry"}],"argline":"const git_reflog_entry *entry","sig":"const git_reflog_entry *","return":{"type":"const git_oid *","comment":" the new oid at this time"},"description":"<p>Get the new oid</p>\n","comments":"","group":"reflog"},"git_reflog_entry_committer":{"type":"function","file":"git2/reflog.h","line":148,"lineto":148,"args":[{"name":"entry","type":"const git_reflog_entry *","comment":"a reflog entry"}],"argline":"const git_reflog_entry *entry","sig":"const git_reflog_entry *","return":{"type":"const git_signature *","comment":" the committer"},"description":"<p>Get the committer of this entry</p>\n","comments":"","group":"reflog"},"git_reflog_entry_message":{"type":"function","file":"git2/reflog.h","line":156,"lineto":156,"args":[{"name":"entry","type":"const git_reflog_entry *","comment":"a reflog entry"}],"argline":"const git_reflog_entry *entry","sig":"const git_reflog_entry *","return":{"type":"const char *","comment":" the log msg"},"description":"<p>Get the log message</p>\n","comments":"","group":"reflog"},"git_reflog_free":{"type":"function","file":"git2/reflog.h","line":163,"lineto":163,"args":[{"name":"reflog","type":"git_reflog *","comment":"reflog to free"}],"argline":"git_reflog *reflog","sig":"git_reflog *","return":{"type":"void","comment":null},"description":"<p>Free the reflog</p>\n","comments":"","group":"reflog"},"git_reference_lookup":{"type":"function","file":"git2/refs.h","line":37,"lineto":37,"args":[{"name":"out","type":"git_reference **","comment":"pointer to the looked-up reference"},{"name":"repo","type":"git_repository *","comment":"the repository to look up the reference"},{"name":"name","type":"const char *","comment":"the long name for the reference (e.g. HEAD, refs/heads/master, refs/tags/v0.1.0, ...)"}],"argline":"git_reference **out, git_repository *repo, const char *name","sig":"git_reference **::git_repository *::const char *","return":{"type":"int","comment":" 0 on success, ENOTFOUND, EINVALIDSPEC or an error code."},"description":"<p>Lookup a reference by name in a repository.</p>\n","comments":"<p>The returned reference must be freed by the user.</p>\n\n<p>The name will be checked for validity. See <code>git_reference_create_symbolic()</code> for rules about valid names.</p>\n","group":"reference","examples":{"general.c":["ex/v0.19.0/general.html#git_reference_lookup-52"]}},"git_reference_name_to_id":{"type":"function","file":"git2/refs.h","line":54,"lineto":55,"args":[{"name":"out","type":"git_oid *","comment":"Pointer to oid to be filled in"},{"name":"repo","type":"git_repository *","comment":"The repository in which to look up the reference"},{"name":"name","type":"const char *","comment":"The long name for the reference (e.g. HEAD, refs/heads/master, refs/tags/v0.1.0, ...)"}],"argline":"git_oid *out, git_repository *repo, const char *name","sig":"git_oid *::git_repository *::const char *","return":{"type":"int","comment":" 0 on success, ENOTFOUND, EINVALIDSPEC or an error code."},"description":"<p>Lookup a reference by name and resolve immediately to OID.</p>\n","comments":"<p>This function provides a quick way to resolve a reference name straight through to the object id that it refers to.  This avoids having to allocate or free any <code>git_reference</code> objects for simple situations.</p>\n\n<p>The name will be checked for validity. See <code>git_reference_symbolic_create()</code> for rules about valid names.</p>\n","group":"reference"},"git_reference_dwim":{"type":"function","file":"git2/refs.h","line":68,"lineto":68,"args":[{"name":"out","type":"git_reference **","comment":"pointer in which to store the reference"},{"name":"repo","type":"git_repository *","comment":"the repository in which to look"},{"name":"shorthand","type":"const char *","comment":"the short name for the reference"}],"argline":"git_reference **out, git_repository *repo, const char *shorthand","sig":"git_reference **::git_repository *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Lookup a reference by DWIMing its short name</p>\n","comments":"<p>Apply the git precendence rules to the given shorthand to determine which reference the user is refering to.</p>\n","group":"reference"},"git_reference_symbolic_create":{"type":"function","file":"git2/refs.h","line":99,"lineto":99,"args":[{"name":"out","type":"git_reference **","comment":"Pointer to the newly created reference"},{"name":"repo","type":"git_repository *","comment":"Repository where that reference will live"},{"name":"name","type":"const char *","comment":"The name of the reference"},{"name":"target","type":"const char *","comment":"The target of the reference"},{"name":"force","type":"int","comment":"Overwrite existing references"}],"argline":"git_reference **out, git_repository *repo, const char *name, const char *target, int force","sig":"git_reference **::git_repository *::const char *::const char *::int","return":{"type":"int","comment":" 0 on success, EEXISTS, EINVALIDSPEC or an error code"},"description":"<p>Create a new symbolic reference.</p>\n","comments":"<p>A symbolic reference is a reference name that refers to another reference name.  If the other name moves, the symbolic name will move, too.  As a simple example, the &quot;HEAD&quot; reference might refer to &quot;refs/heads/master&quot; while on the &quot;master&quot; branch of a repository.</p>\n\n<p>The symbolic reference will be created in the repository and written to the disk.  The generated reference object must be freed by the user.</p>\n\n<p>Valid reference names must follow one of two patterns:</p>\n\n<ol>\n<li>Top-level names must contain only capital letters and underscores,    and must begin and end with a letter. (e.g. &quot;HEAD&quot;, &quot;ORIG_HEAD&quot;). 2. Names prefixed with &quot;refs/&quot; can be almost anything.  You must avoid    the characters &#39;~&#39;, &#39;^&#39;, &#39;:&#39;, &#39;\\&#39;, &#39;?&#39;, &#39;[&#39;, and &#39;*&#39;, and the    sequences &quot;..&quot; and &quot;@{&quot; which have special meaning to revparse.</li>\n</ol>\n\n<p>This function will return an error if a reference already exists with the given name unless <code>force</code> is true, in which case it will be overwritten.</p>\n","group":"reference"},"git_reference_create":{"type":"function","file":"git2/refs.h","line":131,"lineto":131,"args":[{"name":"out","type":"git_reference **","comment":"Pointer to the newly created reference"},{"name":"repo","type":"git_repository *","comment":"Repository where that reference will live"},{"name":"name","type":"const char *","comment":"The name of the reference"},{"name":"id","type":"const git_oid *","comment":"The object id pointed to by the reference."},{"name":"force","type":"int","comment":"Overwrite existing references"}],"argline":"git_reference **out, git_repository *repo, const char *name, const git_oid *id, int force","sig":"git_reference **::git_repository *::const char *::const git_oid *::int","return":{"type":"int","comment":" 0 on success, EEXISTS, EINVALIDSPEC or an error code"},"description":"<p>Create a new direct reference.</p>\n","comments":"<p>A direct reference (also called an object id reference) refers directly to a specific object id (a.k.a. OID or SHA) in the repository.  The id permanently refers to the object (although the reference itself can be moved).  For example, in libgit2 the direct ref &quot;refs/tags/v0.17.0&quot; refers to OID 5b9fac39d8a76b9139667c26a63e6b3f204b3977.</p>\n\n<p>The direct reference will be created in the repository and written to the disk.  The generated reference object must be freed by the user.</p>\n\n<p>Valid reference names must follow one of two patterns:</p>\n\n<ol>\n<li>Top-level names must contain only capital letters and underscores,    and must begin and end with a letter. (e.g. &quot;HEAD&quot;, &quot;ORIG_HEAD&quot;). 2. Names prefixed with &quot;refs/&quot; can be almost anything.  You must avoid    the characters &#39;~&#39;, &#39;^&#39;, &#39;:&#39;, &#39;\\&#39;, &#39;?&#39;, &#39;[&#39;, and &#39;*&#39;, and the    sequences &quot;..&quot; and &quot;@{&quot; which have special meaning to revparse.</li>\n</ol>\n\n<p>This function will return an error if a reference already exists with the given name unless <code>force</code> is true, in which case it will be overwritten.</p>\n","group":"reference"},"git_reference_target":{"type":"function","file":"git2/refs.h","line":146,"lineto":146,"args":[{"name":"ref","type":"const git_reference *","comment":"The reference"}],"argline":"const git_reference *ref","sig":"const git_reference *","return":{"type":"const git_oid *","comment":" a pointer to the oid if available, NULL otherwise"},"description":"<p>Get the OID pointed to by a direct reference.</p>\n","comments":"<p>Only available if the reference is direct (i.e. an object id reference, not a symbolic one).</p>\n\n<p>To find the OID of a symbolic ref, call <code>git_reference_resolve()</code> and then this function (or maybe use <code>git_reference_name_to_id()</code> to directly resolve a reference name all the way through to an OID).</p>\n","group":"reference","examples":{"general.c":["ex/v0.19.0/general.html#git_reference_target-53"]}},"git_reference_target_peel":{"type":"function","file":"git2/refs.h","line":157,"lineto":157,"args":[{"name":"ref","type":"const git_reference *","comment":"The reference"}],"argline":"const git_reference *ref","sig":"const git_reference *","return":{"type":"const git_oid *","comment":" a pointer to the oid if available, NULL otherwise"},"description":"<p>Return the peeled OID target of this reference.</p>\n","comments":"<p>This peeled OID only applies to direct references that point to a hard Tag object: it is the result of peeling such Tag.</p>\n","group":"reference"},"git_reference_symbolic_target":{"type":"function","file":"git2/refs.h","line":167,"lineto":167,"args":[{"name":"ref","type":"const git_reference *","comment":"The reference"}],"argline":"const git_reference *ref","sig":"const git_reference *","return":{"type":"const char *","comment":" a pointer to the name if available, NULL otherwise"},"description":"<p>Get full name to the reference pointed to by a symbolic reference.</p>\n","comments":"<p>Only available if the reference is symbolic.</p>\n","group":"reference","examples":{"general.c":["ex/v0.19.0/general.html#git_reference_symbolic_target-54"]}},"git_reference_type":{"type":"function","file":"git2/refs.h","line":177,"lineto":177,"args":[{"name":"ref","type":"const git_reference *","comment":"The reference"}],"argline":"const git_reference *ref","sig":"const git_reference *","return":{"type":"git_ref_t","comment":" the type"},"description":"<p>Get the type of a reference.</p>\n","comments":"<p>Either direct (GIT_REF_OID) or symbolic (GIT_REF_SYMBOLIC)</p>\n","group":"reference","examples":{"general.c":["ex/v0.19.0/general.html#git_reference_type-55"]}},"git_reference_name":{"type":"function","file":"git2/refs.h","line":187,"lineto":187,"args":[{"name":"ref","type":"const git_reference *","comment":"The reference"}],"argline":"const git_reference *ref","sig":"const git_reference *","return":{"type":"const char *","comment":" the full name for the ref"},"description":"<p>Get the full name of a reference.</p>\n","comments":"<p>See <code>git_reference_create_symbolic()</code> for rules about valid names.</p>\n","group":"reference"},"git_reference_resolve":{"type":"function","file":"git2/refs.h","line":205,"lineto":205,"args":[{"name":"out","type":"git_reference **","comment":"Pointer to the peeled reference"},{"name":"ref","type":"const git_reference *","comment":"The reference"}],"argline":"git_reference **out, const git_reference *ref","sig":"git_reference **::const git_reference *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Resolve a symbolic reference to a direct reference.</p>\n","comments":"<p>This method iteratively peels a symbolic reference until it resolves to a direct reference to an OID.</p>\n\n<p>The peeled reference is returned in the <code>resolved_ref</code> argument, and must be freed manually once it&#39;s no longer needed.</p>\n\n<p>If a direct reference is passed as an argument, a copy of that reference is returned. This copy must be manually freed too.</p>\n","group":"reference"},"git_reference_owner":{"type":"function","file":"git2/refs.h","line":213,"lineto":213,"args":[{"name":"ref","type":"const git_reference *","comment":"The reference"}],"argline":"const git_reference *ref","sig":"const git_reference *","return":{"type":"git_repository *","comment":" a pointer to the repo"},"description":"<p>Get the repository where a reference resides.</p>\n","comments":"","group":"reference"},"git_reference_symbolic_set_target":{"type":"function","file":"git2/refs.h","line":230,"lineto":233,"args":[{"name":"out","type":"git_reference **","comment":"Pointer to the newly created reference"},{"name":"ref","type":"git_reference *","comment":"The reference"},{"name":"target","type":"const char *","comment":"The new target for the reference"}],"argline":"git_reference **out, git_reference *ref, const char *target","sig":"git_reference **::git_reference *::const char *","return":{"type":"int","comment":" 0 on success, EINVALIDSPEC or an error code"},"description":"<p>Create a new reference with the same name as the given reference but a\n different symbolic target. The reference must be a symbolic reference,\n otherwise this will fail.</p>\n","comments":"<p>The new reference will be written to disk, overwriting the given reference.</p>\n\n<p>The target name will be checked for validity. See <code>git_reference_create_symbolic()</code> for rules about valid names.</p>\n","group":"reference"},"git_reference_set_target":{"type":"function","file":"git2/refs.h","line":247,"lineto":250,"args":[{"name":"out","type":"git_reference **","comment":"Pointer to the newly created reference"},{"name":"ref","type":"git_reference *","comment":"The reference"},{"name":"id","type":"const git_oid *","comment":"The new target OID for the reference"}],"argline":"git_reference **out, git_reference *ref, const git_oid *id","sig":"git_reference **::git_reference *::const git_oid *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create a new reference with the same name as the given reference but a\n different OID target. The reference must be a direct reference, otherwise\n this will fail.</p>\n","comments":"<p>The new reference will be written to disk, overwriting the given reference.</p>\n","group":"reference"},"git_reference_rename":{"type":"function","file":"git2/refs.h","line":274,"lineto":278,"args":[{"name":"new_ref","type":"git_reference **","comment":null},{"name":"ref","type":"git_reference *","comment":"The reference to rename"},{"name":"new_name","type":"const char *","comment":"The new name for the reference"},{"name":"force","type":"int","comment":"Overwrite an existing reference"}],"argline":"git_reference **new_ref, git_reference *ref, const char *new_name, int force","sig":"git_reference **::git_reference *::const char *::int","return":{"type":"int","comment":" 0 on success, EINVALIDSPEC, EEXISTS or an error code"},"description":"<p>Rename an existing reference.</p>\n","comments":"<p>This method works for both direct and symbolic references.</p>\n\n<p>The new name will be checked for validity. See <code>git_reference_create_symbolic()</code> for rules about valid names.</p>\n\n<p>If the <code>force</code> flag is not enabled, and there&#39;s already a reference with the given name, the renaming will fail.</p>\n\n<p>IMPORTANT: The user needs to write a proper reflog entry if the reflog is enabled for the repository. We only rename the reflog if it exists.</p>\n","group":"reference"},"git_reference_delete":{"type":"function","file":"git2/refs.h","line":290,"lineto":290,"args":[{"name":"ref","type":"git_reference *","comment":"The reference to remove"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Delete an existing reference.</p>\n","comments":"<p>This method works for both direct and symbolic references.  The reference will be immediately removed on disk but the memory will not be freed. Callers must call <code>git_reference_free</code>.</p>\n","group":"reference"},"git_reference_list":{"type":"function","file":"git2/refs.h","line":304,"lineto":304,"args":[{"name":"array","type":"git_strarray *","comment":"Pointer to a git_strarray structure where\n\t\tthe reference names will be stored"},{"name":"repo","type":"git_repository *","comment":"Repository where to find the refs"}],"argline":"git_strarray *array, git_repository *repo","sig":"git_strarray *::git_repository *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Fill a list with all the references that can be found in a repository.</p>\n","comments":"<p>The string array will be filled with the names of all references; these values are owned by the user and should be free&#39;d manually when no longer needed, using <code>git_strarray_free()</code>.</p>\n","group":"reference","examples":{"general.c":["ex/v0.19.0/general.html#git_reference_list-56"]}},"git_reference_foreach":{"type":"function","file":"git2/refs.h","line":322,"lineto":325,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where to find the refs"},{"name":"callback","type":"git_reference_foreach_cb","comment":"Function which will be called for every listed ref"},{"name":"payload","type":"void *","comment":"Additional data to pass to the callback"}],"argline":"git_repository *repo, git_reference_foreach_cb callback, void *payload","sig":"git_repository *::git_reference_foreach_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback, or error code"},"description":"<p>Perform a callback on each reference in the repository.</p>\n","comments":"<p>The <code>callback</code> function will be called for each reference in the repository, receiving the name of the reference and the <code>payload</code> value passed to this method.  Returning a non-zero value from the callback will terminate the iteration.</p>\n","group":"reference"},"git_reference_free":{"type":"function","file":"git2/refs.h","line":337,"lineto":337,"args":[{"name":"ref","type":"git_reference *","comment":"git_reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"void","comment":null},"description":"<p>Free the given reference.</p>\n","comments":"","group":"reference"},"git_reference_cmp":{"type":"function","file":"git2/refs.h","line":346,"lineto":346,"args":[{"name":"ref1","type":"git_reference *","comment":"The first git_reference"},{"name":"ref2","type":"git_reference *","comment":"The second git_reference"}],"argline":"git_reference *ref1, git_reference *ref2","sig":"git_reference *::git_reference *","return":{"type":"int","comment":" 0 if the same, else a stable but meaningless ordering."},"description":"<p>Compare two references.</p>\n","comments":"","group":"reference"},"git_reference_iterator_new":{"type":"function","file":"git2/refs.h","line":355,"lineto":357,"args":[{"name":"out","type":"git_reference_iterator **","comment":"pointer in which to store the iterator"},{"name":"repo","type":"git_repository *","comment":"the repository"}],"argline":"git_reference_iterator **out, git_repository *repo","sig":"git_reference_iterator **::git_repository *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create an iterator for the repo&#39;s references</p>\n","comments":"","group":"reference"},"git_reference_iterator_glob_new":{"type":"function","file":"git2/refs.h","line":368,"lineto":371,"args":[{"name":"out","type":"git_reference_iterator **","comment":"pointer in which to store the iterator"},{"name":"repo","type":"git_repository *","comment":"the repository"},{"name":"glob","type":"const char *","comment":"the glob to match against the reference names"}],"argline":"git_reference_iterator **out, git_repository *repo, const char *glob","sig":"git_reference_iterator **::git_repository *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create an iterator for the repo&#39;s references that match the\n specified glob</p>\n","comments":"","group":"reference"},"git_reference_next":{"type":"function","file":"git2/refs.h","line":380,"lineto":380,"args":[{"name":"out","type":"git_reference **","comment":"pointer in which to store the reference"},{"name":"iter","type":"git_reference_iterator *","comment":"the iterator"}],"argline":"git_reference **out, git_reference_iterator *iter","sig":"git_reference **::git_reference_iterator *","return":{"type":"int","comment":" 0, GIT_ITEROVER if there are no more; or an error code"},"description":"<p>Get the next reference</p>\n","comments":"","group":"reference"},"git_reference_iterator_free":{"type":"function","file":"git2/refs.h","line":389,"lineto":389,"args":[{"name":"iter","type":"git_reference_iterator *","comment":"the iterator to free"}],"argline":"git_reference_iterator *iter","sig":"git_reference_iterator *","return":{"type":"void","comment":null},"description":"<p>Free the iterator and its associated resources</p>\n","comments":"","group":"reference"},"git_reference_foreach_glob":{"type":"function","file":"git2/refs.h","line":409,"lineto":413,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where to find the refs"},{"name":"glob","type":"const char *","comment":"Pattern to match (fnmatch-style) against reference name."},{"name":"callback","type":"git_reference_foreach_name_cb","comment":"Function which will be called for every listed ref"},{"name":"payload","type":"void *","comment":"Additional data to pass to the callback"}],"argline":"git_repository *repo, const char *glob, git_reference_foreach_name_cb callback, void *payload","sig":"git_repository *::const char *::git_reference_foreach_name_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback, or error code"},"description":"<p>Perform a callback on each reference in the repository whose name\n matches the given pattern.</p>\n","comments":"<p>This function acts like <code>git_reference_foreach()</code> with an additional pattern match being applied to the reference name before issuing the callback function.  See that function for more information.</p>\n\n<p>The pattern is matched using fnmatch or &quot;glob&quot; style where a &#39;*&#39; matches any sequence of letters, a &#39;?&#39; matches any letter, and square brackets can be used to define character ranges (such as &quot;[0-9]&quot; for digits).</p>\n","group":"reference"},"git_reference_has_log":{"type":"function","file":"git2/refs.h","line":423,"lineto":423,"args":[{"name":"ref","type":"git_reference *","comment":"A git reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"int","comment":" 0 when no reflog can be found, 1 when it exists;\n otherwise an error code."},"description":"<p>Check if a reflog exists for the specified reference.</p>\n","comments":"","group":"reference"},"git_reference_is_branch":{"type":"function","file":"git2/refs.h","line":433,"lineto":433,"args":[{"name":"ref","type":"git_reference *","comment":"A git reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"int","comment":" 1 when the reference lives in the refs/heads\n namespace; 0 otherwise."},"description":"<p>Check if a reference is a local branch.</p>\n","comments":"","group":"reference"},"git_reference_is_remote":{"type":"function","file":"git2/refs.h","line":443,"lineto":443,"args":[{"name":"ref","type":"git_reference *","comment":"A git reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"int","comment":" 1 when the reference lives in the refs/remotes\n namespace; 0 otherwise."},"description":"<p>Check if a reference is a remote tracking branch</p>\n","comments":"","group":"reference"},"git_reference_normalize_name":{"type":"function","file":"git2/refs.h","line":494,"lineto":498,"args":[{"name":"buffer_out","type":"char *","comment":"User allocated buffer to store normalized name"},{"name":"buffer_size","type":"size_t","comment":"Size of buffer_out"},{"name":"name","type":"const char *","comment":"Reference name to be checked."},{"name":"flags","type":"unsigned int","comment":"Flags to constrain name validation rules - see the\n              GIT_REF_FORMAT constants above."}],"argline":"char *buffer_out, size_t buffer_size, const char *name, unsigned int flags","sig":"char *::size_t::const char *::unsigned int","return":{"type":"int","comment":" 0 on success, GIT_EBUFS if buffer is too small, EINVALIDSPEC\n or an error code."},"description":"<p>Normalize reference name and check validity.</p>\n","comments":"<p>This will normalize the reference name by removing any leading slash &#39;/&#39; characters and collapsing runs of adjacent slashes between name components into a single slash.</p>\n\n<p>Once normalized, if the reference name is valid, it will be returned in the user allocated buffer.</p>\n\n<p>See <code>git_reference_create_symbolic()</code> for rules about valid names.</p>\n","group":"reference"},"git_reference_peel":{"type":"function","file":"git2/refs.h","line":515,"lineto":518,"args":[{"name":"out","type":"git_object **","comment":"Pointer to the peeled git_object"},{"name":"ref","type":"git_reference *","comment":"The reference to be processed"},{"name":"type","type":"git_otype","comment":"The type of the requested object (GIT_OBJ_COMMIT,\n GIT_OBJ_TAG, GIT_OBJ_TREE, GIT_OBJ_BLOB or GIT_OBJ_ANY)."}],"argline":"git_object **out, git_reference *ref, git_otype type","sig":"git_object **::git_reference *::git_otype","return":{"type":"int","comment":" 0 on success, GIT_EAMBIGUOUS, GIT_ENOTFOUND or an error code"},"description":"<p>Recursively peel reference until object of the specified type is found.</p>\n","comments":"<p>The retrieved <code>peeled</code> object is owned by the repository and should be closed with the <code>git_object_free</code> method.</p>\n\n<p>If you pass <code>GIT_OBJ_ANY</code> as the target type, then the object will be peeled until a non-tag object is met.</p>\n","group":"reference"},"git_reference_is_valid_name":{"type":"function","file":"git2/refs.h","line":534,"lineto":534,"args":[{"name":"refname","type":"const char *","comment":"name to be checked."}],"argline":"const char *refname","sig":"const char *","return":{"type":"int","comment":" 1 if the reference name is acceptable; 0 if it isn't"},"description":"<p>Ensure the reference name is well-formed.</p>\n","comments":"<p>Valid reference names must follow one of two patterns:</p>\n\n<ol>\n<li>Top-level names must contain only capital letters and underscores,    and must begin and end with a letter. (e.g. &quot;HEAD&quot;, &quot;ORIG_HEAD&quot;). 2. Names prefixed with &quot;refs/&quot; can be almost anything.  You must avoid    the characters &#39;~&#39;, &#39;^&#39;, &#39;:&#39;, &#39;\\&#39;, &#39;?&#39;, &#39;[&#39;, and &#39;*&#39;, and the    sequences &quot;..&quot; and &quot;@{&quot; which have special meaning to revparse.</li>\n</ol>\n","group":"reference"},"git_reference_shorthand":{"type":"function","file":"git2/refs.h","line":548,"lineto":548,"args":[{"name":"ref","type":"git_reference *","comment":"a reference"}],"argline":"git_reference *ref","sig":"git_reference *","return":{"type":"const char *","comment":" the human-readable version of the name"},"description":"<p>Get the reference&#39;s short name</p>\n","comments":"<p>This will transform the reference name into a name &quot;human-readable&quot; version. If no shortname is appropriate, it will return the full name.</p>\n\n<p>The memory is owned by the reference and must not be freed.</p>\n","group":"reference"},"git_refspec_src":{"type":"function","file":"git2/refspec.h","line":29,"lineto":29,"args":[{"name":"refspec","type":"const git_refspec *","comment":"the refspec"}],"argline":"const git_refspec *refspec","sig":"const git_refspec *","return":{"type":"const char *","comment":" the refspec's source specifier"},"description":"<p>Get the source specifier</p>\n","comments":"","group":"refspec"},"git_refspec_dst":{"type":"function","file":"git2/refspec.h","line":37,"lineto":37,"args":[{"name":"refspec","type":"const git_refspec *","comment":"the refspec"}],"argline":"const git_refspec *refspec","sig":"const git_refspec *","return":{"type":"const char *","comment":" the refspec's destination specifier"},"description":"<p>Get the destination specifier</p>\n","comments":"","group":"refspec"},"git_refspec_string":{"type":"function","file":"git2/refspec.h","line":45,"lineto":45,"args":[{"name":"refspec","type":"const git_refspec *","comment":"the refspec"}],"argline":"const git_refspec *refspec","sig":"const git_refspec *","return":{"type":"const char *","comment":null},"description":"<p>Get the refspec&#39;s string</p>\n","comments":"","group":"refspec"},"git_refspec_force":{"type":"function","file":"git2/refspec.h","line":53,"lineto":53,"args":[{"name":"refspec","type":"const git_refspec *","comment":"the refspec"}],"argline":"const git_refspec *refspec","sig":"const git_refspec *","return":{"type":"int","comment":" 1 if force update has been set, 0 otherwise"},"description":"<p>Get the force update setting</p>\n","comments":"","group":"refspec"},"git_refspec_direction":{"type":"function","file":"git2/refspec.h","line":61,"lineto":61,"args":[{"name":"spec","type":"const git_refspec *","comment":"refspec"}],"argline":"const git_refspec *spec","sig":"const git_refspec *","return":{"type":"git_direction","comment":" GIT_DIRECTION_FETCH or GIT_DIRECTION_PUSH"},"description":"<p>Get the refspec&#39;s direction.</p>\n","comments":"","group":"refspec"},"git_refspec_src_matches":{"type":"function","file":"git2/refspec.h","line":70,"lineto":70,"args":[{"name":"refspec","type":"const git_refspec *","comment":"the refspec"},{"name":"refname","type":"const char *","comment":"the name of the reference to check"}],"argline":"const git_refspec *refspec, const char *refname","sig":"const git_refspec *::const char *","return":{"type":"int","comment":" 1 if the refspec matches, 0 otherwise"},"description":"<p>Check if a refspec&#39;s source descriptor matches a reference </p>\n","comments":"","group":"refspec"},"git_refspec_dst_matches":{"type":"function","file":"git2/refspec.h","line":79,"lineto":79,"args":[{"name":"refspec","type":"const git_refspec *","comment":"the refspec"},{"name":"refname","type":"const char *","comment":"the name of the reference to check"}],"argline":"const git_refspec *refspec, const char *refname","sig":"const git_refspec *::const char *","return":{"type":"int","comment":" 1 if the refspec matches, 0 otherwise"},"description":"<p>Check if a refspec&#39;s destination descriptor matches a reference</p>\n","comments":"","group":"refspec"},"git_refspec_transform":{"type":"function","file":"git2/refspec.h","line":90,"lineto":90,"args":[{"name":"out","type":"char *","comment":"where to store the target name"},{"name":"outlen","type":"size_t","comment":"the size of the `out` buffer"},{"name":"spec","type":"const git_refspec *","comment":"the refspec"},{"name":"name","type":"const char *","comment":"the name of the reference to transform"}],"argline":"char *out, size_t outlen, const git_refspec *spec, const char *name","sig":"char *::size_t::const git_refspec *::const char *","return":{"type":"int","comment":" 0, GIT_EBUFS or another error"},"description":"<p>Transform a reference to its target following the refspec&#39;s rules</p>\n","comments":"","group":"refspec"},"git_refspec_rtransform":{"type":"function","file":"git2/refspec.h","line":101,"lineto":101,"args":[{"name":"out","type":"char *","comment":"where to store the source reference name"},{"name":"outlen","type":"size_t","comment":"the size of the `out` buffer"},{"name":"spec","type":"const git_refspec *","comment":"the refspec"},{"name":"name","type":"const char *","comment":"the name of the reference to transform"}],"argline":"char *out, size_t outlen, const git_refspec *spec, const char *name","sig":"char *::size_t::const git_refspec *::const char *","return":{"type":"int","comment":" 0, GIT_EBUFS or another error"},"description":"<p>Transform a target reference to its source reference following the refspec&#39;s rules</p>\n","comments":"","group":"refspec"},"git_remote_create":{"type":"function","file":"git2/remote.h","line":46,"lineto":50,"args":[{"name":"out","type":"git_remote **","comment":"the resulting remote"},{"name":"repo","type":"git_repository *","comment":"the repository in which to create the remote"},{"name":"name","type":"const char *","comment":"the remote's name"},{"name":"url","type":"const char *","comment":"the remote's url"}],"argline":"git_remote **out, git_repository *repo, const char *name, const char *url","sig":"git_remote **::git_repository *::const char *::const char *","return":{"type":"int","comment":" 0, GIT_EINVALIDSPEC, GIT_EEXISTS or an error code"},"description":"<p>Add a remote with the default fetch refspec to the repository&#39;s configuration.  This\n calls git_remote_save before returning.</p>\n","comments":"","group":"remote"},"git_remote_create_inmemory":{"type":"function","file":"git2/remote.h","line":68,"lineto":72,"args":[{"name":"out","type":"git_remote **","comment":"pointer to the new remote object"},{"name":"repo","type":"git_repository *","comment":"the associated repository"},{"name":"fetch","type":"const char *","comment":"the fetch refspec to use for this remote. May be NULL for defaults."},{"name":"url","type":"const char *","comment":"the remote repository's URL"}],"argline":"git_remote **out, git_repository *repo, const char *fetch, const char *url","sig":"git_remote **::git_repository *::const char *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create a remote in memory</p>\n","comments":"<p>Create a remote with the given refspec in memory. You can use this when you have a URL instead of a remote&#39;s name.  Note that in-memory remotes cannot be converted to persisted remotes.</p>\n\n<p>The name, when provided, will be checked for validity. See <code>git_tag_create()</code> for rules about valid names.</p>\n","group":"remote","examples":{"network/fetch.c":["ex/v0.19.0/network/fetch.html#git_remote_create_inmemory-4"],"network/ls-remote.c":["ex/v0.19.0/network/ls-remote.html#git_remote_create_inmemory-2"]}},"git_remote_load":{"type":"function","file":"git2/remote.h","line":85,"lineto":85,"args":[{"name":"out","type":"git_remote **","comment":"pointer to the new remote object"},{"name":"repo","type":"git_repository *","comment":"the associated repository"},{"name":"name","type":"const char *","comment":"the remote's name"}],"argline":"git_remote **out, git_repository *repo, const char *name","sig":"git_remote **::git_repository *::const char *","return":{"type":"int","comment":" 0, GIT_ENOTFOUND, GIT_EINVALIDSPEC or an error code"},"description":"<p>Get the information for a particular remote</p>\n","comments":"<p>The name will be checked for validity. See <code>git_tag_create()</code> for rules about valid names.</p>\n","group":"remote","examples":{"network/fetch.c":["ex/v0.19.0/network/fetch.html#git_remote_load-5"],"network/ls-remote.c":["ex/v0.19.0/network/ls-remote.html#git_remote_load-3"]}},"git_remote_save":{"type":"function","file":"git2/remote.h","line":96,"lineto":96,"args":[{"name":"remote","type":"const git_remote *","comment":"the remote to save to config"}],"argline":"const git_remote *remote","sig":"const git_remote *","return":{"type":"int","comment":" 0, GIT_EINVALIDSPEC or an error code"},"description":"<p>Save a remote to its repository&#39;s configuration</p>\n","comments":"<p>One can&#39;t save a in-memory remote. Doing so will result in a GIT_EINVALIDSPEC being returned.</p>\n","group":"remote"},"git_remote_name":{"type":"function","file":"git2/remote.h","line":104,"lineto":104,"args":[{"name":"remote","type":"const git_remote *","comment":"the remote"}],"argline":"const git_remote *remote","sig":"const git_remote *","return":{"type":"const char *","comment":" a pointer to the name or NULL for in-memory remotes"},"description":"<p>Get the remote&#39;s name</p>\n","comments":"","group":"remote"},"git_remote_url":{"type":"function","file":"git2/remote.h","line":112,"lineto":112,"args":[{"name":"remote","type":"const git_remote *","comment":"the remote"}],"argline":"const git_remote *remote","sig":"const git_remote *","return":{"type":"const char *","comment":" a pointer to the url"},"description":"<p>Get the remote&#39;s url</p>\n","comments":"","group":"remote"},"git_remote_pushurl":{"type":"function","file":"git2/remote.h","line":120,"lineto":120,"args":[{"name":"remote","type":"const git_remote *","comment":"the remote"}],"argline":"const git_remote *remote","sig":"const git_remote *","return":{"type":"const char *","comment":" a pointer to the url or NULL if no special url for pushing is set"},"description":"<p>Get the remote&#39;s url for pushing</p>\n","comments":"","group":"remote"},"git_remote_set_url":{"type":"function","file":"git2/remote.h","line":131,"lineto":131,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"},{"name":"url","type":"const char *","comment":"the url to set"}],"argline":"git_remote *remote, const char *url","sig":"git_remote *::const char *","return":{"type":"int","comment":" 0 or an error value"},"description":"<p>Set the remote&#39;s url</p>\n","comments":"<p>Existing connections will not be updated.</p>\n","group":"remote"},"git_remote_set_pushurl":{"type":"function","file":"git2/remote.h","line":142,"lineto":142,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"},{"name":"url","type":"const char *","comment":"the url to set or NULL to clear the pushurl"}],"argline":"git_remote *remote, const char *url","sig":"git_remote *::const char *","return":{"type":"int","comment":" 0 or an error value"},"description":"<p>Set the remote&#39;s url for pushing</p>\n","comments":"<p>Existing connections will not be updated.</p>\n","group":"remote"},"git_remote_add_fetch":{"type":"function","file":"git2/remote.h","line":151,"lineto":151,"args":[{"name":"remote","type":"git_remote *","comment":"the remote\n \n\n refspec the new fetch refspec"},{"name":"refspec","type":"const char *","comment":null}],"argline":"git_remote *remote, const char *refspec","sig":"git_remote *::const char *","return":{"type":"int","comment":" 0 or an error value"},"description":"<p>Add a fetch refspec to the remote</p>\n","comments":"","group":"remote"},"git_remote_get_fetch_refspecs":{"type":"function","file":"git2/remote.h","line":162,"lineto":162,"args":[{"name":"array","type":"git_strarray *","comment":"pointer to the array in which to store the strings"},{"name":"remote","type":"git_remote *","comment":"the remote to query"}],"argline":"git_strarray *array, git_remote *remote","sig":"git_strarray *::git_remote *","return":{"type":"int","comment":null},"description":"<p>Get the remote&#39;s list of fetch refspecs</p>\n","comments":"<p>The memory is owned by the user and should be freed with <code>git_strarray_free</code>.</p>\n","group":"remote"},"git_remote_add_push":{"type":"function","file":"git2/remote.h","line":171,"lineto":171,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"},{"name":"refspec","type":"const char *","comment":"the new push refspec"}],"argline":"git_remote *remote, const char *refspec","sig":"git_remote *::const char *","return":{"type":"int","comment":" 0 or an error value"},"description":"<p>Add a push refspec to the remote</p>\n","comments":"","group":"remote"},"git_remote_get_push_refspecs":{"type":"function","file":"git2/remote.h","line":182,"lineto":182,"args":[{"name":"array","type":"git_strarray *","comment":"pointer to the array in which to store the strings"},{"name":"remote","type":"git_remote *","comment":"the remote to query"}],"argline":"git_strarray *array, git_remote *remote","sig":"git_strarray *::git_remote *","return":{"type":"int","comment":null},"description":"<p>Get the remote&#39;s list of push refspecs</p>\n","comments":"<p>The memory is owned by the user and should be freed with <code>git_strarray_free</code>.</p>\n","group":"remote"},"git_remote_clear_refspecs":{"type":"function","file":"git2/remote.h","line":191,"lineto":191,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"void","comment":null},"description":"<p>Clear the refspecs</p>\n","comments":"<p>Remove all configured fetch and push refspecs from the remote.</p>\n","group":"remote"},"git_remote_refspec_count":{"type":"function","file":"git2/remote.h","line":199,"lineto":199,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"size_t","comment":" the amount of refspecs configured in this remote"},"description":"<p>Get the number of refspecs for a remote</p>\n","comments":"","group":"remote"},"git_remote_get_refspec":{"type":"function","file":"git2/remote.h","line":208,"lineto":208,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to query"},{"name":"n","type":"size_t","comment":"the refspec to get"}],"argline":"git_remote *remote, size_t n","sig":"git_remote *::size_t","return":{"type":"const git_refspec *","comment":" the nth refspec"},"description":"<p>Get a refspec from the remote</p>\n","comments":"","group":"remote"},"git_remote_remove_refspec":{"type":"function","file":"git2/remote.h","line":217,"lineto":217,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to query"},{"name":"n","type":"size_t","comment":"the refspec to remove"}],"argline":"git_remote *remote, size_t n","sig":"git_remote *::size_t","return":{"type":"int","comment":" 0 or GIT_ENOTFOUND"},"description":"<p>Remove a refspec from the remote</p>\n","comments":"","group":"remote"},"git_remote_connect":{"type":"function","file":"git2/remote.h","line":231,"lineto":231,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to connect to"},{"name":"direction","type":"git_direction","comment":"GIT_DIRECTION_FETCH if you want to fetch or\n GIT_DIRECTION_PUSH if you want to push"}],"argline":"git_remote *remote, git_direction direction","sig":"git_remote *::git_direction","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Open a connection to a remote</p>\n","comments":"<p>The transport is selected based on the URL. The direction argument is due to a limitation of the git protocol (over TCP or SSH) which starts up a specific binary which can only do the one or the other.</p>\n","group":"remote","examples":{"network/fetch.c":["ex/v0.19.0/network/fetch.html#git_remote_connect-6"],"network/ls-remote.c":["ex/v0.19.0/network/ls-remote.html#git_remote_connect-4","ex/v0.19.0/network/ls-remote.html#git_remote_connect-5"]}},"git_remote_ls":{"type":"function","file":"git2/remote.h","line":247,"lineto":247,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"},{"name":"list_cb","type":"git_headlist_cb","comment":"function to call with each ref discovered at the remote"},{"name":"payload","type":"void *","comment":"additional data to pass to the callback"}],"argline":"git_remote *remote, git_headlist_cb list_cb, void *payload","sig":"git_remote *::git_headlist_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback, or error code"},"description":"<p>Get a list of refs at the remote</p>\n","comments":"<p>The remote (or more exactly its transport) must be connected. The memory belongs to the remote.</p>\n\n<p>If you a return a non-zero value from the callback, this will stop looping over the refs.</p>\n","group":"remote","examples":{"network/ls-remote.c":["ex/v0.19.0/network/ls-remote.html#git_remote_ls-6","ex/v0.19.0/network/ls-remote.html#git_remote_ls-7"]}},"git_remote_download":{"type":"function","file":"git2/remote.h","line":265,"lineto":268,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to download from"},{"name":"progress_cb","type":"git_transfer_progress_callback","comment":"function to call with progress information.  Be aware that\n this is called inline with network and indexing operations, so performance\n may be affected."},{"name":"payload","type":"void *","comment":"payload for the progress callback"}],"argline":"git_remote *remote, git_transfer_progress_callback progress_cb, void *payload","sig":"git_remote *::git_transfer_progress_callback::void *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Download the packfile</p>\n","comments":"<p>Negotiate what objects should be downloaded and download the packfile with those objects. The packfile is downloaded with a temporary filename, as it&#39;s final name is not known yet. If there was no packfile needed (all the objects were available locally), filename will be NULL and the function will return success.</p>\n","group":"remote","examples":{"network/fetch.c":["ex/v0.19.0/network/fetch.html#git_remote_download-7"]}},"git_remote_connected":{"type":"function","file":"git2/remote.h","line":279,"lineto":279,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"int","comment":" 1 if it's connected, 0 otherwise."},"description":"<p>Check whether the remote is connected</p>\n","comments":"<p>Check whether the remote&#39;s underlying transport is connected to the remote host.</p>\n","group":"remote"},"git_remote_stop":{"type":"function","file":"git2/remote.h","line":289,"lineto":289,"args":[{"name":"remote","type":"git_remote *","comment":"the remote"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"void","comment":null},"description":"<p>Cancel the operation</p>\n","comments":"<p>At certain points in its operation, the network code checks whether the operation has been cancelled and if so stops the operation.</p>\n","group":"remote"},"git_remote_disconnect":{"type":"function","file":"git2/remote.h","line":299,"lineto":299,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to disconnect from"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"void","comment":null},"description":"<p>Disconnect from the remote</p>\n","comments":"<p>Close the connection to the remote and free the underlying transport.</p>\n","group":"remote","examples":{"network/fetch.c":["ex/v0.19.0/network/fetch.html#git_remote_disconnect-8"]}},"git_remote_free":{"type":"function","file":"git2/remote.h","line":309,"lineto":309,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to free"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"void","comment":null},"description":"<p>Free the memory associated with a remote</p>\n","comments":"<p>This also disconnects from the remote, if the connection has not been closed yet (using git_remote_disconnect).</p>\n","group":"remote","examples":{"network/fetch.c":["ex/v0.19.0/network/fetch.html#git_remote_free-9","ex/v0.19.0/network/fetch.html#git_remote_free-10"],"network/ls-remote.c":["ex/v0.19.0/network/ls-remote.html#git_remote_free-8","ex/v0.19.0/network/ls-remote.html#git_remote_free-9"]}},"git_remote_update_tips":{"type":"function","file":"git2/remote.h","line":317,"lineto":317,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to update"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Update the tips to the new state</p>\n","comments":"","group":"remote","examples":{"network/fetch.c":["ex/v0.19.0/network/fetch.html#git_remote_update_tips-11"]}},"git_remote_valid_url":{"type":"function","file":"git2/remote.h","line":325,"lineto":325,"args":[{"name":"url","type":"const char *","comment":"the url to check"}],"argline":"const char *url","sig":"const char *","return":{"type":"int","comment":" 1 if the url is valid, 0 otherwise"},"description":"<p>Return whether a string is a valid remote URL</p>\n","comments":"","group":"remote"},"git_remote_supported_url":{"type":"function","file":"git2/remote.h","line":333,"lineto":333,"args":[{"name":"url","type":"const char *","comment":"the url to check"}],"argline":"const char *url","sig":"const char *","return":{"type":"int","comment":" 1 if the url is supported, 0 otherwise"},"description":"<p>Return whether the passed URL is supported by this version of the library.</p>\n","comments":"","group":"remote"},"git_remote_list":{"type":"function","file":"git2/remote.h","line":344,"lineto":344,"args":[{"name":"out","type":"git_strarray *","comment":"a string array which receives the names of the remotes"},{"name":"repo","type":"git_repository *","comment":"the repository to query"}],"argline":"git_strarray *out, git_repository *repo","sig":"git_strarray *::git_repository *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Get a list of the configured remotes for a repo</p>\n","comments":"<p>The string array must be freed by the user.</p>\n","group":"remote"},"git_remote_check_cert":{"type":"function","file":"git2/remote.h","line":352,"lineto":352,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to configure"},{"name":"check","type":"int","comment":"whether to check the server's certificate (defaults to yes)"}],"argline":"git_remote *remote, int check","sig":"git_remote *::int","return":{"type":"void","comment":null},"description":"<p>Choose whether to check the server&#39;s certificate (applies to HTTPS only)</p>\n","comments":"","group":"remote"},"git_remote_set_cred_acquire_cb":{"type":"function","file":"git2/remote.h","line":364,"lineto":367,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to configure"},{"name":"cred_acquire_cb","type":"git_cred_acquire_cb","comment":"The credentials acquisition callback to use (defaults\n to NULL)"},{"name":"payload","type":"void *","comment":null}],"argline":"git_remote *remote, git_cred_acquire_cb cred_acquire_cb, void *payload","sig":"git_remote *::git_cred_acquire_cb::void *","return":{"type":"void","comment":null},"description":"<p>Set a credentials acquisition callback for this remote. If the remote is\n not available for anonymous access, then you must set this callback in order\n to provide credentials to the transport at the time of authentication\n failure so that retry can be performed.</p>\n","comments":"","group":"remote"},"git_remote_set_transport":{"type":"function","file":"git2/remote.h","line":381,"lineto":383,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to configure"},{"name":"transport","type":"git_transport *","comment":"the transport object for the remote to use"}],"argline":"git_remote *remote, git_transport *transport","sig":"git_remote *::git_transport *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Sets a custom transport for the remote. The caller can use this function\n to bypass the automatic discovery of a transport by URL scheme (i.e.\n http://, https://, git://) and supply their own transport to be used\n instead. After providing the transport to a remote using this function,\n the transport object belongs exclusively to that remote, and the remote will\n free it when it is freed with git_remote_free.</p>\n","comments":"","group":"remote"},"git_remote_set_callbacks":{"type":"function","file":"git2/remote.h","line":421,"lineto":421,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to configure"},{"name":"callbacks","type":"git_remote_callbacks *","comment":"a pointer to the user's callback settings"}],"argline":"git_remote *remote, git_remote_callbacks *callbacks","sig":"git_remote *::git_remote_callbacks *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Set the callbacks for a remote</p>\n","comments":"<p>Note that the remote keeps its own copy of the data and you need to call this function again if you want to change the callbacks.</p>\n","group":"remote","examples":{"network/fetch.c":["ex/v0.19.0/network/fetch.html#git_remote_set_callbacks-12"]}},"git_remote_stats":{"type":"function","file":"git2/remote.h","line":426,"lineto":426,"args":[{"name":"remote","type":"git_remote *","comment":null}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"const git_transfer_progress *","comment":null},"description":"<p>Get the statistics structure that is filled in by the fetch operation.</p>\n","comments":"","group":"remote","examples":{"network/fetch.c":["ex/v0.19.0/network/fetch.html#git_remote_stats-13"]}},"git_remote_autotag":{"type":"function","file":"git2/remote.h","line":440,"lineto":440,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to query"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"git_remote_autotag_option_t","comment":" the auto-follow setting"},"description":"<p>Retrieve the tag auto-follow setting</p>\n","comments":"","group":"remote"},"git_remote_set_autotag":{"type":"function","file":"git2/remote.h","line":448,"lineto":450,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to configure"},{"name":"value","type":"git_remote_autotag_option_t","comment":"a GIT_REMOTE_DOWNLOAD_TAGS value"}],"argline":"git_remote *remote, git_remote_autotag_option_t value","sig":"git_remote *::git_remote_autotag_option_t","return":{"type":"void","comment":null},"description":"<p>Set the tag auto-follow setting</p>\n","comments":"","group":"remote"},"git_remote_rename":{"type":"function","file":"git2/remote.h","line":470,"lineto":474,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to rename"},{"name":"new_name","type":"const char *","comment":"the new name the remote should bear"},{"name":"callback","type":"git_remote_rename_problem_cb","comment":"Optional callback to notify the consumer of fetch refspecs\n that haven't been automatically updated and need potential manual tweaking."},{"name":"payload","type":"void *","comment":"Additional data to pass to the callback"}],"argline":"git_remote *remote, const char *new_name, git_remote_rename_problem_cb callback, void *payload","sig":"git_remote *::const char *::git_remote_rename_problem_cb::void *","return":{"type":"int","comment":" 0, GIT_EINVALIDSPEC, GIT_EEXISTS or an error code"},"description":"<p>Give the remote a new name</p>\n","comments":"<p>All remote-tracking branches and configuration settings for the remote are updated.</p>\n\n<p>The new name will be checked for validity. See <code>git_tag_create()</code> for rules about valid names.</p>\n\n<p>A temporary in-memory remote cannot be given a name with this method.</p>\n","group":"remote"},"git_remote_update_fetchhead":{"type":"function","file":"git2/remote.h","line":482,"lineto":482,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to query"}],"argline":"git_remote *remote","sig":"git_remote *","return":{"type":"int","comment":" the update FETCH_HEAD setting"},"description":"<p>Retrieve the update FETCH_HEAD setting.</p>\n","comments":"","group":"remote"},"git_remote_set_update_fetchhead":{"type":"function","file":"git2/remote.h","line":491,"lineto":491,"args":[{"name":"remote","type":"git_remote *","comment":"the remote to configure"},{"name":"value","type":"int","comment":"0 to disable updating FETCH_HEAD"}],"argline":"git_remote *remote, int value","sig":"git_remote *::int","return":{"type":"void","comment":null},"description":"<p>Sets the update FETCH_HEAD setting.  By default, FETCH_HEAD will be\n updated on every fetch.  Set to 0 to disable.</p>\n","comments":"","group":"remote"},"git_remote_is_valid_name":{"type":"function","file":"git2/remote.h","line":499,"lineto":499,"args":[{"name":"remote_name","type":"const char *","comment":"name to be checked."}],"argline":"const char *remote_name","sig":"const char *","return":{"type":"int","comment":" 1 if the reference name is acceptable; 0 if it isn't"},"description":"<p>Ensure the remote name is well-formed.</p>\n","comments":"","group":"remote"},"git_repository_open":{"type":"function","file":"git2/repository.h","line":36,"lineto":36,"args":[{"name":"out","type":"git_repository **","comment":"pointer to the repo which will be opened"},{"name":"path","type":"const char *","comment":"the path to the repository"}],"argline":"git_repository **out, const char *path","sig":"git_repository **::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Open a git repository.</p>\n","comments":"<p>The &#39;path&#39; argument must point to either a git repository folder, or an existing work dir.</p>\n\n<p>The method will automatically detect if &#39;path&#39; is a normal or bare repository or fail is &#39;path&#39; is neither.</p>\n","group":"repository","examples":{"general.c":["ex/v0.19.0/general.html#git_repository_open-57"],"network/git2.c":["ex/v0.19.0/network/git2.html#git_repository_open-3"]}},"git_repository_wrap_odb":{"type":"function","file":"git2/repository.h","line":49,"lineto":49,"args":[{"name":"out","type":"git_repository **","comment":"pointer to the repo"},{"name":"odb","type":"git_odb *","comment":"the object database to wrap"}],"argline":"git_repository **out, git_odb *odb","sig":"git_repository **::git_odb *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create a &quot;fake&quot; repository to wrap an object database</p>\n","comments":"<p>Create a repository object to wrap an object database to be used with the API when all you have is an object database. This doesn&#39;t have any paths associated with it, so use with care.</p>\n","group":"repository"},"git_repository_discover":{"type":"function","file":"git2/repository.h","line":79,"lineto":84,"args":[{"name":"path_out","type":"char *","comment":"The user allocated buffer which will\n contain the found path."},{"name":"path_size","type":"size_t","comment":"repository_path size"},{"name":"start_path","type":"const char *","comment":"The base path where the lookup starts."},{"name":"across_fs","type":"int","comment":"If true, then the lookup will not stop when a\n filesystem device change is detected while exploring parent directories."},{"name":"ceiling_dirs","type":"const char *","comment":"A GIT_PATH_LIST_SEPARATOR separated list of\n absolute symbolic link free paths. The lookup will stop when any\n of this paths is reached. Note that the lookup always performs on\n start_path no matter start_path appears in ceiling_dirs ceiling_dirs\n might be NULL (which is equivalent to an empty string)"}],"argline":"char *path_out, size_t path_size, const char *start_path, int across_fs, const char *ceiling_dirs","sig":"char *::size_t::const char *::int::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Look for a git repository and copy its path in the given buffer.\n The lookup start from base_path and walk across parent directories\n if nothing has been found. The lookup ends when the first repository\n is found, or when reaching a directory referenced in ceiling_dirs\n or when the filesystem changes (in case across_fs is true).</p>\n","comments":"<p>The method will automatically detect if the repository is bare (if there is a repository).</p>\n","group":"repository"},"git_repository_open_ext":{"type":"function","file":"git2/repository.h","line":120,"lineto":124,"args":[{"name":"out","type":"git_repository **","comment":"Pointer to the repo which will be opened.  This can\n        actually be NULL if you only want to use the error code to\n        see if a repo at this path could be opened."},{"name":"path","type":"const char *","comment":"Path to open as git repository.  If the flags\n        permit \"searching\", then this can be a path to a subdirectory\n        inside the working directory of the repository."},{"name":"flags","type":"unsigned int","comment":"A combination of the GIT_REPOSITORY_OPEN flags above."},{"name":"ceiling_dirs","type":"const char *","comment":"A GIT_PATH_LIST_SEPARATOR delimited list of path\n        prefixes at which the search for a containing repository should\n        terminate."}],"argline":"git_repository **out, const char *path, unsigned int flags, const char *ceiling_dirs","sig":"git_repository **::const char *::unsigned int::const char *","return":{"type":"int","comment":" 0 on success, GIT_ENOTFOUND if no repository could be found,\n        or -1 if there was a repository but open failed for some reason\n        (such as repo corruption or system errors)."},"description":"<p>Find and open a repository with extended controls.</p>\n","comments":"","group":"repository"},"git_repository_open_bare":{"type":"function","file":"git2/repository.h","line":137,"lineto":137,"args":[{"name":"out","type":"git_repository **","comment":"Pointer to the repo which will be opened."},{"name":"bare_path","type":"const char *","comment":"Direct path to the bare repository"}],"argline":"git_repository **out, const char *bare_path","sig":"git_repository **::const char *","return":{"type":"int","comment":" 0 on success, or an error code"},"description":"<p>Open a bare repository on the serverside.</p>\n","comments":"<p>This is a fast open for bare repositories that will come in handy if you&#39;re e.g. hosting git repositories and need to access them efficiently</p>\n","group":"repository"},"git_repository_free":{"type":"function","file":"git2/repository.h","line":150,"lineto":150,"args":[{"name":"repo","type":"git_repository *","comment":"repository handle to close. If NULL nothing occurs."}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"void","comment":null},"description":"<p>Free a previously allocated repository</p>\n","comments":"<p>Note that after a repository is free&#39;d, all the objects it has spawned will still exist until they are manually closed by the user with <code>git_object_free</code>, but accessing any of the attributes of an object without a backing repository will result in undefined behavior</p>\n","group":"repository","examples":{"general.c":["ex/v0.19.0/general.html#git_repository_free-58"],"network/clone.c":["ex/v0.19.0/network/clone.html#git_repository_free-3"],"network/git2.c":["ex/v0.19.0/network/git2.html#git_repository_free-4"]}},"git_repository_init":{"type":"function","file":"git2/repository.h","line":167,"lineto":170,"args":[{"name":"out","type":"git_repository **","comment":"pointer to the repo which will be created or reinitialized"},{"name":"path","type":"const char *","comment":"the path to the repository"},{"name":"is_bare","type":"unsigned int","comment":"if true, a Git repository without a working directory is\n\t\tcreated at the pointed path. If false, provided path will be\n\t\tconsidered as the working directory into which the .git directory\n\t\twill be created."}],"argline":"git_repository **out, const char *path, unsigned int is_bare","sig":"git_repository **::const char *::unsigned int","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Creates a new Git repository in the given folder.</p>\n","comments":"<p>TODO:  - Reinit the repository</p>\n","group":"repository"},"git_repository_init_ext":{"type":"function","file":"git2/repository.h","line":281,"lineto":284,"args":[{"name":"out","type":"git_repository **","comment":"Pointer to the repo which will be created or reinitialized."},{"name":"repo_path","type":"const char *","comment":"The path to the repository."},{"name":"opts","type":"git_repository_init_options *","comment":"Pointer to git_repository_init_options struct."}],"argline":"git_repository **out, const char *repo_path, git_repository_init_options *opts","sig":"git_repository **::const char *::git_repository_init_options *","return":{"type":"int","comment":" 0 or an error code on failure."},"description":"<p>Create a new Git repository in the given folder with extended controls.</p>\n","comments":"<p>This will initialize a new git repository (creating the repo_path if requested by flags) and working directory as needed.  It will auto-detect the case sensitivity of the file system and if the file system supports file mode bits correctly.</p>\n","group":"repository"},"git_repository_head":{"type":"function","file":"git2/repository.h","line":299,"lineto":299,"args":[{"name":"out","type":"git_reference **","comment":"pointer to the reference which will be retrieved"},{"name":"repo","type":"git_repository *","comment":"a repository object"}],"argline":"git_reference **out, git_repository *repo","sig":"git_reference **::git_repository *","return":{"type":"int","comment":" 0 on success, GIT_EORPHANEDHEAD when HEAD points to a non existing\n branch, GIT_ENOTFOUND when HEAD is missing; an error code otherwise"},"description":"<p>Retrieve and resolve the reference pointed at by HEAD.</p>\n","comments":"<p>The returned <code>git_reference</code> will be owned by caller and <code>git_reference_free()</code> must be called when done with it to release the allocated memory and prevent a leak.</p>\n","group":"repository"},"git_repository_head_detached":{"type":"function","file":"git2/repository.h","line":311,"lineto":311,"args":[{"name":"repo","type":"git_repository *","comment":"Repo to test"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":" 1 if HEAD is detached, 0 if it's not; error code if there\n was an error."},"description":"<p>Check if a repository&#39;s HEAD is detached</p>\n","comments":"<p>A repository&#39;s HEAD is detached when it points directly to a commit instead of a branch.</p>\n","group":"repository"},"git_repository_head_orphan":{"type":"function","file":"git2/repository.h","line":323,"lineto":323,"args":[{"name":"repo","type":"git_repository *","comment":"Repo to test"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":" 1 if the current branch is an orphan, 0 if it's not; error\n code if there was an error"},"description":"<p>Check if the current branch is an orphan</p>\n","comments":"<p>An orphan branch is one named from HEAD but which doesn&#39;t exist in the refs namespace, because it doesn&#39;t have any commit to point to.</p>\n","group":"repository"},"git_repository_is_empty":{"type":"function","file":"git2/repository.h","line":335,"lineto":335,"args":[{"name":"repo","type":"git_repository *","comment":"Repo to test"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":" 1 if the repository is empty, 0 if it isn't, error code\n if the repository is corrupted"},"description":"<p>Check if a repository is empty</p>\n","comments":"<p>An empty repository has just been initialized and contains no references.</p>\n","group":"repository"},"git_repository_path":{"type":"function","file":"git2/repository.h","line":346,"lineto":346,"args":[{"name":"repo","type":"git_repository *","comment":"A repository object"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"const char *","comment":" the path to the repository"},"description":"<p>Get the path of this repository</p>\n","comments":"<p>This is the path of the <code>.git</code> folder for normal repositories, or of the repository itself for bare repositories.</p>\n","group":"repository"},"git_repository_workdir":{"type":"function","file":"git2/repository.h","line":357,"lineto":357,"args":[{"name":"repo","type":"git_repository *","comment":"A repository object"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"const char *","comment":" the path to the working dir, if it exists"},"description":"<p>Get the path of the working directory for this repository</p>\n","comments":"<p>If the repository is bare, this function will always return NULL.</p>\n","group":"repository"},"git_repository_set_workdir":{"type":"function","file":"git2/repository.h","line":376,"lineto":377,"args":[{"name":"repo","type":"git_repository *","comment":"A repository object"},{"name":"workdir","type":"const char *","comment":"The path to a working directory"},{"name":"update_gitlink","type":"int","comment":"Create/update gitlink in workdir and set config\n        \"core.worktree\" (if workdir is not the parent of the .git directory)"}],"argline":"git_repository *repo, const char *workdir, int update_gitlink","sig":"git_repository *::const char *::int","return":{"type":"int","comment":" 0, or an error code"},"description":"<p>Set the path to the working directory for this repository</p>\n","comments":"<p>The working directory doesn&#39;t need to be the same one that contains the <code>.git</code> folder for this repository.</p>\n\n<p>If this repository is bare, setting its working directory will turn it into a normal repository, capable of performing all the common workdir operations (checkout, status, index manipulation, etc).</p>\n","group":"repository"},"git_repository_is_bare":{"type":"function","file":"git2/repository.h","line":385,"lineto":385,"args":[{"name":"repo","type":"git_repository *","comment":"Repo to test"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":" 1 if the repository is bare, 0 otherwise."},"description":"<p>Check if a repository is bare</p>\n","comments":"","group":"repository"},"git_repository_config":{"type":"function","file":"git2/repository.h","line":401,"lineto":401,"args":[{"name":"out","type":"git_config **","comment":"Pointer to store the loaded config file"},{"name":"repo","type":"git_repository *","comment":"A repository object"}],"argline":"git_config **out, git_repository *repo","sig":"git_config **::git_repository *","return":{"type":"int","comment":" 0, or an error code"},"description":"<p>Get the configuration file for this repository.</p>\n","comments":"<p>If a configuration file has not been set, the default config set for the repository will be returned, including global and system configurations (if they are available).</p>\n\n<p>The configuration file must be freed once it&#39;s no longer being used by the user.</p>\n","group":"repository"},"git_repository_odb":{"type":"function","file":"git2/repository.h","line":417,"lineto":417,"args":[{"name":"out","type":"git_odb **","comment":"Pointer to store the loaded ODB"},{"name":"repo","type":"git_repository *","comment":"A repository object"}],"argline":"git_odb **out, git_repository *repo","sig":"git_odb **::git_repository *","return":{"type":"int","comment":" 0, or an error code"},"description":"<p>Get the Object Database for this repository.</p>\n","comments":"<p>If a custom ODB has not been set, the default database for the repository will be returned (the one located in <code>.git/objects</code>).</p>\n\n<p>The ODB must be freed once it&#39;s no longer being used by the user.</p>\n","group":"repository","examples":{"general.c":["ex/v0.19.0/general.html#git_repository_odb-59"]}},"git_repository_refdb":{"type":"function","file":"git2/repository.h","line":433,"lineto":433,"args":[{"name":"out","type":"git_refdb **","comment":"Pointer to store the loaded refdb"},{"name":"repo","type":"git_repository *","comment":"A repository object"}],"argline":"git_refdb **out, git_repository *repo","sig":"git_refdb **::git_repository *","return":{"type":"int","comment":" 0, or an error code"},"description":"<p>Get the Reference Database Backend for this repository.</p>\n","comments":"<p>If a custom refsdb has not been set, the default database for the repository will be returned (the one that manipulates loose and packed references in the <code>.git</code> directory).</p>\n\n<p>The refdb must be freed once it&#39;s no longer being used by the user.</p>\n","group":"repository"},"git_repository_index":{"type":"function","file":"git2/repository.h","line":449,"lineto":449,"args":[{"name":"out","type":"git_index **","comment":"Pointer to store the loaded index"},{"name":"repo","type":"git_repository *","comment":"A repository object"}],"argline":"git_index **out, git_repository *repo","sig":"git_index **::git_repository *","return":{"type":"int","comment":" 0, or an error code"},"description":"<p>Get the Index file for this repository.</p>\n","comments":"<p>If a custom index has not been set, the default index for the repository will be returned (the one located in <code>.git/index</code>).</p>\n\n<p>The index must be freed once it&#39;s no longer being used by the user.</p>\n","group":"repository","examples":{"general.c":["ex/v0.19.0/general.html#git_repository_index-60"]}},"git_repository_message":{"type":"function","file":"git2/repository.h","line":477,"lineto":477,"args":[{"name":"out","type":"char *","comment":"Buffer to write data into or NULL to just read required size"},{"name":"len","type":"size_t","comment":"Length of `out` buffer in bytes"},{"name":"repo","type":"git_repository *","comment":"Repository to read prepared message from"}],"argline":"char *out, size_t len, git_repository *repo","sig":"char *::size_t::git_repository *","return":{"type":"int","comment":" GIT_ENOUTFOUND if no message exists, other value \n<\n 0 for other\n         errors, or total bytes in message (may be > `len`) on success"},"description":"<p>Retrieve git&#39;s prepared message</p>\n","comments":"<p>Operations such as git revert/cherry-pick/merge with the -n option stop just short of creating a commit with the changes and save their prepared message in .git/MERGE_MSG so the next git-commit execution can present it to the user for them to amend if they wish.</p>\n\n<p>Use this function to get the contents of this file. Don&#39;t forget to remove the file after you create the commit.</p>\n\n<p>If the repository message exists and there are no errors reading it, this returns the bytes needed to store the message in memory (i.e. message file size plus one terminating NUL byte).  That value is returned even if <code>out</code> is NULL or <code>len</code> is shorter than the necessary size.</p>\n\n<p>The <code>out</code> buffer will <em>always</em> be NUL terminated, even if truncation occurs.</p>\n","group":"repository"},"git_repository_message_remove":{"type":"function","file":"git2/repository.h","line":484,"lineto":484,"args":[{"name":"repo","type":"git_repository *","comment":null}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":null},"description":"<p>Remove git&#39;s prepared message.</p>\n","comments":"<p>Remove the message that <code>git_repository_message</code> retrieves.</p>\n","group":"repository"},"git_repository_merge_cleanup":{"type":"function","file":"git2/repository.h","line":493,"lineto":493,"args":[{"name":"repo","type":"git_repository *","comment":"A repository object"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":" 0 on success, or error"},"description":"<p>Remove all the metadata associated with an ongoing git merge, including\n MERGE_HEAD, MERGE_MSG, etc.</p>\n","comments":"","group":"repository"},"git_repository_fetchhead_foreach":{"type":"function","file":"git2/repository.h","line":509,"lineto":511,"args":[{"name":"repo","type":"git_repository *","comment":"A repository object"},{"name":"callback","type":"git_repository_fetchhead_foreach_cb","comment":"Callback function"},{"name":"payload","type":"void *","comment":"Pointer to callback data (optional)"}],"argline":"git_repository *repo, git_repository_fetchhead_foreach_cb callback, void *payload","sig":"git_repository *::git_repository_fetchhead_foreach_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_ENOTFOUND, GIT_EUSER or error"},"description":"<p>Call callback &#39;callback&#39; for each entry in the given FETCH_HEAD file.</p>\n","comments":"","group":"repository"},"git_repository_mergehead_foreach":{"type":"function","file":"git2/repository.h","line":525,"lineto":527,"args":[{"name":"repo","type":"git_repository *","comment":"A repository object"},{"name":"callback","type":"git_repository_mergehead_foreach_cb","comment":"Callback function"},{"name":"payload","type":"void *","comment":"Pointer to callback data (optional)"}],"argline":"git_repository *repo, git_repository_mergehead_foreach_cb callback, void *payload","sig":"git_repository *::git_repository_mergehead_foreach_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_ENOTFOUND, GIT_EUSER or error"},"description":"<p>If a merge is in progress, call callback &#39;cb&#39; for each commit ID in the\n MERGE_HEAD file.</p>\n","comments":"","group":"repository"},"git_repository_hashfile":{"type":"function","file":"git2/repository.h","line":547,"lineto":552,"args":[{"name":"out","type":"git_oid *","comment":"Output value of calculated SHA"},{"name":"repo","type":"git_repository *","comment":"Repository pointer"},{"name":"path","type":"const char *","comment":"Path to file on disk whose contents should be hashed. If the\n             repository is not NULL, this can be a relative path."},{"name":"type","type":"git_otype","comment":"The object type to hash as (e.g. GIT_OBJ_BLOB)"},{"name":"as_path","type":"const char *","comment":"The path to use to look up filtering rules. If this is\n             NULL, then the `path` parameter will be used instead. If\n             this is passed as the empty string, then no filters will be\n             applied when calculating the hash."}],"argline":"git_oid *out, git_repository *repo, const char *path, git_otype type, const char *as_path","sig":"git_oid *::git_repository *::const char *::git_otype::const char *","return":{"type":"int","comment":null},"description":"<p>Calculate hash of file using repository filtering rules.</p>\n","comments":"<p>If you simply want to calculate the hash of a file on disk with no filters, you can just use the <code>git_odb_hashfile()</code> API.  However, if you want to hash a file in the repository and you want to apply filtering rules (e.g. crlf filters) before generating the SHA, then use this function.</p>\n","group":"repository"},"git_repository_set_head":{"type":"function","file":"git2/repository.h","line":572,"lineto":574,"args":[{"name":"repo","type":"git_repository *","comment":"Repository pointer"},{"name":"refname","type":"const char *","comment":"Canonical name of the reference the HEAD should point at"}],"argline":"git_repository *repo, const char *refname","sig":"git_repository *::const char *","return":{"type":"int","comment":" 0 on success, or an error code"},"description":"<p>Make the repository HEAD point to the specified reference.</p>\n","comments":"<p>If the provided reference points to a Tree or a Blob, the HEAD is unaltered and -1 is returned.</p>\n\n<p>If the provided reference points to a branch, the HEAD will point to that branch, staying attached, or become attached if it isn&#39;t yet. If the branch doesn&#39;t exist yet, no error will be return. The HEAD will then be attached to an unborn branch.</p>\n\n<p>Otherwise, the HEAD will be detached and will directly point to the Commit.</p>\n","group":"repository"},"git_repository_set_head_detached":{"type":"function","file":"git2/repository.h","line":592,"lineto":594,"args":[{"name":"repo","type":"git_repository *","comment":"Repository pointer"},{"name":"commitish","type":"const git_oid *","comment":"Object id of the Commit the HEAD should point to"}],"argline":"git_repository *repo, const git_oid *commitish","sig":"git_repository *::const git_oid *","return":{"type":"int","comment":" 0 on success, or an error code"},"description":"<p>Make the repository HEAD directly point to the Commit.</p>\n","comments":"<p>If the provided committish cannot be found in the repository, the HEAD is unaltered and GIT_ENOTFOUND is returned.</p>\n\n<p>If the provided commitish cannot be peeled into a commit, the HEAD is unaltered and -1 is returned.</p>\n\n<p>Otherwise, the HEAD will eventually be detached and will directly point to the peeled Commit.</p>\n","group":"repository"},"git_repository_detach_head":{"type":"function","file":"git2/repository.h","line":613,"lineto":614,"args":[{"name":"repo","type":"git_repository *","comment":"Repository pointer"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":" 0 on success, GIT_EORPHANEDHEAD when HEAD points to a non existing\n branch or an error code"},"description":"<p>Detach the HEAD.</p>\n","comments":"<p>If the HEAD is already detached and points to a Commit, 0 is returned.</p>\n\n<p>If the HEAD is already detached and points to a Tag, the HEAD is updated into making it point to the peeled Commit, and 0 is returned.</p>\n\n<p>If the HEAD is already detached and points to a non commitish, the HEAD is  unaltered, and -1 is returned.</p>\n\n<p>Otherwise, the HEAD will be detached and point to the peeled Commit.</p>\n","group":"repository"},"git_repository_state":{"type":"function","file":"git2/repository.h","line":636,"lineto":636,"args":[{"name":"repo","type":"git_repository *","comment":"Repository pointer"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":" The state of the repository"},"description":"<p>Determines the status of a git repository - ie, whether an operation\n (merge, cherry-pick, etc) is in progress.</p>\n","comments":"","group":"repository"},"git_repository_set_namespace":{"type":"function","file":"git2/repository.h","line":650,"lineto":650,"args":[{"name":"repo","type":"git_repository *","comment":"The repo"},{"name":"nmspace","type":"const char *","comment":"The namespace. This should not include the refs\n\tfolder, e.g. to namespace all references under `refs/namespaces/foo/`,\n\tuse `foo` as the namespace."}],"argline":"git_repository *repo, const char *nmspace","sig":"git_repository *::const char *","return":{"type":"int","comment":" 0 on success, -1 on error"},"description":"<p>Sets the active namespace for this Git Repository</p>\n","comments":"<p>This namespace affects all reference operations for the repo. See <code>man gitnamespaces</code></p>\n","group":"repository"},"git_repository_get_namespace":{"type":"function","file":"git2/repository.h","line":658,"lineto":658,"args":[{"name":"repo","type":"git_repository *","comment":"The repo"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"const char *","comment":" the active namespace, or NULL if there isn't one"},"description":"<p>Get the currently active namespace for this repository</p>\n","comments":"","group":"repository"},"git_repository_is_shallow":{"type":"function","file":"git2/repository.h","line":667,"lineto":667,"args":[{"name":"repo","type":"git_repository *","comment":"The repository"}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":" 1 if shallow, zero if not"},"description":"<p>Determine if the repository was a shallow clone</p>\n","comments":"","group":"repository"},"git_revparse_single":{"type":"function","file":"git2/revparse.h","line":33,"lineto":33,"args":[{"name":"out","type":"git_object **","comment":"pointer to output object"},{"name":"repo","type":"git_repository *","comment":"the repository to search in"},{"name":"spec","type":"const char *","comment":"the textual specification for an object"}],"argline":"git_object **out, git_repository *repo, const char *spec","sig":"git_object **::git_repository *::const char *","return":{"type":"int","comment":" 0 on success, GIT_ENOTFOUND, GIT_EAMBIGUOUS, GIT_EINVALIDSPEC or an error code"},"description":"<p>Find a single object, as specified by a revision string. See <code>man gitrevisions</code>,\n or http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions for\n information on the syntax accepted.</p>\n","comments":"","group":"revparse"},"git_revparse_ext":{"type":"function","file":"git2/revparse.h","line":52,"lineto":56,"args":[{"name":"object_out","type":"git_object **","comment":"pointer to output object"},{"name":"reference_out","type":"git_reference **","comment":"pointer to output reference or NULL"},{"name":"repo","type":"git_repository *","comment":"the repository to search in"},{"name":"spec","type":"const char *","comment":"the textual specification for an object"}],"argline":"git_object **object_out, git_reference **reference_out, git_repository *repo, const char *spec","sig":"git_object **::git_reference **::git_repository *::const char *","return":{"type":"int","comment":" 0 on success, GIT_ENOTFOUND, GIT_EAMBIGUOUS, GIT_EINVALIDSPEC\n or an error code"},"description":"<p>Find a single object, as specified by a revision string.\n See <code>man gitrevisions</code>,\n or http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions for\n information on the syntax accepted.</p>\n","comments":"<p>In some cases (<code>@{&lt;-n&gt;}</code> or <code>&lt;branchname&gt;@{upstream}</code>), the expression may point to an intermediate reference. When such expressions are being passed in, <code>reference_out</code> will be valued as well.</p>\n","group":"revparse"},"git_revparse":{"type":"function","file":"git2/revparse.h","line":94,"lineto":97,"args":[{"name":"revspec","type":"git_revspec *","comment":"Pointer to an user-allocated git_revspec struct where the result\n\tof the rev-parse will be stored"},{"name":"repo","type":"git_repository *","comment":"the repository to search in"},{"name":"spec","type":"const char *","comment":"the rev-parse spec to parse"}],"argline":"git_revspec *revspec, git_repository *repo, const char *spec","sig":"git_revspec *::git_repository *::const char *","return":{"type":"int","comment":" 0 on success, GIT_INVALIDSPEC, GIT_ENOTFOUND, GIT_EAMBIGUOUS or an error code"},"description":"<p>Parse a revision string for <code>from</code>, <code>to</code>, and intent. See <code>man gitrevisions</code> or\n http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions for information\n on the syntax accepted.</p>\n","comments":"","group":"git2_revparse"},"git_revwalk_new":{"type":"function","file":"git2/revwalk.h","line":70,"lineto":70,"args":[{"name":"out","type":"git_revwalk **","comment":"pointer to the new revision walker"},{"name":"repo","type":"git_repository *","comment":"the repo to walk through"}],"argline":"git_revwalk **out, git_repository *repo","sig":"git_revwalk **::git_repository *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Allocate a new revision walker to iterate through a repo.</p>\n","comments":"<p>This revision walker uses a custom memory pool and an internal commit cache, so it is relatively expensive to allocate.</p>\n\n<p>For maximum performance, this revision walker should be reused for different walks.</p>\n\n<p>This revision walker is <em>not</em> thread safe: it may only be used to walk a repository on a single thread; however, it is possible to have several revision walkers in several different threads walking the same repository.</p>\n","group":"revwalk","examples":{"general.c":["ex/v0.19.0/general.html#git_revwalk_new-61"]}},"git_revwalk_reset":{"type":"function","file":"git2/revwalk.h","line":85,"lineto":85,"args":[{"name":"walker","type":"git_revwalk *","comment":"handle to reset."}],"argline":"git_revwalk *walker","sig":"git_revwalk *","return":{"type":"void","comment":null},"description":"<p>Reset the revision walker for reuse.</p>\n","comments":"<p>This will clear all the pushed and hidden commits, and leave the walker in a blank state (just like at creation) ready to receive new commit pushes and start a new walk.</p>\n\n<p>The revision walk is automatically reset when a walk is over.</p>\n","group":"revwalk"},"git_revwalk_push":{"type":"function","file":"git2/revwalk.h","line":102,"lineto":102,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal."},{"name":"id","type":"const git_oid *","comment":"the oid of the commit to start from."}],"argline":"git_revwalk *walk, const git_oid *id","sig":"git_revwalk *::const git_oid *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Mark a commit to start traversal from.</p>\n","comments":"<p>The given OID must belong to a commit on the walked repository.</p>\n\n<p>The given commit will be used as one of the roots when starting the revision walk. At least one commit must be pushed onto the walker before a walk can be started.</p>\n","group":"revwalk","examples":{"general.c":["ex/v0.19.0/general.html#git_revwalk_push-62"]}},"git_revwalk_push_glob":{"type":"function","file":"git2/revwalk.h","line":117,"lineto":117,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal"},{"name":"glob","type":"const char *","comment":"the glob pattern references should match"}],"argline":"git_revwalk *walk, const char *glob","sig":"git_revwalk *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Push matching references</p>\n","comments":"<p>The OIDs pointed to by the references that match the given glob pattern will be pushed to the revision walker.</p>\n\n<p>A leading &#39;refs/&#39; is implied if not present as well as a trailing &#39;/ <em>&#39; if the glob lacks &#39;?&#39;, &#39;</em>&#39; or &#39;[&#39;.</p>\n","group":"revwalk"},"git_revwalk_push_head":{"type":"function","file":"git2/revwalk.h","line":125,"lineto":125,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal"}],"argline":"git_revwalk *walk","sig":"git_revwalk *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Push the repository&#39;s HEAD</p>\n","comments":"","group":"revwalk"},"git_revwalk_hide":{"type":"function","file":"git2/revwalk.h","line":140,"lineto":140,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal."},{"name":"commit_id","type":"const git_oid *","comment":"the oid of commit that will be ignored during the traversal"}],"argline":"git_revwalk *walk, const git_oid *commit_id","sig":"git_revwalk *::const git_oid *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Mark a commit (and its ancestors) uninteresting for the output.</p>\n","comments":"<p>The given OID must belong to a commit on the walked repository.</p>\n\n<p>The resolved commit and all its parents will be hidden from the output on the revision walk.</p>\n","group":"revwalk"},"git_revwalk_hide_glob":{"type":"function","file":"git2/revwalk.h","line":156,"lineto":156,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal"},{"name":"glob","type":"const char *","comment":"the glob pattern references should match"}],"argline":"git_revwalk *walk, const char *glob","sig":"git_revwalk *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Hide matching references.</p>\n","comments":"<p>The OIDs pointed to by the references that match the given glob pattern and their ancestors will be hidden from the output on the revision walk.</p>\n\n<p>A leading &#39;refs/&#39; is implied if not present as well as a trailing &#39;/ <em>&#39; if the glob lacks &#39;?&#39;, &#39;</em>&#39; or &#39;[&#39;.</p>\n","group":"revwalk"},"git_revwalk_hide_head":{"type":"function","file":"git2/revwalk.h","line":164,"lineto":164,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal"}],"argline":"git_revwalk *walk","sig":"git_revwalk *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Hide the repository&#39;s HEAD</p>\n","comments":"","group":"revwalk"},"git_revwalk_push_ref":{"type":"function","file":"git2/revwalk.h","line":175,"lineto":175,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal"},{"name":"refname","type":"const char *","comment":"the reference to push"}],"argline":"git_revwalk *walk, const char *refname","sig":"git_revwalk *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Push the OID pointed to by a reference</p>\n","comments":"<p>The reference must point to a commit.</p>\n","group":"revwalk"},"git_revwalk_hide_ref":{"type":"function","file":"git2/revwalk.h","line":186,"lineto":186,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal"},{"name":"refname","type":"const char *","comment":"the reference to hide"}],"argline":"git_revwalk *walk, const char *refname","sig":"git_revwalk *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Hide the OID pointed to by a reference</p>\n","comments":"<p>The reference must point to a commit.</p>\n","group":"revwalk"},"git_revwalk_next":{"type":"function","file":"git2/revwalk.h","line":206,"lineto":206,"args":[{"name":"out","type":"git_oid *","comment":"Pointer where to store the oid of the next commit"},{"name":"walk","type":"git_revwalk *","comment":"the walker to pop the commit from."}],"argline":"git_oid *out, git_revwalk *walk","sig":"git_oid *::git_revwalk *","return":{"type":"int","comment":" 0 if the next commit was found;\n\tGIT_ITEROVER if there are no commits left to iterate"},"description":"<p>Get the next commit from the revision walk.</p>\n","comments":"<p>The initial call to this method is <em>not</em> blocking when iterating through a repo with a time-sorting mode.</p>\n\n<p>Iterating with Topological or inverted modes makes the initial call blocking to preprocess the commit list, but this block should be mostly unnoticeable on most repositories (topological preprocessing times at 0.3s on the git.git repo).</p>\n\n<p>The revision walker is reset when the walk is over.</p>\n","group":"revwalk","examples":{"general.c":["ex/v0.19.0/general.html#git_revwalk_next-63"]}},"git_revwalk_sorting":{"type":"function","file":"git2/revwalk.h","line":217,"lineto":217,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal."},{"name":"sort_mode","type":"unsigned int","comment":"combination of GIT_SORT_XXX flags"}],"argline":"git_revwalk *walk, unsigned int sort_mode","sig":"git_revwalk *::unsigned int","return":{"type":"void","comment":null},"description":"<p>Change the sorting mode when iterating through the\n repository&#39;s contents.</p>\n","comments":"<p>Changing the sorting mode resets the walker.</p>\n","group":"revwalk","examples":{"general.c":["ex/v0.19.0/general.html#git_revwalk_sorting-64"]}},"git_revwalk_push_range":{"type":"function","file":"git2/revwalk.h","line":232,"lineto":232,"args":[{"name":"walk","type":"git_revwalk *","comment":"the walker being used for the traversal"},{"name":"range","type":"const char *","comment":"the range"}],"argline":"git_revwalk *walk, const char *range","sig":"git_revwalk *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Push and hide the respective endpoints of the given range.</p>\n","comments":"<p>The range should be of the form   <commit>..<commit> where each <commit> is in the form accepted by &#39;git_revparse_single&#39;. The left-hand commit will be hidden and the right-hand commit pushed.</p>\n","group":"revwalk"},"git_revwalk_free":{"type":"function","file":"git2/revwalk.h","line":239,"lineto":239,"args":[{"name":"walk","type":"git_revwalk *","comment":"traversal handle to close. If NULL nothing occurs."}],"argline":"git_revwalk *walk","sig":"git_revwalk *","return":{"type":"void","comment":null},"description":"<p>Free a revision walker previously allocated.</p>\n","comments":"","group":"revwalk","examples":{"general.c":["ex/v0.19.0/general.html#git_revwalk_free-65"]}},"git_revwalk_repository":{"type":"function","file":"git2/revwalk.h","line":248,"lineto":248,"args":[{"name":"walk","type":"git_revwalk *","comment":"the revision walker"}],"argline":"git_revwalk *walk","sig":"git_revwalk *","return":{"type":"git_repository *","comment":" the repository being walked"},"description":"<p>Return the repository on which this walker\n is operating.</p>\n","comments":"","group":"revwalk"},"git_signature_new":{"type":"function","file":"git2/signature.h","line":37,"lineto":37,"args":[{"name":"out","type":"git_signature **","comment":"new signature, in case of error NULL"},{"name":"name","type":"const char *","comment":"name of the person"},{"name":"email","type":"const char *","comment":"email of the person"},{"name":"time","type":"git_time_t","comment":"time when the action happened"},{"name":"offset","type":"int","comment":"timezone offset in minutes for the time"}],"argline":"git_signature **out, const char *name, const char *email, git_time_t time, int offset","sig":"git_signature **::const char *::const char *::git_time_t::int","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create a new action signature.</p>\n","comments":"<p>Call <code>git_signature_free()</code> to free the data.</p>\n\n<p>Note: angle brackets (&#39;&lt;&#39; and &#39;&gt;&#39;) characters are not allowed to be used in either the <code>name</code> or the <code>email</code> parameter.</p>\n","group":"signature","examples":{"general.c":["ex/v0.19.0/general.html#git_signature_new-66","ex/v0.19.0/general.html#git_signature_new-67"]}},"git_signature_now":{"type":"function","file":"git2/signature.h","line":49,"lineto":49,"args":[{"name":"out","type":"git_signature **","comment":"new signature, in case of error NULL"},{"name":"name","type":"const char *","comment":"name of the person"},{"name":"email","type":"const char *","comment":"email of the person"}],"argline":"git_signature **out, const char *name, const char *email","sig":"git_signature **::const char *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create a new action signature with a timestamp of &#39;now&#39;.</p>\n","comments":"<p>Call <code>git_signature_free()</code> to free the data.</p>\n","group":"signature"},"git_signature_dup":{"type":"function","file":"git2/signature.h","line":61,"lineto":61,"args":[{"name":"sig","type":"const git_signature *","comment":"signature to duplicated"}],"argline":"const git_signature *sig","sig":"const git_signature *","return":{"type":"git_signature *","comment":" a copy of sig, NULL on out of memory"},"description":"<p>Create a copy of an existing signature.  All internal strings are also\n duplicated.</p>\n","comments":"<p>Call <code>git_signature_free()</code> to free the data.</p>\n","group":"signature"},"git_signature_free":{"type":"function","file":"git2/signature.h","line":72,"lineto":72,"args":[{"name":"sig","type":"git_signature *","comment":"signature to free"}],"argline":"git_signature *sig","sig":"git_signature *","return":{"type":"void","comment":null},"description":"<p>Free an existing signature.</p>\n","comments":"<p>Because the signature is not an opaque structure, it is legal to free it manually, but be sure to free the &quot;name&quot; and &quot;email&quot; strings in addition to the structure itself.</p>\n","group":"signature"},"git_stash_foreach":{"type":"function","file":"git2/stash.h","line":99,"lineto":102,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where to find the stash."},{"name":"callback","type":"git_stash_cb","comment":"Callback to invoke per found stashed state. The most recent\n stash state will be enumerated first."},{"name":"payload","type":"void *","comment":"Extra parameter to callback function."}],"argline":"git_repository *repo, git_stash_cb callback, void *payload","sig":"git_repository *::git_stash_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback, or error code"},"description":"<p>Loop over all the stashed states and issue a callback for each one.</p>\n","comments":"<p>If the callback returns a non-zero value, this will stop looping.</p>\n","group":"stash"},"git_stash_drop":{"type":"function","file":"git2/stash.h","line":115,"lineto":117,"args":[{"name":"repo","type":"git_repository *","comment":"The owning repository."},{"name":"index","type":"size_t","comment":"The position within the stash list. 0 points to the\n most recent stashed state."}],"argline":"git_repository *repo, size_t index","sig":"git_repository *::size_t","return":{"type":"int","comment":" 0 on success, or error code"},"description":"<p>Remove a single stashed state from the stash list.</p>\n","comments":"","group":"stash"},"git_status_foreach":{"type":"function","file":"git2/status.h","line":207,"lineto":210,"args":[{"name":"repo","type":"git_repository *","comment":"A repository object"},{"name":"callback","type":"git_status_cb","comment":"The function to call on each file"},{"name":"payload","type":"void *","comment":"Pointer to pass through to callback function"}],"argline":"git_repository *repo, git_status_cb callback, void *payload","sig":"git_repository *::git_status_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback, or error code"},"description":"<p>Gather file statuses and run a callback for each one.</p>\n","comments":"<p>The callback is passed the path of the file, the status (a combination of the <code>git_status_t</code> values above) and the <code>payload</code> data pointer passed into this function.</p>\n\n<p>If the callback returns a non-zero value, this function will stop looping and return GIT_EUSER.</p>\n","group":"status"},"git_status_foreach_ext":{"type":"function","file":"git2/status.h","line":226,"lineto":230,"args":[{"name":"repo","type":"git_repository *","comment":"Repository object"},{"name":"opts","type":"const git_status_options *","comment":"Status options structure"},{"name":"callback","type":"git_status_cb","comment":"The function to call on each file"},{"name":"payload","type":"void *","comment":"Pointer to pass through to callback function"}],"argline":"git_repository *repo, const git_status_options *opts, git_status_cb callback, void *payload","sig":"git_repository *::const git_status_options *::git_status_cb::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback, or error code"},"description":"<p>Gather file status information and run callbacks as requested.</p>\n","comments":"<p>This is an extended version of the <code>git_status_foreach()</code> API that allows for more granular control over which paths will be processed and in what order.  See the <code>git_status_options</code> structure for details about the additional controls that this makes available.</p>\n","group":"status"},"git_status_file":{"type":"function","file":"git2/status.h","line":245,"lineto":248,"args":[{"name":"status_flags","type":"unsigned int *","comment":"The status value for the file"},{"name":"repo","type":"git_repository *","comment":"A repository object"},{"name":"path","type":"const char *","comment":"The file to retrieve status for, rooted at the repo's workdir"}],"argline":"unsigned int *status_flags, git_repository *repo, const char *path","sig":"unsigned int *::git_repository *::const char *","return":{"type":"int","comment":" 0 on success, GIT_ENOTFOUND if the file is not found in the HEAD,\n      index, and work tree, GIT_EINVALIDPATH if `path` points at a folder,\n      GIT_EAMBIGUOUS if \"path\" matches multiple files, -1 on other error."},"description":"<p>Get file status for a single file.</p>\n","comments":"<p>This is not quite the same as calling <code>git_status_foreach_ext()</code> with the pathspec set to the specified path.</p>\n","group":"status"},"git_status_list_new":{"type":"function","file":"git2/status.h","line":258,"lineto":261,"args":[{"name":"out","type":"git_status_list **","comment":"Pointer to store the status results in"},{"name":"repo","type":"git_repository *","comment":"Repository object"},{"name":"opts","type":"const git_status_options *","comment":"Status options structure"}],"argline":"git_status_list **out, git_repository *repo, const git_status_options *opts","sig":"git_status_list **::git_repository *::const git_status_options *","return":{"type":"int","comment":" 0 on success or error code"},"description":"<p>Gather file status information and populate the <code>git_status_list</code>.</p>\n","comments":"","group":"status"},"git_status_list_entrycount":{"type":"function","file":"git2/status.h","line":269,"lineto":270,"args":[{"name":"statuslist","type":"git_status_list *","comment":"Existing status list object"}],"argline":"git_status_list *statuslist","sig":"git_status_list *","return":{"type":"size_t","comment":" the number of status entries"},"description":"<p>Gets the count of status entries in this list.</p>\n","comments":"","group":"status"},"git_status_byindex":{"type":"function","file":"git2/status.h","line":281,"lineto":283,"args":[{"name":"statuslist","type":"git_status_list *","comment":"Existing status list object"},{"name":"idx","type":"size_t","comment":"Position of the entry"}],"argline":"git_status_list *statuslist, size_t idx","sig":"git_status_list *::size_t","return":{"type":"const git_status_entry *","comment":" Pointer to the entry; NULL if out of bounds"},"description":"<p>Get a pointer to one of the entries in the status list.</p>\n","comments":"<p>The entry is not modifiable and should not be freed.</p>\n","group":"status"},"git_status_list_free":{"type":"function","file":"git2/status.h","line":290,"lineto":291,"args":[{"name":"statuslist","type":"git_status_list *","comment":"Existing status list object"}],"argline":"git_status_list *statuslist","sig":"git_status_list *","return":{"type":"void","comment":null},"description":"<p>Free an existing status list</p>\n","comments":"","group":"status"},"git_status_should_ignore":{"type":"function","file":"git2/status.h","line":309,"lineto":312,"args":[{"name":"ignored","type":"int *","comment":"Boolean returning 0 if the file is not ignored, 1 if it is"},{"name":"repo","type":"git_repository *","comment":"A repository object"},{"name":"path","type":"const char *","comment":"The file to check ignores for, rooted at the repo's workdir."}],"argline":"int *ignored, git_repository *repo, const char *path","sig":"int *::git_repository *::const char *","return":{"type":"int","comment":" 0 if ignore rules could be processed for the file (regardless\n         of whether it exists or not), or an error \n<\n 0 if they could not."},"description":"<p>Test if the ignore rules apply to a given file.</p>\n","comments":"<p>This function checks the ignore rules to see if they would apply to the given file.  This indicates if the file would be ignored regardless of whether the file is already in the index or committed to the repository.</p>\n\n<p>One way to think of this is if you were to do &quot;git add .&quot; on the directory containing the file, would it be added or not?</p>\n","group":"status"},"git_strarray_free":{"type":"function","file":"git2/strarray.h","line":41,"lineto":41,"args":[{"name":"array","type":"git_strarray *","comment":"git_strarray from which to free string data"}],"argline":"git_strarray *array","sig":"git_strarray *","return":{"type":"void","comment":null},"description":"<p>Close a string array object</p>\n","comments":"<p>This method should be called on <code>git_strarray</code> objects where the strings array is allocated and contains allocated strings, such as what you would get from <code>git_strarray_copy()</code>.  Not doing so, will result in a memory leak.</p>\n\n<p>This does not free the <code>git_strarray</code> itself, since the library will never allocate that object directly itself (it is more commonly embedded inside another struct or created on the stack).</p>\n","group":"strarray","examples":{"general.c":["ex/v0.19.0/general.html#git_strarray_free-68"]}},"git_strarray_copy":{"type":"function","file":"git2/strarray.h","line":53,"lineto":53,"args":[{"name":"tgt","type":"git_strarray *","comment":"target"},{"name":"src","type":"const git_strarray *","comment":"source"}],"argline":"git_strarray *tgt, const git_strarray *src","sig":"git_strarray *::const git_strarray *","return":{"type":"int","comment":" 0 on success, \n<\n 0 on allocation failure"},"description":"<p>Copy a string array object from source to target.</p>\n","comments":"<p>Note: target is overwritten and hence should be empty, otherwise its contents are leaked.  Call git_strarray_free() if necessary.</p>\n","group":"strarray"},"git_submodule_lookup":{"type":"function","file":"git2/submodule.h","line":178,"lineto":181,"args":[{"name":"submodule","type":"git_submodule **","comment":"Pointer to submodule description object pointer.."},{"name":"repo","type":"git_repository *","comment":"The repository."},{"name":"name","type":"const char *","comment":"The name of the submodule.  Trailing slashes will be ignored."}],"argline":"git_submodule **submodule, git_repository *repo, const char *name","sig":"git_submodule **::git_repository *::const char *","return":{"type":"int","comment":" 0 on success, GIT_ENOTFOUND if submodule does not exist,\n         GIT_EEXISTS if submodule exists in working directory only, -1 on\n         other errors."},"description":"<p>Lookup submodule information by name or path.</p>\n","comments":"<p>Given either the submodule name or path (they are usually the same), this returns a structure describing the submodule.</p>\n\n<p>There are two expected error scenarios:</p>\n\n<ul>\n<li>The submodule is not mentioned in the HEAD, the index, and the config,   but does &quot;exist&quot; in the working directory (i.e. there is a subdirectory   that is a valid self-contained git repo).  In this case, this function   returns GIT_EEXISTS to indicate the the submodule exists but not in a   state where a git_submodule can be instantiated. - The submodule is not mentioned in the HEAD, index, or config and the   working directory doesn&#39;t contain a value git repo at that path.   There may or may not be anything else at that path, but nothing that   looks like a submodule.  In this case, this returns GIT_ENOTFOUND.</li>\n</ul>\n\n<p>The submodule object is owned by the containing repo and will be freed when the repo is freed.  The caller need not free the submodule.</p>\n","group":"submodule"},"git_submodule_foreach":{"type":"function","file":"git2/submodule.h","line":201,"lineto":204,"args":[{"name":"repo","type":"git_repository *","comment":"The repository"},{"name":"callback","type":"int (*)(git_submodule *, const char *, void *)","comment":"Function to be called with the name of each submodule.\n        Return a non-zero value to terminate the iteration."},{"name":"payload","type":"void *","comment":"Extra data to pass to callback"}],"argline":"git_repository *repo, int (*)(git_submodule *, const char *, void *) callback, void *payload","sig":"git_repository *::int (*)(git_submodule *, const char *, void *)::void *","return":{"type":"int","comment":" 0 on success, -1 on error, or non-zero return value of callback"},"description":"<p>Iterate over all tracked submodules of a repository.</p>\n","comments":"<p>See the note on <code>git_submodule</code> above.  This iterates over the tracked submodules as decribed therein.</p>\n\n<p>If you are concerned about items in the working directory that look like submodules but are not tracked, the diff API will generate a diff record for workdir items that look like submodules but are not tracked, showing them as added in the workdir.  Also, the status API will treat the entire subdirectory of a contained git repo as a single GIT_STATUS_WT_NEW item.</p>\n","group":"submodule"},"git_submodule_add_setup":{"type":"function","file":"git2/submodule.h","line":229,"lineto":234,"args":[{"name":"submodule","type":"git_submodule **","comment":"The newly created submodule ready to open for clone"},{"name":"repo","type":"git_repository *","comment":"Superproject repository to contain the new submodule"},{"name":"url","type":"const char *","comment":"URL for the submodules remote"},{"name":"path","type":"const char *","comment":"Path at which the submodule should be created"},{"name":"use_gitlink","type":"int","comment":"Should workdir contain a gitlink to the repo in\n        .git/modules vs. repo directly in workdir."}],"argline":"git_submodule **submodule, git_repository *repo, const char *url, const char *path, int use_gitlink","sig":"git_submodule **::git_repository *::const char *::const char *::int","return":{"type":"int","comment":" 0 on success, GIT_EEXISTS if submodule already exists,\n         -1 on other errors."},"description":"<p>Set up a new git submodule for checkout.</p>\n","comments":"<p>This does &quot;git submodule add&quot; up to the fetch and checkout of the submodule contents.  It preps a new submodule, creates an entry in .gitmodules and creates an empty initialized repository either at the given path in the working directory or in .git/modules with a gitlink from the working directory to the new repo.</p>\n\n<p>To fully emulate &quot;git submodule add&quot; call this function, then open the submodule repo and perform the clone step as needed.  Lastly, call <code>git_submodule_add_finalize()</code> to wrap up adding the new submodule and .gitmodules to the index to be ready to commit.</p>\n","group":"submodule"},"git_submodule_add_finalize":{"type":"function","file":"git2/submodule.h","line":246,"lineto":246,"args":[{"name":"submodule","type":"git_submodule *","comment":"The submodule to finish adding."}],"argline":"git_submodule *submodule","sig":"git_submodule *","return":{"type":"int","comment":null},"description":"<p>Resolve the setup of a new git submodule.</p>\n","comments":"<p>This should be called on a submodule once you have called add setup and done the clone of the submodule.  This adds the .gitmodules file and the newly cloned submodule to the index to be ready to be committed (but doesn&#39;t actually do the commit).</p>\n","group":"submodule"},"git_submodule_add_to_index":{"type":"function","file":"git2/submodule.h","line":258,"lineto":260,"args":[{"name":"submodule","type":"git_submodule *","comment":"The submodule to add to the index"},{"name":"write_index","type":"int","comment":"Boolean if this should immediately write the index\n            file.  If you pass this as false, you will have to get the\n            git_index and explicitly call `git_index_write()` on it to\n            save the change."}],"argline":"git_submodule *submodule, int write_index","sig":"git_submodule *::int","return":{"type":"int","comment":" 0 on success, \n<\n0 on failure"},"description":"<p>Add current submodule HEAD commit to index of superproject.</p>\n","comments":"","group":"submodule"},"git_submodule_save":{"type":"function","file":"git2/submodule.h","line":274,"lineto":274,"args":[{"name":"submodule","type":"git_submodule *","comment":"The submodule to write."}],"argline":"git_submodule *submodule","sig":"git_submodule *","return":{"type":"int","comment":" 0 on success, \n<\n0 on failure."},"description":"<p>Write submodule settings to .gitmodules file.</p>\n","comments":"<p>This commits any in-memory changes to the submodule to the gitmodules file on disk.  You may also be interested in <code>git_submodule_init()</code> which writes submodule info to &quot;.git/config&quot; (which is better for local changes to submodule settings) and/or <code>git_submodule_sync()</code> which writes settings about remotes to the actual submodule repository.</p>\n","group":"submodule"},"git_submodule_owner":{"type":"function","file":"git2/submodule.h","line":287,"lineto":287,"args":[{"name":"submodule","type":"git_submodule *","comment":"Pointer to submodule object"}],"argline":"git_submodule *submodule","sig":"git_submodule *","return":{"type":"git_repository *","comment":" Pointer to `git_repository`"},"description":"<p>Get the containing repository for a submodule.</p>\n","comments":"<p>This returns a pointer to the repository that contains the submodule. This is a just a reference to the repository that was passed to the original <code>git_submodule_lookup()</code> call, so if that repository has been freed, then this may be a dangling reference.</p>\n","group":"submodule"},"git_submodule_name":{"type":"function","file":"git2/submodule.h","line":295,"lineto":295,"args":[{"name":"submodule","type":"git_submodule *","comment":"Pointer to submodule object"}],"argline":"git_submodule *submodule","sig":"git_submodule *","return":{"type":"const char *","comment":" Pointer to the submodule name"},"description":"<p>Get the name of submodule.</p>\n","comments":"","group":"submodule"},"git_submodule_path":{"type":"function","file":"git2/submodule.h","line":306,"lineto":306,"args":[{"name":"submodule","type":"git_submodule *","comment":"Pointer to submodule object"}],"argline":"git_submodule *submodule","sig":"git_submodule *","return":{"type":"const char *","comment":" Pointer to the submodule path"},"description":"<p>Get the path to the submodule.</p>\n","comments":"<p>The path is almost always the same as the submodule name, but the two are actually not required to match.</p>\n","group":"submodule"},"git_submodule_url":{"type":"function","file":"git2/submodule.h","line":314,"lineto":314,"args":[{"name":"submodule","type":"git_submodule *","comment":"Pointer to submodule object"}],"argline":"git_submodule *submodule","sig":"git_submodule *","return":{"type":"const char *","comment":" Pointer to the submodule url"},"description":"<p>Get the URL for the submodule.</p>\n","comments":"","group":"submodule"},"git_submodule_set_url":{"type":"function","file":"git2/submodule.h","line":330,"lineto":330,"args":[{"name":"submodule","type":"git_submodule *","comment":"Pointer to the submodule object"},{"name":"url","type":"const char *","comment":"URL that should be used for the submodule"}],"argline":"git_submodule *submodule, const char *url","sig":"git_submodule *::const char *","return":{"type":"int","comment":" 0 on success, \n<\n0 on failure"},"description":"<p>Set the URL for the submodule.</p>\n","comments":"<p>This sets the URL in memory for the submodule. This will be used for any following submodule actions while this submodule data is in memory.</p>\n\n<p>After calling this, you may wish to call <code>git_submodule_save()</code> to write the changes back to the &quot;.gitmodules&quot; file and <code>git_submodule_sync()</code> to write the changes to the checked out submodule repository.</p>\n","group":"submodule"},"git_submodule_index_id":{"type":"function","file":"git2/submodule.h","line":338,"lineto":338,"args":[{"name":"submodule","type":"git_submodule *","comment":"Pointer to submodule object"}],"argline":"git_submodule *submodule","sig":"git_submodule *","return":{"type":"const git_oid *","comment":" Pointer to git_oid or NULL if submodule is not in index."},"description":"<p>Get the OID for the submodule in the index.</p>\n","comments":"","group":"submodule"},"git_submodule_head_id":{"type":"function","file":"git2/submodule.h","line":346,"lineto":346,"args":[{"name":"submodule","type":"git_submodule *","comment":"Pointer to submodule object"}],"argline":"git_submodule *submodule","sig":"git_submodule *","return":{"type":"const git_oid *","comment":" Pointer to git_oid or NULL if submodule is not in the HEAD."},"description":"<p>Get the OID for the submodule in the current HEAD tree.</p>\n","comments":"","group":"submodule"},"git_submodule_wd_id":{"type":"function","file":"git2/submodule.h","line":359,"lineto":359,"args":[{"name":"submodule","type":"git_submodule *","comment":"Pointer to submodule object"}],"argline":"git_submodule *submodule","sig":"git_submodule *","return":{"type":"const git_oid *","comment":" Pointer to git_oid or NULL if submodule is not checked out."},"description":"<p>Get the OID for the submodule in the current working directory.</p>\n","comments":"<p>This returns the OID that corresponds to looking up &#39;HEAD&#39; in the checked out submodule.  If there are pending changes in the index or anything else, this won&#39;t notice that.  You should call <code>git_submodule_status()</code> for a more complete picture about the state of the working directory.</p>\n","group":"submodule"},"git_submodule_ignore":{"type":"function","file":"git2/submodule.h","line":379,"lineto":380,"args":[{"name":"submodule","type":"git_submodule *","comment":null}],"argline":"git_submodule *submodule","sig":"git_submodule *","return":{"type":"git_submodule_ignore_t","comment":null},"description":"<p>Get the ignore rule for the submodule.</p>\n","comments":"<p>There are four ignore values:</p>\n\n<ul>\n<li><strong>GIT_SUBMODULE_IGNORE_NONE</strong> will consider any change to the contents    of the submodule from a clean checkout to be dirty, including the    addition of untracked files.  This is the default if unspecified.  - <strong>GIT_SUBMODULE_IGNORE_UNTRACKED</strong> examines the contents of the    working tree (i.e. call <code>git_status_foreach()</code> on the submodule) but    UNTRACKED files will not count as making the submodule dirty.  - <strong>GIT_SUBMODULE_IGNORE_DIRTY</strong> means to only check if the HEAD of the    submodule has moved for status.  This is fast since it does not need to    scan the working tree of the submodule at all.  - <strong>GIT_SUBMODULE_IGNORE_ALL</strong> means not to open the submodule repo.    The working directory will be consider clean so long as there is a    checked out version present.</li>\n</ul>\n","group":"submodule"},"git_submodule_set_ignore":{"type":"function","file":"git2/submodule.h","line":396,"lineto":398,"args":[{"name":"submodule","type":"git_submodule *","comment":null},{"name":"ignore","type":"git_submodule_ignore_t","comment":null}],"argline":"git_submodule *submodule, git_submodule_ignore_t ignore","sig":"git_submodule *::git_submodule_ignore_t","return":{"type":"git_submodule_ignore_t","comment":" old value for ignore"},"description":"<p>Set the ignore rule for the submodule.</p>\n","comments":"<p>This sets the ignore rule in memory for the submodule.  This will be used for any following actions (such as <code>git_submodule_status()</code>) while the submodule is in memory.  You should call <code>git_submodule_save()</code> if you want to persist the new ignore role.</p>\n\n<p>Calling this again with GIT_SUBMODULE_IGNORE_DEFAULT or calling <code>git_submodule_reload()</code> will revert the rule to the value that was in the original config.</p>\n","group":"submodule"},"git_submodule_update":{"type":"function","file":"git2/submodule.h","line":403,"lineto":404,"args":[{"name":"submodule","type":"git_submodule *","comment":null}],"argline":"git_submodule *submodule","sig":"git_submodule *","return":{"type":"git_submodule_update_t","comment":null},"description":"<p>Get the update rule for the submodule.</p>\n","comments":"","group":"submodule"},"git_submodule_set_update":{"type":"function","file":"git2/submodule.h","line":418,"lineto":420,"args":[{"name":"submodule","type":"git_submodule *","comment":null},{"name":"update","type":"git_submodule_update_t","comment":null}],"argline":"git_submodule *submodule, git_submodule_update_t update","sig":"git_submodule *::git_submodule_update_t","return":{"type":"git_submodule_update_t","comment":" old value for update"},"description":"<p>Set the update rule for the submodule.</p>\n","comments":"<p>This sets the update rule in memory for the submodule.  You should call <code>git_submodule_save()</code> if you want to persist the new update rule.</p>\n\n<p>Calling this again with GIT_SUBMODULE_UPDATE_DEFAULT or calling <code>git_submodule_reload()</code> will revert the rule to the value that was in the original config.</p>\n","group":"submodule"},"git_submodule_fetch_recurse_submodules":{"type":"function","file":"git2/submodule.h","line":433,"lineto":434,"args":[{"name":"submodule","type":"git_submodule *","comment":null}],"argline":"git_submodule *submodule","sig":"git_submodule *","return":{"type":"int","comment":" 0 if fetchRecurseSubmodules is false, 1 if true"},"description":"<p>Read the fetchRecurseSubmodules rule for a submodule.</p>\n","comments":"<p>This accesses the submodule.<name>.fetchRecurseSubmodules value for the submodule that controls fetching behavior for the submodule.</p>\n\n<p>Note that at this time, libgit2 does not honor this setting and the fetch functionality current ignores submodules.</p>\n","group":"submodule"},"git_submodule_set_fetch_recurse_submodules":{"type":"function","file":"git2/submodule.h","line":447,"lineto":449,"args":[{"name":"submodule","type":"git_submodule *","comment":"The submodule to modify"},{"name":"fetch_recurse_submodules","type":"int","comment":"Boolean value"}],"argline":"git_submodule *submodule, int fetch_recurse_submodules","sig":"git_submodule *::int","return":{"type":"int","comment":" old value for fetchRecurseSubmodules"},"description":"<p>Set the fetchRecurseSubmodules rule for a submodule.</p>\n","comments":"<p>This sets the submodule.<name>.fetchRecurseSubmodules value for the submodule.  You should call <code>git_submodule_save()</code> if you want to persist the new value.</p>\n","group":"submodule"},"git_submodule_init":{"type":"function","file":"git2/submodule.h","line":464,"lineto":464,"args":[{"name":"submodule","type":"git_submodule *","comment":"The submodule to write into the superproject config"},{"name":"overwrite","type":"int","comment":"By default, existing entries will not be overwritten,\n                  but setting this to true forces them to be updated."}],"argline":"git_submodule *submodule, int overwrite","sig":"git_submodule *::int","return":{"type":"int","comment":" 0 on success, \n<\n0 on failure."},"description":"<p>Copy submodule info into &quot;.git/config&quot; file.</p>\n","comments":"<p>Just like &quot;git submodule init&quot;, this copies information about the submodule into &quot;.git/config&quot;.  You can use the accessor functions above to alter the in-memory git_submodule object and control what is written to the config, overriding what is in .gitmodules.</p>\n","group":"submodule"},"git_submodule_sync":{"type":"function","file":"git2/submodule.h","line":474,"lineto":474,"args":[{"name":"submodule","type":"git_submodule *","comment":null}],"argline":"git_submodule *submodule","sig":"git_submodule *","return":{"type":"int","comment":null},"description":"<p>Copy submodule remote info into submodule repo.</p>\n","comments":"<p>This copies the information about the submodules URL into the checked out submodule config, acting like &quot;git submodule sync&quot;.  This is useful if you have altered the URL for the submodule (or it has been altered by a fetch of upstream changes) and you need to update your local repo.</p>\n","group":"submodule"},"git_submodule_open":{"type":"function","file":"git2/submodule.h","line":488,"lineto":490,"args":[{"name":"repo","type":"git_repository **","comment":"Pointer to the submodule repo which was opened"},{"name":"submodule","type":"git_submodule *","comment":"Submodule to be opened"}],"argline":"git_repository **repo, git_submodule *submodule","sig":"git_repository **::git_submodule *","return":{"type":"int","comment":" 0 on success, \n<\n0 if submodule repo could not be opened."},"description":"<p>Open the repository for a submodule.</p>\n","comments":"<p>This is a newly opened repository object.  The caller is responsible for calling <code>git_repository_free()</code> on it when done.  Multiple calls to this function will return distinct <code>git_repository</code> objects.  This will only work if the submodule is checked out into the working directory.</p>\n","group":"submodule"},"git_submodule_reload":{"type":"function","file":"git2/submodule.h","line":498,"lineto":498,"args":[{"name":"submodule","type":"git_submodule *","comment":null}],"argline":"git_submodule *submodule","sig":"git_submodule *","return":{"type":"int","comment":null},"description":"<p>Reread submodule info from config, index, and HEAD.</p>\n","comments":"<p>Call this to reread cached submodule information for this submodule if you have reason to believe that it has changed.</p>\n","group":"submodule"},"git_submodule_reload_all":{"type":"function","file":"git2/submodule.h","line":505,"lineto":505,"args":[{"name":"repo","type":"git_repository *","comment":null}],"argline":"git_repository *repo","sig":"git_repository *","return":{"type":"int","comment":null},"description":"<p>Reread all submodule info.</p>\n","comments":"<p>Call this to reload all cached submodule information for the repo.</p>\n","group":"submodule"},"git_submodule_status":{"type":"function","file":"git2/submodule.h","line":520,"lineto":522,"args":[{"name":"status","type":"unsigned int *","comment":"Combination of `GIT_SUBMODULE_STATUS` flags"},{"name":"submodule","type":"git_submodule *","comment":"Submodule for which to get status"}],"argline":"unsigned int *status, git_submodule *submodule","sig":"unsigned int *::git_submodule *","return":{"type":"int","comment":" 0 on success, \n<\n0 on error"},"description":"<p>Get the status for a submodule.</p>\n","comments":"<p>This looks at a submodule and tries to determine the status.  It will return a combination of the <code>GIT_SUBMODULE_STATUS</code> values above. How deeply it examines the working directory to do this will depend on the <code>git_submodule_ignore_t</code> value for the submodule - which can be set either temporarily or permanently with <code>git_submodule_set_ignore()</code>.</p>\n","group":"submodule"},"git_submodule_location":{"type":"function","file":"git2/submodule.h","line":538,"lineto":540,"args":[{"name":"location_status","type":"unsigned int *","comment":"Combination of first four `GIT_SUBMODULE_STATUS` flags"},{"name":"submodule","type":"git_submodule *","comment":"Submodule for which to get status"}],"argline":"unsigned int *location_status, git_submodule *submodule","sig":"unsigned int *::git_submodule *","return":{"type":"int","comment":" 0 on success, \n<\n0 on error"},"description":"<p>Get the locations of submodule information.</p>\n","comments":"<p>This is a bit like a very lightweight version of <code>git_submodule_status</code>. It just returns a made of the first four submodule status values (i.e. the ones like GIT_SUBMODULE_STATUS_IN_HEAD, etc) that tell you where the submodule data comes from (i.e. the HEAD commit, gitmodules file, etc.). This can be useful if you want to know if the submodule is present in the working directory at this point in time, etc.</p>\n","group":"submodule"},"git_tag_lookup":{"type":"function","file":"git2/tag.h","line":33,"lineto":34,"args":[{"name":"out","type":"git_tag **","comment":"pointer to the looked up tag"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the tag."},{"name":"id","type":"const git_oid *","comment":"identity of the tag to locate."}],"argline":"git_tag **out, git_repository *repo, const git_oid *id","sig":"git_tag **::git_repository *::const git_oid *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Lookup a tag object from the repository.</p>\n","comments":"","group":"tag","examples":{"general.c":["ex/v0.19.0/general.html#git_tag_lookup-69"]}},"git_tag_lookup_prefix":{"type":"function","file":"git2/tag.h","line":48,"lineto":49,"args":[{"name":"out","type":"git_tag **","comment":"pointer to the looked up tag"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the tag."},{"name":"id","type":"const git_oid *","comment":"identity of the tag to locate."},{"name":"len","type":"size_t","comment":"the length of the short identifier"}],"argline":"git_tag **out, git_repository *repo, const git_oid *id, size_t len","sig":"git_tag **::git_repository *::const git_oid *::size_t","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Lookup a tag object from the repository,\n given a prefix of its identifier (short id).</p>\n","comments":"","group":"tag"},"git_tag_free":{"type":"function","file":"git2/tag.h","line":61,"lineto":61,"args":[{"name":"tag","type":"git_tag *","comment":"the tag to close"}],"argline":"git_tag *tag","sig":"git_tag *","return":{"type":"void","comment":null},"description":"<p>Close an open tag</p>\n","comments":"<p>You can no longer use the git_tag pointer after this call.</p>\n\n<p>IMPORTANT: You MUST call this method when you are through with a tag to release memory. Failure to do so will cause a memory leak.</p>\n","group":"tag"},"git_tag_id":{"type":"function","file":"git2/tag.h","line":69,"lineto":69,"args":[{"name":"tag","type":"const git_tag *","comment":"a previously loaded tag."}],"argline":"const git_tag *tag","sig":"const git_tag *","return":{"type":"const git_oid *","comment":" object identity for the tag."},"description":"<p>Get the id of a tag.</p>\n","comments":"","group":"tag"},"git_tag_owner":{"type":"function","file":"git2/tag.h","line":77,"lineto":77,"args":[{"name":"tag","type":"const git_tag *","comment":"A previously loaded tag."}],"argline":"const git_tag *tag","sig":"const git_tag *","return":{"type":"git_repository *","comment":" Repository that contains this tag."},"description":"<p>Get the repository that contains the tag.</p>\n","comments":"","group":"tag"},"git_tag_target":{"type":"function","file":"git2/tag.h","line":89,"lineto":89,"args":[{"name":"target_out","type":"git_object **","comment":"pointer where to store the target"},{"name":"tag","type":"const git_tag *","comment":"a previously loaded tag."}],"argline":"git_object **target_out, const git_tag *tag","sig":"git_object **::const git_tag *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Get the tagged object of a tag</p>\n","comments":"<p>This method performs a repository lookup for the given object and returns it</p>\n","group":"tag","examples":{"general.c":["ex/v0.19.0/general.html#git_tag_target-70"]}},"git_tag_target_id":{"type":"function","file":"git2/tag.h","line":97,"lineto":97,"args":[{"name":"tag","type":"const git_tag *","comment":"a previously loaded tag."}],"argline":"const git_tag *tag","sig":"const git_tag *","return":{"type":"const git_oid *","comment":" pointer to the OID"},"description":"<p>Get the OID of the tagged object of a tag</p>\n","comments":"","group":"tag"},"git_tag_target_type":{"type":"function","file":"git2/tag.h","line":105,"lineto":105,"args":[{"name":"tag","type":"const git_tag *","comment":"a previously loaded tag."}],"argline":"const git_tag *tag","sig":"const git_tag *","return":{"type":"git_otype","comment":" type of the tagged object"},"description":"<p>Get the type of a tag&#39;s tagged object</p>\n","comments":"","group":"tag","examples":{"general.c":["ex/v0.19.0/general.html#git_tag_target_type-71"]}},"git_tag_name":{"type":"function","file":"git2/tag.h","line":113,"lineto":113,"args":[{"name":"tag","type":"const git_tag *","comment":"a previously loaded tag."}],"argline":"const git_tag *tag","sig":"const git_tag *","return":{"type":"const char *","comment":" name of the tag"},"description":"<p>Get the name of a tag</p>\n","comments":"","group":"tag","examples":{"general.c":["ex/v0.19.0/general.html#git_tag_name-72"]}},"git_tag_tagger":{"type":"function","file":"git2/tag.h","line":121,"lineto":121,"args":[{"name":"tag","type":"const git_tag *","comment":"a previously loaded tag."}],"argline":"const git_tag *tag","sig":"const git_tag *","return":{"type":"const git_signature *","comment":" reference to the tag's author or NULL when unspecified"},"description":"<p>Get the tagger (author) of a tag</p>\n","comments":"","group":"tag"},"git_tag_message":{"type":"function","file":"git2/tag.h","line":129,"lineto":129,"args":[{"name":"tag","type":"const git_tag *","comment":"a previously loaded tag."}],"argline":"const git_tag *tag","sig":"const git_tag *","return":{"type":"const char *","comment":" message of the tag or NULL when unspecified"},"description":"<p>Get the message of a tag</p>\n","comments":"","group":"tag","examples":{"general.c":["ex/v0.19.0/general.html#git_tag_message-73"]}},"git_tag_create":{"type":"function","file":"git2/tag.h","line":171,"lineto":178,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the OID of the\n newly created tag. If the tag already exists, this parameter\n will be the oid of the existing tag, and the function will\n return a GIT_EEXISTS error code."},{"name":"repo","type":"git_repository *","comment":"Repository where to store the tag"},{"name":"tag_name","type":"const char *","comment":"Name for the tag; this name is validated\n for consistency. It should also not conflict with an\n already existing tag name"},{"name":"target","type":"const git_object *","comment":"Object to which this tag points. This object\n must belong to the given `repo`."},{"name":"tagger","type":"const git_signature *","comment":"Signature of the tagger for this tag, and\n of the tagging time"},{"name":"message","type":"const char *","comment":"Full message for this tag"},{"name":"force","type":"int","comment":"Overwrite existing references"}],"argline":"git_oid *oid, git_repository *repo, const char *tag_name, const git_object *target, const git_signature *tagger, const char *message, int force","sig":"git_oid *::git_repository *::const char *::const git_object *::const git_signature *::const char *::int","return":{"type":"int","comment":" 0 on success, GIT_EINVALIDSPEC or an error code\n\tA tag object is written to the ODB, and a proper reference\n\tis written in the /refs/tags folder, pointing to it"},"description":"<p>Create a new tag in the repository from an object</p>\n","comments":"<p>A new reference will also be created pointing to this tag object. If <code>force</code> is true and a reference already exists with the given name, it&#39;ll be replaced.</p>\n\n<p>The message will not be cleaned up. This can be achieved through <code>git_message_prettify()</code>.</p>\n\n<p>The tag name will be checked for validity. You must avoid the characters &#39;~&#39;, &#39;^&#39;, &#39;:&#39;, &#39;\\&#39;, &#39;?&#39;, &#39;[&#39;, and &#39;*&#39;, and the sequences &quot;..&quot; and &quot;@{&quot; which have special meaning to revparse.</p>\n","group":"tag"},"git_tag_annotation_create":{"type":"function","file":"git2/tag.h","line":203,"lineto":209,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the OID of the\n newly created tag"},{"name":"repo","type":"git_repository *","comment":"Repository where to store the tag"},{"name":"tag_name","type":"const char *","comment":"Name for the tag"},{"name":"target","type":"const git_object *","comment":"Object to which this tag points. This object\n must belong to the given `repo`."},{"name":"tagger","type":"const git_signature *","comment":"Signature of the tagger for this tag, and\n of the tagging time"},{"name":"message","type":"const char *","comment":"Full message for this tag"}],"argline":"git_oid *oid, git_repository *repo, const char *tag_name, const git_object *target, const git_signature *tagger, const char *message","sig":"git_oid *::git_repository *::const char *::const git_object *::const git_signature *::const char *","return":{"type":"int","comment":" 0 on success or an error code"},"description":"<p>Create a new tag in the object database pointing to a git_object</p>\n","comments":"<p>The message will not be cleaned up. This can be achieved through <code>git_message_prettify()</code>.</p>\n","group":"tag"},"git_tag_create_frombuffer":{"type":"function","file":"git2/tag.h","line":220,"lineto":224,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the OID of the newly created tag"},{"name":"repo","type":"git_repository *","comment":"Repository where to store the tag"},{"name":"buffer","type":"const char *","comment":"Raw tag data"},{"name":"force","type":"int","comment":"Overwrite existing tags"}],"argline":"git_oid *oid, git_repository *repo, const char *buffer, int force","sig":"git_oid *::git_repository *::const char *::int","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Create a new tag in the repository from a buffer</p>\n","comments":"","group":"tag"},"git_tag_create_lightweight":{"type":"function","file":"git2/tag.h","line":256,"lineto":261,"args":[{"name":"oid","type":"git_oid *","comment":"Pointer where to store the OID of the provided\n target object. If the tag already exists, this parameter\n will be filled with the oid of the existing pointed object\n and the function will return a GIT_EEXISTS error code."},{"name":"repo","type":"git_repository *","comment":"Repository where to store the lightweight tag"},{"name":"tag_name","type":"const char *","comment":"Name for the tag; this name is validated\n for consistency. It should also not conflict with an\n already existing tag name"},{"name":"target","type":"const git_object *","comment":"Object to which this tag points. This object\n must belong to the given `repo`."},{"name":"force","type":"int","comment":"Overwrite existing references"}],"argline":"git_oid *oid, git_repository *repo, const char *tag_name, const git_object *target, int force","sig":"git_oid *::git_repository *::const char *::const git_object *::int","return":{"type":"int","comment":" 0 on success, GIT_EINVALIDSPEC or an error code\n\tA proper reference is written in the /refs/tags folder,\n pointing to the provided target object"},"description":"<p>Create a new lightweight tag pointing at a target object</p>\n","comments":"<p>A new direct reference will be created pointing to this target object. If <code>force</code> is true and a reference already exists with the given name, it&#39;ll be replaced.</p>\n\n<p>The tag name will be checked for validity. See <code>git_tag_create()</code> for rules about valid names.</p>\n","group":"tag"},"git_tag_delete":{"type":"function","file":"git2/tag.h","line":276,"lineto":278,"args":[{"name":"repo","type":"git_repository *","comment":"Repository where lives the tag"},{"name":"tag_name","type":"const char *","comment":"Name of the tag to be deleted;\n this name is validated for consistency."}],"argline":"git_repository *repo, const char *tag_name","sig":"git_repository *::const char *","return":{"type":"int","comment":" 0 on success, GIT_EINVALIDSPEC or an error code"},"description":"<p>Delete an existing tag reference.</p>\n","comments":"<p>The tag name will be checked for validity. See <code>git_tag_create()</code> for rules about valid names.</p>\n","group":"tag"},"git_tag_list":{"type":"function","file":"git2/tag.h","line":293,"lineto":295,"args":[{"name":"tag_names","type":"git_strarray *","comment":"Pointer to a git_strarray structure where\n\t\tthe tag names will be stored"},{"name":"repo","type":"git_repository *","comment":"Repository where to find the tags"}],"argline":"git_strarray *tag_names, git_repository *repo","sig":"git_strarray *::git_repository *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Fill a list with all the tags in the Repository</p>\n","comments":"<p>The string array will be filled with the names of the matching tags; these values are owned by the user and should be free&#39;d manually when no longer needed, using <code>git_strarray_free</code>.</p>\n","group":"tag"},"git_tag_list_match":{"type":"function","file":"git2/tag.h","line":315,"lineto":318,"args":[{"name":"tag_names","type":"git_strarray *","comment":"Pointer to a git_strarray structure where\n\t\tthe tag names will be stored"},{"name":"pattern","type":"const char *","comment":"Standard fnmatch pattern"},{"name":"repo","type":"git_repository *","comment":"Repository where to find the tags"}],"argline":"git_strarray *tag_names, const char *pattern, git_repository *repo","sig":"git_strarray *::const char *::git_repository *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Fill a list with all the tags in the Repository\n which name match a defined pattern</p>\n","comments":"<p>If an empty pattern is provided, all the tags will be returned.</p>\n\n<p>The string array will be filled with the names of the matching tags; these values are owned by the user and should be free&#39;d manually when no longer needed, using <code>git_strarray_free</code>.</p>\n","group":"tag"},"git_tag_foreach":{"type":"function","file":"git2/tag.h","line":330,"lineto":333,"args":[{"name":"repo","type":"git_repository *","comment":"Repository"},{"name":"callback","type":"git_tag_foreach_cb","comment":"Callback function"},{"name":"payload","type":"void *","comment":"Pointer to callback data (optional)"}],"argline":"git_repository *repo, git_tag_foreach_cb callback, void *payload","sig":"git_repository *::git_tag_foreach_cb::void *","return":{"type":"int","comment":null},"description":"<p>Call callback `cb&#39; for each tag in the repository</p>\n","comments":"","group":"tag"},"git_tag_peel":{"type":"function","file":"git2/tag.h","line":346,"lineto":348,"args":[{"name":"tag_target_out","type":"git_object **","comment":"Pointer to the peeled git_object"},{"name":"tag","type":"const git_tag *","comment":"The tag to be processed"}],"argline":"git_object **tag_target_out, const git_tag *tag","sig":"git_object **::const git_tag *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Recursively peel a tag until a non tag git_object is found</p>\n","comments":"<p>The retrieved <code>tag_target</code> object is owned by the repository and should be closed with the <code>git_object_free</code> method.</p>\n","group":"tag"},"git_threads_init":{"type":"function","file":"git2/threads.h","line":33,"lineto":33,"args":[],"argline":"","sig":"","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Init the threading system.</p>\n","comments":"<p>If libgit2 has been built with GIT_THREADS on, this function must be called once before any other library functions.</p>\n\n<p>If libgit2 has been built without GIT_THREADS support, this function is a no-op.</p>\n","group":"threads","examples":{"network/git2.c":["ex/v0.19.0/network/git2.html#git_threads_init-5"]}},"git_threads_shutdown":{"type":"function","file":"git2/threads.h","line":45,"lineto":45,"args":[],"argline":"","sig":"","return":{"type":"void","comment":null},"description":"<p>Shutdown the threading system.</p>\n","comments":"<p>If libgit2 has been built with GIT_THREADS on, this function must be called before shutting down the library.</p>\n\n<p>If libgit2 has been built without GIT_THREADS support, this function is a no-op.</p>\n","group":"threads"},"git_trace_set":{"type":"function","file":"git2/trace.h","line":63,"lineto":63,"args":[{"name":"level","type":"git_trace_level_t","comment":"Level to set tracing to"},{"name":"cb","type":"git_trace_callback","comment":"Function to call with trace data"}],"argline":"git_trace_level_t level, git_trace_callback cb","sig":"git_trace_level_t::git_trace_callback","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Sets the system tracing configuration to the specified level with the\n specified callback.  When system events occur at a level equal to, or\n lower than, the given level they will be reported to the given callback.</p>\n","comments":"","group":"trace"},"git_cred_userpass_plaintext_new":{"type":"function","file":"git2/transport.h","line":82,"lineto":85,"args":[{"name":"out","type":"git_cred **","comment":"The newly created credential object."},{"name":"username","type":"const char *","comment":"The username of the credential."},{"name":"password","type":"const char *","comment":"The password of the credential."}],"argline":"git_cred **out, const char *username, const char *password","sig":"git_cred **::const char *::const char *","return":{"type":"int","comment":" 0 for success or an error code for failure"},"description":"<p>Creates a new plain-text username and password credential object.\n The supplied credential parameter will be internally duplicated.</p>\n","comments":"","group":"cred","examples":{"network/clone.c":["ex/v0.19.0/network/clone.html#git_cred_userpass_plaintext_new-4"]}},"git_transport_new":{"type":"function","file":"git2/transport.h","line":229,"lineto":229,"args":[{"name":"out","type":"git_transport **","comment":"The newly created transport (out)"},{"name":"owner","type":"git_remote *","comment":"The git_remote which will own this transport"},{"name":"url","type":"const char *","comment":"The URL to connect to"}],"argline":"git_transport **out, git_remote *owner, const char *url","sig":"git_transport **::git_remote *::const char *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Function to use to create a transport from a URL. The transport database\n is scanned to find a transport that implements the scheme of the URI (i.e.\n git:// or http://) and a transport object is returned to the caller.</p>\n","comments":"","group":"transport"},"git_transport_dummy":{"type":"function","file":"git2/transport.h","line":245,"lineto":248,"args":[{"name":"out","type":"git_transport **","comment":"The newly created transport (out)"},{"name":"owner","type":"git_remote *","comment":"The git_remote which will own this transport"},{"name":"payload","type":"void *","comment":"You must pass NULL for this parameter."}],"argline":"git_transport **out, git_remote *owner, void *payload","sig":"git_transport **::git_remote *::void *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create an instance of the dummy transport.</p>\n","comments":"","group":"transport"},"git_transport_local":{"type":"function","file":"git2/transport.h","line":258,"lineto":261,"args":[{"name":"out","type":"git_transport **","comment":"The newly created transport (out)"},{"name":"owner","type":"git_remote *","comment":"The git_remote which will own this transport"},{"name":"payload","type":"void *","comment":"You must pass NULL for this parameter."}],"argline":"git_transport **out, git_remote *owner, void *payload","sig":"git_transport **::git_remote *::void *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create an instance of the local transport.</p>\n","comments":"","group":"transport"},"git_transport_smart":{"type":"function","file":"git2/transport.h","line":271,"lineto":274,"args":[{"name":"out","type":"git_transport **","comment":"The newly created transport (out)"},{"name":"owner","type":"git_remote *","comment":"The git_remote which will own this transport"},{"name":"payload","type":"void *","comment":"A pointer to a git_smart_subtransport_definition"}],"argline":"git_transport **out, git_remote *owner, void *payload","sig":"git_transport **::git_remote *::void *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create an instance of the smart transport.</p>\n","comments":"","group":"transport"},"git_smart_subtransport_http":{"type":"function","file":"git2/transport.h","line":370,"lineto":372,"args":[{"name":"out","type":"git_smart_subtransport **","comment":"The newly created subtransport"},{"name":"owner","type":"git_transport *","comment":"The smart transport to own this subtransport"}],"argline":"git_smart_subtransport **out, git_transport *owner","sig":"git_smart_subtransport **::git_transport *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create an instance of the http subtransport. This subtransport\n also supports https. On Win32, this subtransport may be implemented\n using the WinHTTP library.</p>\n","comments":"","group":"smart"},"git_smart_subtransport_git":{"type":"function","file":"git2/transport.h","line":381,"lineto":383,"args":[{"name":"out","type":"git_smart_subtransport **","comment":"The newly created subtransport"},{"name":"owner","type":"git_transport *","comment":"The smart transport to own this subtransport"}],"argline":"git_smart_subtransport **out, git_transport *owner","sig":"git_smart_subtransport **::git_transport *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create an instance of the git subtransport.</p>\n","comments":"","group":"smart"},"git_smart_subtransport_ssh":{"type":"function","file":"git2/transport.h","line":392,"lineto":394,"args":[{"name":"out","type":"git_smart_subtransport **","comment":"The newly created subtransport"},{"name":"owner","type":"git_transport *","comment":"The smart transport to own this subtransport"}],"argline":"git_smart_subtransport **out, git_transport *owner","sig":"git_smart_subtransport **::git_transport *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Create an instance of the ssh subtransport.</p>\n","comments":"","group":"smart"},"git_tree_lookup":{"type":"function","file":"git2/tree.h","line":32,"lineto":33,"args":[{"name":"out","type":"git_tree **","comment":"Pointer to the looked up tree"},{"name":"repo","type":"git_repository *","comment":"The repo to use when locating the tree."},{"name":"id","type":"const git_oid *","comment":"Identity of the tree to locate."}],"argline":"git_tree **out, git_repository *repo, const git_oid *id","sig":"git_tree **::git_repository *::const git_oid *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Lookup a tree object from the repository.</p>\n","comments":"","group":"tree","examples":{"general.c":["ex/v0.19.0/general.html#git_tree_lookup-74","ex/v0.19.0/general.html#git_tree_lookup-75"]}},"git_tree_lookup_prefix":{"type":"function","file":"git2/tree.h","line":47,"lineto":51,"args":[{"name":"out","type":"git_tree **","comment":"pointer to the looked up tree"},{"name":"repo","type":"git_repository *","comment":"the repo to use when locating the tree."},{"name":"id","type":"const git_oid *","comment":"identity of the tree to locate."},{"name":"len","type":"size_t","comment":"the length of the short identifier"}],"argline":"git_tree **out, git_repository *repo, const git_oid *id, size_t len","sig":"git_tree **::git_repository *::const git_oid *::size_t","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Lookup a tree object from the repository,\n given a prefix of its identifier (short id).</p>\n","comments":"","group":"tree"},"git_tree_free":{"type":"function","file":"git2/tree.h","line":63,"lineto":63,"args":[{"name":"tree","type":"git_tree *","comment":"The tree to close"}],"argline":"git_tree *tree","sig":"git_tree *","return":{"type":"void","comment":null},"description":"<p>Close an open tree</p>\n","comments":"<p>You can no longer use the git_tree pointer after this call.</p>\n\n<p>IMPORTANT: You MUST call this method when you stop using a tree to release memory. Failure to do so will cause a memory leak.</p>\n","group":"tree"},"git_tree_id":{"type":"function","file":"git2/tree.h","line":71,"lineto":71,"args":[{"name":"tree","type":"const git_tree *","comment":"a previously loaded tree."}],"argline":"const git_tree *tree","sig":"const git_tree *","return":{"type":"const git_oid *","comment":" object identity for the tree."},"description":"<p>Get the id of a tree.</p>\n","comments":"","group":"tree"},"git_tree_owner":{"type":"function","file":"git2/tree.h","line":79,"lineto":79,"args":[{"name":"tree","type":"const git_tree *","comment":"A previously loaded tree."}],"argline":"const git_tree *tree","sig":"const git_tree *","return":{"type":"git_repository *","comment":" Repository that contains this tree."},"description":"<p>Get the repository that contains the tree.</p>\n","comments":"","group":"tree"},"git_tree_entrycount":{"type":"function","file":"git2/tree.h","line":87,"lineto":87,"args":[{"name":"tree","type":"const git_tree *","comment":"a previously loaded tree."}],"argline":"const git_tree *tree","sig":"const git_tree *","return":{"type":"size_t","comment":" the number of entries in the tree"},"description":"<p>Get the number of entries listed in a tree</p>\n","comments":"","group":"tree","examples":{"general.c":["ex/v0.19.0/general.html#git_tree_entrycount-76"]}},"git_tree_entry_byname":{"type":"function","file":"git2/tree.h","line":99,"lineto":100,"args":[{"name":"tree","type":"const git_tree *","comment":"a previously loaded tree."},{"name":"filename","type":"const char *","comment":"the filename of the desired entry"}],"argline":"const git_tree *tree, const char *filename","sig":"const git_tree *::const char *","return":{"type":"const git_tree_entry *","comment":" the tree entry; NULL if not found"},"description":"<p>Lookup a tree entry by its filename</p>\n","comments":"<p>This returns a git_tree_entry that is owned by the git_tree.  You don&#39;t have to free it, but you must not use it after the git_tree is released.</p>\n","group":"tree","examples":{"general.c":["ex/v0.19.0/general.html#git_tree_entry_byname-77"]}},"git_tree_entry_byindex":{"type":"function","file":"git2/tree.h","line":112,"lineto":113,"args":[{"name":"tree","type":"const git_tree *","comment":"a previously loaded tree."},{"name":"idx","type":"size_t","comment":"the position in the entry list"}],"argline":"const git_tree *tree, size_t idx","sig":"const git_tree *::size_t","return":{"type":"const git_tree_entry *","comment":" the tree entry; NULL if not found"},"description":"<p>Lookup a tree entry by its position in the tree</p>\n","comments":"<p>This returns a git_tree_entry that is owned by the git_tree.  You don&#39;t have to free it, but you must not use it after the git_tree is released.</p>\n","group":"tree","examples":{"general.c":["ex/v0.19.0/general.html#git_tree_entry_byindex-78"]}},"git_tree_entry_byoid":{"type":"function","file":"git2/tree.h","line":127,"lineto":128,"args":[{"name":"tree","type":"const git_tree *","comment":"a previously loaded tree."},{"name":"oid","type":"const git_oid *","comment":"the sha being looked for"}],"argline":"const git_tree *tree, const git_oid *oid","sig":"const git_tree *::const git_oid *","return":{"type":"const git_tree_entry *","comment":" the tree entry; NULL if not found"},"description":"<p>Lookup a tree entry by SHA value.</p>\n","comments":"<p>This returns a git_tree_entry that is owned by the git_tree.  You don&#39;t have to free it, but you must not use it after the git_tree is released.</p>\n\n<p>Warning: this must examine every entry in the tree, so it is not fast.</p>\n","group":"tree"},"git_tree_entry_bypath":{"type":"function","file":"git2/tree.h","line":142,"lineto":145,"args":[{"name":"out","type":"git_tree_entry **","comment":"Pointer where to store the tree entry"},{"name":"root","type":"const git_tree *","comment":"Previously loaded tree which is the root of the relative path"},{"name":"path","type":"const char *","comment":"Path to the contained entry"}],"argline":"git_tree_entry **out, const git_tree *root, const char *path","sig":"git_tree_entry **::const git_tree *::const char *","return":{"type":"int","comment":" 0 on success; GIT_ENOTFOUND if the path does not exist"},"description":"<p>Retrieve a tree entry contained in a tree or in any of its subtrees,\n given its relative path.</p>\n","comments":"<p>Unlike the other lookup functions, the returned tree entry is owned by the user and must be freed explicitly with <code>git_tree_entry_free()</code>.</p>\n","group":"tree"},"git_tree_entry_dup":{"type":"function","file":"git2/tree.h","line":156,"lineto":156,"args":[{"name":"entry","type":"const git_tree_entry *","comment":"A tree entry to duplicate"}],"argline":"const git_tree_entry *entry","sig":"const git_tree_entry *","return":{"type":"git_tree_entry *","comment":" a copy of the original entry or NULL on error (alloc failure)"},"description":"<p>Duplicate a tree entry</p>\n","comments":"<p>Create a copy of a tree entry. The returned copy is owned by the user, and must be freed explicitly with <code>git_tree_entry_free()</code>.</p>\n","group":"tree"},"git_tree_entry_free":{"type":"function","file":"git2/tree.h","line":167,"lineto":167,"args":[{"name":"entry","type":"git_tree_entry *","comment":"The entry to free"}],"argline":"git_tree_entry *entry","sig":"git_tree_entry *","return":{"type":"void","comment":null},"description":"<p>Free a user-owned tree entry</p>\n","comments":"<p>IMPORTANT: This function is only needed for tree entries owned by the user, such as the ones returned by <code>git_tree_entry_dup()</code> or <code>git_tree_entry_bypath()</code>.</p>\n","group":"tree"},"git_tree_entry_name":{"type":"function","file":"git2/tree.h","line":175,"lineto":175,"args":[{"name":"entry","type":"const git_tree_entry *","comment":"a tree entry"}],"argline":"const git_tree_entry *entry","sig":"const git_tree_entry *","return":{"type":"const char *","comment":" the name of the file"},"description":"<p>Get the filename of a tree entry</p>\n","comments":"","group":"tree","examples":{"general.c":["ex/v0.19.0/general.html#git_tree_entry_name-79","ex/v0.19.0/general.html#git_tree_entry_name-80"]}},"git_tree_entry_id":{"type":"function","file":"git2/tree.h","line":183,"lineto":183,"args":[{"name":"entry","type":"const git_tree_entry *","comment":"a tree entry"}],"argline":"const git_tree_entry *entry","sig":"const git_tree_entry *","return":{"type":"const git_oid *","comment":" the oid of the object"},"description":"<p>Get the id of the object pointed by the entry</p>\n","comments":"","group":"tree"},"git_tree_entry_type":{"type":"function","file":"git2/tree.h","line":191,"lineto":191,"args":[{"name":"entry","type":"const git_tree_entry *","comment":"a tree entry"}],"argline":"const git_tree_entry *entry","sig":"const git_tree_entry *","return":{"type":"git_otype","comment":" the type of the pointed object"},"description":"<p>Get the type of the object pointed by the entry</p>\n","comments":"","group":"tree"},"git_tree_entry_filemode":{"type":"function","file":"git2/tree.h","line":199,"lineto":199,"args":[{"name":"entry","type":"const git_tree_entry *","comment":"a tree entry"}],"argline":"const git_tree_entry *entry","sig":"const git_tree_entry *","return":{"type":"git_filemode_t","comment":" filemode as an integer"},"description":"<p>Get the UNIX file attributes of a tree entry</p>\n","comments":"","group":"tree"},"git_tree_entry_cmp":{"type":"function","file":"git2/tree.h","line":208,"lineto":208,"args":[{"name":"e1","type":"const git_tree_entry *","comment":"first tree entry"},{"name":"e2","type":"const git_tree_entry *","comment":"second tree entry"}],"argline":"const git_tree_entry *e1, const git_tree_entry *e2","sig":"const git_tree_entry *::const git_tree_entry *","return":{"type":"int","comment":" \n<\n0 if e1 is before e2, 0 if e1 == e2, >0 if e1 is after e2"},"description":"<p>Compare two tree entries</p>\n","comments":"","group":"tree"},"git_tree_entry_to_object":{"type":"function","file":"git2/tree.h","line":220,"lineto":223,"args":[{"name":"object_out","type":"git_object **","comment":"pointer to the converted object"},{"name":"repo","type":"git_repository *","comment":"repository where to lookup the pointed object"},{"name":"entry","type":"const git_tree_entry *","comment":"a tree entry"}],"argline":"git_object **object_out, git_repository *repo, const git_tree_entry *entry","sig":"git_object **::git_repository *::const git_tree_entry *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Convert a tree entry to the git_object it points too.</p>\n","comments":"<p>You must call <code>git_object_free()</code> on the object when you are done with it.</p>\n","group":"tree","examples":{"general.c":["ex/v0.19.0/general.html#git_tree_entry_to_object-81"]}},"git_treebuilder_create":{"type":"function","file":"git2/tree.h","line":241,"lineto":242,"args":[{"name":"out","type":"git_treebuilder **","comment":"Pointer where to store the tree builder"},{"name":"source","type":"const git_tree *","comment":"Source tree to initialize the builder (optional)"}],"argline":"git_treebuilder **out, const git_tree *source","sig":"git_treebuilder **::const git_tree *","return":{"type":"int","comment":" 0 on success; error code otherwise"},"description":"<p>Create a new tree builder.</p>\n","comments":"<p>The tree builder can be used to create or modify trees in memory and write them as tree objects to the database.</p>\n\n<p>If the <code>source</code> parameter is not NULL, the tree builder will be initialized with the entries of the given tree.</p>\n\n<p>If the <code>source</code> parameter is NULL, the tree builder will start with no entries and will have to be filled manually.</p>\n","group":"treebuilder"},"git_treebuilder_clear":{"type":"function","file":"git2/tree.h","line":249,"lineto":249,"args":[{"name":"bld","type":"git_treebuilder *","comment":"Builder to clear"}],"argline":"git_treebuilder *bld","sig":"git_treebuilder *","return":{"type":"void","comment":null},"description":"<p>Clear all the entires in the builder</p>\n","comments":"","group":"treebuilder"},"git_treebuilder_entrycount":{"type":"function","file":"git2/tree.h","line":257,"lineto":257,"args":[{"name":"bld","type":"git_treebuilder *","comment":"a previously loaded treebuilder."}],"argline":"git_treebuilder *bld","sig":"git_treebuilder *","return":{"type":"unsigned int","comment":" the number of entries in the treebuilder"},"description":"<p>Get the number of entries listed in a treebuilder</p>\n","comments":"","group":"treebuilder"},"git_treebuilder_free":{"type":"function","file":"git2/tree.h","line":268,"lineto":268,"args":[{"name":"bld","type":"git_treebuilder *","comment":"Builder to free"}],"argline":"git_treebuilder *bld","sig":"git_treebuilder *","return":{"type":"void","comment":null},"description":"<p>Free a tree builder</p>\n","comments":"<p>This will clear all the entries and free to builder. Failing to free the builder after you&#39;re done using it will result in a memory leak</p>\n","group":"treebuilder"},"git_treebuilder_get":{"type":"function","file":"git2/tree.h","line":280,"lineto":281,"args":[{"name":"bld","type":"git_treebuilder *","comment":"Tree builder"},{"name":"filename","type":"const char *","comment":"Name of the entry"}],"argline":"git_treebuilder *bld, const char *filename","sig":"git_treebuilder *::const char *","return":{"type":"const git_tree_entry *","comment":" pointer to the entry; NULL if not found"},"description":"<p>Get an entry from the builder from its filename</p>\n","comments":"<p>The returned entry is owned by the builder and should not be freed manually.</p>\n","group":"treebuilder"},"git_treebuilder_insert":{"type":"function","file":"git2/tree.h","line":308,"lineto":313,"args":[{"name":"out","type":"const git_tree_entry **","comment":"Pointer to store the entry (optional)"},{"name":"bld","type":"git_treebuilder *","comment":"Tree builder"},{"name":"filename","type":"const char *","comment":"Filename of the entry"},{"name":"id","type":"const git_oid *","comment":"SHA1 oid of the entry"},{"name":"filemode","type":"git_filemode_t","comment":"Folder attributes of the entry. This parameter must\n\t\t\tbe valued with one of the following entries: 0040000, 0100644,\n\t\t\t0100755, 0120000 or 0160000."}],"argline":"const git_tree_entry **out, git_treebuilder *bld, const char *filename, const git_oid *id, git_filemode_t filemode","sig":"const git_tree_entry **::git_treebuilder *::const char *::const git_oid *::git_filemode_t","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Add or update an entry to the builder</p>\n","comments":"<p>Insert a new entry for <code>filename</code> in the builder with the given attributes.</p>\n\n<p>If an entry named <code>filename</code> already exists, its attributes will be updated with the given ones.</p>\n\n<p>The optional pointer <code>out</code> can be used to retrieve a pointer to the newly created/updated entry.  Pass NULL if you do not need it.</p>\n\n<p>No attempt is being made to ensure that the provided oid points to an existing git object in the object database, nor that the attributes make sense regarding the type of the pointed at object.</p>\n","group":"treebuilder"},"git_treebuilder_remove":{"type":"function","file":"git2/tree.h","line":321,"lineto":322,"args":[{"name":"bld","type":"git_treebuilder *","comment":"Tree builder"},{"name":"filename","type":"const char *","comment":"Filename of the entry to remove"}],"argline":"git_treebuilder *bld, const char *filename","sig":"git_treebuilder *::const char *","return":{"type":"int","comment":null},"description":"<p>Remove an entry from the builder by its filename</p>\n","comments":"","group":"treebuilder"},"git_treebuilder_filter":{"type":"function","file":"git2/tree.h","line":338,"lineto":341,"args":[{"name":"bld","type":"git_treebuilder *","comment":"Tree builder"},{"name":"filter","type":"git_treebuilder_filter_cb","comment":"Callback to filter entries"},{"name":"payload","type":"void *","comment":"Extra data to pass to filter"}],"argline":"git_treebuilder *bld, git_treebuilder_filter_cb filter, void *payload","sig":"git_treebuilder *::git_treebuilder_filter_cb::void *","return":{"type":"void","comment":null},"description":"<p>Filter the entries in the tree</p>\n","comments":"<p>The <code>filter</code> callback will be called for each entry in the tree with a pointer to the entry and the provided <code>payload</code>; if the callback returns non-zero, the entry will be filtered (removed from the builder).</p>\n","group":"treebuilder"},"git_treebuilder_write":{"type":"function","file":"git2/tree.h","line":354,"lineto":355,"args":[{"name":"id","type":"git_oid *","comment":"Pointer to store the OID of the newly written tree"},{"name":"repo","type":"git_repository *","comment":"Repository in which to store the object"},{"name":"bld","type":"git_treebuilder *","comment":"Tree builder to write"}],"argline":"git_oid *id, git_repository *repo, git_treebuilder *bld","sig":"git_oid *::git_repository *::git_treebuilder *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Write the contents of the tree builder as a tree object</p>\n","comments":"<p>The tree builder will be written to the given <code>repo</code>, and its identifying SHA1 hash will be stored in the <code>id</code> pointer.</p>\n","group":"treebuilder"},"git_tree_walk":{"type":"function","file":"git2/tree.h","line":385,"lineto":389,"args":[{"name":"tree","type":"const git_tree *","comment":"The tree to walk"},{"name":"mode","type":"git_treewalk_mode","comment":"Traversal mode (pre or post-order)"},{"name":"callback","type":"git_treewalk_cb","comment":"Function to call on each tree entry"},{"name":"payload","type":"void *","comment":"Opaque pointer to be passed on each callback"}],"argline":"const git_tree *tree, git_treewalk_mode mode, git_treewalk_cb callback, void *payload","sig":"const git_tree *::git_treewalk_mode::git_treewalk_cb::void *","return":{"type":"int","comment":" 0 or an error code"},"description":"<p>Traverse the entries in a tree and its subtrees in post or pre order.</p>\n","comments":"<p>The entries will be traversed in the specified order, children subtrees will be automatically loaded as required, and the <code>callback</code> will be called once per entry with the current (relative) root for the entry and the entry data itself.</p>\n\n<p>If the callback returns a positive value, the passed entry will be skipped on the traversal (in pre mode). A negative value stops the walk.</p>\n","group":"tree"}},"callbacks":{"git_checkout_notify_cb":{"type":"callback","file":"git2/checkout.h","line":191,"lineto":197,"args":[{"name":"why","type":"git_checkout_notify_t","comment":null},{"name":"path","type":"const char *","comment":null},{"name":"baseline","type":"const git_diff_file *","comment":null},{"name":"target","type":"const git_diff_file *","comment":null},{"name":"workdir","type":"const git_diff_file *","comment":null},{"name":"payload","type":"void *","comment":null}],"argline":"git_checkout_notify_t why, const char *path, const git_diff_file *baseline, const git_diff_file *target, const git_diff_file *workdir, void *payload","sig":"git_checkout_notify_t::const char *::const git_diff_file *::const git_diff_file *::const git_diff_file *::void *","return":{"type":"int","comment":null},"description":"<p>Checkout notification callback function </p>\n","comments":""},"git_checkout_progress_cb":{"type":"callback","file":"git2/checkout.h","line":200,"lineto":204,"args":[{"name":"path","type":"const char *","comment":null},{"name":"completed_steps","type":"size_t","comment":null},{"name":"total_steps","type":"size_t","comment":null},{"name":"payload","type":"void *","comment":null}],"argline":"const char *path, size_t completed_steps, size_t total_steps, void *payload","sig":"const char *::size_t::size_t::void *","return":{"type":"void","comment":null},"description":"<p>Checkout progress notification function </p>\n","comments":""},"git_diff_notify_cb":{"type":"callback","file":"git2/diff.h","line":289,"lineto":293,"args":[{"name":"diff_so_far","type":"const git_diff_list *","comment":null},{"name":"delta_to_add","type":"const git_diff_delta *","comment":null},{"name":"matched_pathspec","type":"const char *","comment":null},{"name":"payload","type":"void *","comment":null}],"argline":"const git_diff_list *diff_so_far, const git_diff_delta *delta_to_add, const char *matched_pathspec, void *payload","sig":"const git_diff_list *::const git_diff_delta *::const char *::void *","return":{"type":"int","comment":null},"description":"<p>Diff notification callback function.</p>\n","comments":"<p>The callback will be called for each file, just before the <code>git_delta_t</code> gets inserted into the diff list.</p>\n\n<p>When the callback: - returns &lt; 0, the diff process will be aborted. - returns &gt; 0, the delta will not be inserted into the diff list, but the      diff process continues. - returns 0, the delta is inserted into the diff list, and the diff process     continues.</p>\n"},"git_diff_file_cb":{"type":"callback","file":"git2/diff.h","line":341,"lineto":344,"args":[{"name":"delta","type":"const git_diff_delta *","comment":"A pointer to the delta data for the file"},{"name":"progress","type":"float","comment":"Goes from 0 to 1 over the diff list"},{"name":"payload","type":"void *","comment":"User-specified pointer from foreach function"}],"argline":"const git_diff_delta *delta, float progress, void *payload","sig":"const git_diff_delta *::float::void *","return":{"type":"int","comment":null},"description":"<p>When iterating over a diff, callback that will be made per file.</p>\n","comments":""},"git_diff_hunk_cb":{"type":"callback","file":"git2/diff.h","line":359,"lineto":364,"args":[{"name":"delta","type":"const git_diff_delta *","comment":null},{"name":"range","type":"const git_diff_range *","comment":null},{"name":"header","type":"const char *","comment":null},{"name":"header_len","type":"size_t","comment":null},{"name":"payload","type":"void *","comment":null}],"argline":"const git_diff_delta *delta, const git_diff_range *range, const char *header, size_t header_len, void *payload","sig":"const git_diff_delta *::const git_diff_range *::const char *::size_t::void *","return":{"type":"int","comment":null},"description":"<p>When iterating over a diff, callback that will be made per hunk.</p>\n","comments":""},"git_diff_data_cb":{"type":"callback","file":"git2/diff.h","line":402,"lineto":408,"args":[{"name":"delta","type":"const git_diff_delta *","comment":null},{"name":"range","type":"const git_diff_range *","comment":null},{"name":"line_origin","type":"char","comment":null},{"name":"content","type":"const char *","comment":null},{"name":"content_len","type":"size_t","comment":null},{"name":"payload","type":"void *","comment":null}],"argline":"const git_diff_delta *delta, const git_diff_range *range, char line_origin, const char *content, size_t content_len, void *payload","sig":"const git_diff_delta *::const git_diff_range *::char::const char *::size_t::void *","return":{"type":"int","comment":null},"description":"<p>When iterating over a diff, callback that will be made per text diff\n line. In this context, the provided range will be NULL.</p>\n","comments":"<p>When printing a diff, callback that will be made to output each line of text.  This uses some extra GIT_DIFF_LINE_... constants for output of lines of file and hunk headers.</p>\n"},"git_index_matched_path_cb":{"type":"callback","file":"git2/index.h","line":130,"lineto":131,"args":[{"name":"path","type":"const char *","comment":null},{"name":"matched_pathspec","type":"const char *","comment":null},{"name":"payload","type":"void *","comment":null}],"argline":"const char *path, const char *matched_pathspec, void *payload","sig":"const char *::const char *::void *","return":{"type":"int","comment":null},"description":"<p>Callback for APIs that add/remove/update files matching pathspec </p>\n","comments":""},"git_headlist_cb":{"type":"callback","file":"git2/net.h","line":49,"lineto":49,"args":[{"name":"rhead","type":"git_remote_head *","comment":null},{"name":"payload","type":"void *","comment":null}],"argline":"git_remote_head *rhead, void *payload","sig":"git_remote_head *::void *","return":{"type":"int","comment":null},"description":"<p>Callback for listing the remote heads</p>\n","comments":""},"git_note_foreach_cb":{"type":"callback","file":"git2/notes.h","line":29,"lineto":30,"args":[{"name":"blob_id","type":"const git_oid *","comment":null},{"name":"annotated_object_id","type":"const git_oid *","comment":null},{"name":"payload","type":"void *","comment":null}],"argline":"const git_oid *blob_id, const git_oid *annotated_object_id, void *payload","sig":"const git_oid *::const git_oid *::void *","return":{"type":"int","comment":null},"description":"<p>Callback for git_note_foreach.</p>\n","comments":"<p>Receives: - blob_id: Oid of the blob containing the message - annotated_object_id: Oid of the git object being annotated - payload: Payload data passed to <code>git_note_foreach</code></p>\n"},"git_odb_foreach_cb":{"type":"callback","file":"git2/odb.h","line":26,"lineto":26,"args":[{"name":"id","type":"const git_oid *","comment":null},{"name":"payload","type":"void *","comment":null}],"argline":"const git_oid *id, void *payload","sig":"const git_oid *::void *","return":{"type":"int","comment":null},"description":"<p>Function type for callbacks from git_odb_foreach.</p>\n","comments":""},"git_remote_rename_problem_cb":{"type":"callback","file":"git2/remote.h","line":27,"lineto":27,"args":[{"name":"problematic_refspec","type":"const char *","comment":null},{"name":"payload","type":"void *","comment":null}],"argline":"const char *problematic_refspec, void *payload","sig":"const char *::void *","return":{"type":"int","comment":null},"description":"<p>git2/remote.h</p>\n","comments":"<p>@{</p>\n"},"git_stash_cb":{"type":"callback","file":"git2/stash.h","line":79,"lineto":83,"args":[{"name":"index","type":"size_t","comment":"The position within the stash list. 0 points to the\n most recent stashed state."},{"name":"message","type":"const char *","comment":"The stash message."},{"name":"stash_id","type":"const int *","comment":"The commit oid of the stashed state."},{"name":"payload","type":"void *","comment":"Extra parameter to callback function."}],"argline":"size_t index, const char *message, const int *stash_id, void *payload","sig":"size_t::const char *::const int *::void *","return":{"type":"int","comment":" 0 on success, GIT_EUSER on non-zero callback, or error code"},"description":"<p>When iterating over all the stashed states, callback that will be\n issued per entry.</p>\n","comments":""},"git_status_cb":{"type":"callback","file":"git2/status.h","line":59,"lineto":60,"args":[{"name":"path","type":"const char *","comment":null},{"name":"status_flags","type":"unsigned int","comment":null},{"name":"payload","type":"void *","comment":null}],"argline":"const char *path, unsigned int status_flags, void *payload","sig":"const char *::unsigned int::void *","return":{"type":"int","comment":null},"description":"<p>Function pointer to receive status on individual files</p>\n","comments":"<p><code>path</code> is the relative path to the file from the root of the repository.</p>\n\n<p><code>status_flags</code> is a combination of <code>git_status_t</code> values that apply.</p>\n\n<p><code>payload</code> is the value you passed to the foreach function as payload.</p>\n"},"git_trace_callback":{"type":"callback","file":"git2/trace.h","line":52,"lineto":52,"args":[{"name":"level","type":"git_trace_level_t","comment":null},{"name":"msg","type":"const char *","comment":null}],"argline":"git_trace_level_t level, const char *msg","sig":"git_trace_level_t::const char *","return":{"type":"void","comment":null},"description":"<p>An instance for a tracing function</p>\n","comments":""},"git_cred_acquire_cb":{"type":"callback","file":"git2/transport.h","line":134,"lineto":139,"args":[{"name":"cred","type":"git_cred **","comment":"The newly created credential object."},{"name":"url","type":"const char *","comment":"The resource for which we are demanding a credential."},{"name":"username_from_url","type":"const char *","comment":"The username that was embedded in a \"user"},{"name":"allowed_types","type":"unsigned int","comment":"A bitmask stating which cred types are OK to return."},{"name":"payload","type":"void *","comment":"The payload provided when specifying this callback."}],"argline":"git_cred **cred, const char *url, const char *username_from_url, unsigned int allowed_types, void *payload","sig":"git_cred **::const char *::const char *::unsigned int::void *","return":{"type":"int","comment":" 0 for success or an error code for failure"},"description":"<p>Signature of a function which acquires a credential object.</p>\n","comments":""},"git_treewalk_cb":{"type":"callback","file":"git2/tree.h","line":359,"lineto":360,"args":[{"name":"root","type":"const char *","comment":null},{"name":"entry","type":"const git_tree_entry *","comment":null},{"name":"payload","type":"void *","comment":null}],"argline":"const char *root, const git_tree_entry *entry, void *payload","sig":"const char *::const git_tree_entry *::void *","return":{"type":"int","comment":null},"description":"<p>Callback for the tree traversal method </p>\n","comments":""},"git_transfer_progress_callback":{"type":"callback","file":"git2/types.h","line":230,"lineto":230,"args":[{"name":"stats","type":"const git_transfer_progress *","comment":"Structure containing information about the state of the transfer"},{"name":"payload","type":"void *","comment":"Payload provided by caller"}],"argline":"const git_transfer_progress *stats, void *payload","sig":"const git_transfer_progress *::void *","return":{"type":"int","comment":null},"description":"<p>Type for progress callbacks during indexing.  Return a value less than zero\n to cancel the transfer.</p>\n","comments":""}},"globals":{},"types":[["git_blob",{"decl":"git_blob","type":"struct","value":"git_blob","file":"git2/types.h","line":117,"lineto":117,"tdef":"typedef","description":" In-memory representation of a blob object. ","comments":"","used":{"returns":[],"needs":["git_blob_create_fromchunks","git_blob_free","git_blob_id","git_blob_is_binary","git_blob_lookup","git_blob_lookup_prefix","git_blob_owner","git_blob_rawcontent","git_blob_rawsize","git_diff_blob_to_buffer","git_diff_blobs","git_diff_patch_from_blob_and_buffer","git_diff_patch_from_blobs"]}}],["git_branch_t",{"decl":["GIT_BRANCH_LOCAL","GIT_BRANCH_REMOTE"],"type":"enum","file":"git2/types.h","line":190,"lineto":193,"block":"GIT_BRANCH_LOCAL\nGIT_BRANCH_REMOTE","tdef":"typedef","description":" Basic type of any Git branch. ","comments":"","fields":[{"type":"int","name":"GIT_BRANCH_LOCAL","comments":"","value":1},{"type":"int","name":"GIT_BRANCH_REMOTE","comments":"","value":2}],"used":{"returns":[],"needs":["git_branch_lookup"]}}],["git_cap_t",{"decl":["GIT_CAP_THREADS","GIT_CAP_HTTPS"],"type":"enum","file":"git2/common.h","line":106,"lineto":109,"block":"GIT_CAP_THREADS\nGIT_CAP_HTTPS","tdef":"typedef","description":" Combinations of these values describe the capabilities of libgit2.","comments":"","fields":[{"type":"int","name":"GIT_CAP_THREADS","comments":"","value":1},{"type":"int","name":"GIT_CAP_HTTPS","comments":"","value":2}],"used":{"returns":[],"needs":[]}}],["git_checkout_notify_t",{"decl":["GIT_CHECKOUT_NOTIFY_NONE","GIT_CHECKOUT_NOTIFY_CONFLICT","GIT_CHECKOUT_NOTIFY_DIRTY","GIT_CHECKOUT_NOTIFY_UPDATED","GIT_CHECKOUT_NOTIFY_UNTRACKED","GIT_CHECKOUT_NOTIFY_IGNORED","GIT_CHECKOUT_NOTIFY_ALL"],"type":"enum","file":"git2/checkout.h","line":179,"lineto":188,"block":"GIT_CHECKOUT_NOTIFY_NONE\nGIT_CHECKOUT_NOTIFY_CONFLICT\nGIT_CHECKOUT_NOTIFY_DIRTY\nGIT_CHECKOUT_NOTIFY_UPDATED\nGIT_CHECKOUT_NOTIFY_UNTRACKED\nGIT_CHECKOUT_NOTIFY_IGNORED\nGIT_CHECKOUT_NOTIFY_ALL","tdef":"typedef","description":" Checkout notification flags","comments":"<p>Checkout will invoke an options notification callback (<code>notify_cb</code>) for certain cases - you pick which ones via <code>notify_flags</code>:</p>\n\n<ul>\n<li><p>GIT_CHECKOUT_NOTIFY_CONFLICT invokes checkout on conflicting paths.</p></li>\n<li><p>GIT_CHECKOUT_NOTIFY_DIRTY notifies about &quot;dirty&quot; files, i.e. those that   do not need an update but no longer match the baseline.  Core git   displays these files when checkout runs, but won&#39;t stop the checkout.</p></li>\n<li><p>GIT_CHECKOUT_NOTIFY_UPDATED sends notification for any file changed.</p></li>\n<li><p>GIT_CHECKOUT_NOTIFY_UNTRACKED notifies about untracked files.</p></li>\n<li><p>GIT_CHECKOUT_NOTIFY_IGNORED notifies about ignored files.</p></li>\n</ul>\n\n<p>Returning a non-zero value from this callback will cancel the checkout. Notification callbacks are made prior to modifying any files on disk.</p>\n","fields":[{"type":"int","name":"GIT_CHECKOUT_NOTIFY_NONE","comments":"","value":0},{"type":"int","name":"GIT_CHECKOUT_NOTIFY_CONFLICT","comments":"","value":1},{"type":"int","name":"GIT_CHECKOUT_NOTIFY_DIRTY","comments":"","value":2},{"type":"int","name":"GIT_CHECKOUT_NOTIFY_UPDATED","comments":"","value":4},{"type":"int","name":"GIT_CHECKOUT_NOTIFY_UNTRACKED","comments":"","value":8},{"type":"int","name":"GIT_CHECKOUT_NOTIFY_IGNORED","comments":"","value":16},{"type":"int","name":"GIT_CHECKOUT_NOTIFY_ALL","comments":"","value":65535}],"used":{"returns":[],"needs":["git_checkout_notify_cb"]}}],["git_checkout_opts",{"decl":["unsigned int version","unsigned int checkout_strategy","int disable_filters","unsigned int dir_mode","unsigned int file_mode","int file_open_flags","unsigned int notify_flags","git_checkout_notify_cb notify_cb","void * notify_payload","git_checkout_progress_cb progress_cb","void * progress_payload","git_strarray paths","git_tree * baseline","const char * target_directory"],"type":"struct","value":"git_checkout_opts","file":"git2/checkout.h","line":214,"lineto":241,"block":"unsigned int version\nunsigned int checkout_strategy\nint disable_filters\nunsigned int dir_mode\nunsigned int file_mode\nint file_open_flags\nunsigned int notify_flags\ngit_checkout_notify_cb notify_cb\nvoid * notify_payload\ngit_checkout_progress_cb progress_cb\nvoid * progress_payload\ngit_strarray paths\ngit_tree * baseline\nconst char * target_directory","tdef":"typedef","description":" Checkout options structure","comments":"<p>Zero out for defaults.  Initialize with <code>GIT_CHECKOUT_OPTS_INIT</code> macro to correctly set the <code>version</code> field.  E.g.</p>\n\n<pre><code>    git_checkout_opts opts = GIT_CHECKOUT_OPTS_INIT;\n</code></pre>\n","fields":[{"type":"unsigned int","name":"version","comments":""},{"type":"unsigned int","name":"checkout_strategy","comments":""},{"type":"int","name":"disable_filters","comments":" default will be a dry run "},{"type":"unsigned int","name":"dir_mode","comments":" don't apply filters like CRLF conversion "},{"type":"unsigned int","name":"file_mode","comments":" default is 0755 "},{"type":"int","name":"file_open_flags","comments":" default is 0644 or 0755 as dictated by blob "},{"type":"unsigned int","name":"notify_flags","comments":" default is O_CREAT | O_TRUNC | O_WRONLY "},{"type":"git_checkout_notify_cb","name":"notify_cb","comments":" see `git_checkout_notify_t` above "},{"type":"void *","name":"notify_payload","comments":""},{"type":"git_checkout_progress_cb","name":"progress_cb","comments":""},{"type":"void *","name":"progress_payload","comments":""},{"type":"git_strarray","name":"paths","comments":" When not zeroed out, array of fnmatch patterns specifying which\n  paths should be taken into account, otherwise all files.  Use\n  GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH to treat as simple list."},{"type":"git_tree *","name":"baseline","comments":""},{"type":"const char *","name":"target_directory","comments":" expected content of workdir, defaults to HEAD "}],"used":{"returns":[],"needs":["git_checkout_head","git_checkout_index","git_checkout_tree"]}}],["git_checkout_strategy_t",{"decl":["GIT_CHECKOUT_NONE","GIT_CHECKOUT_SAFE","GIT_CHECKOUT_SAFE_CREATE","GIT_CHECKOUT_FORCE","GIT_CHECKOUT_ALLOW_CONFLICTS","GIT_CHECKOUT_REMOVE_UNTRACKED","GIT_CHECKOUT_REMOVE_IGNORED","GIT_CHECKOUT_UPDATE_ONLY","GIT_CHECKOUT_DONT_UPDATE_INDEX","GIT_CHECKOUT_NO_REFRESH","GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH","GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES","GIT_CHECKOUT_SKIP_UNMERGED","GIT_CHECKOUT_USE_OURS","GIT_CHECKOUT_USE_THEIRS","GIT_CHECKOUT_UPDATE_SUBMODULES","GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED"],"type":"enum","file":"git2/checkout.h","line":103,"lineto":156,"block":"GIT_CHECKOUT_NONE\nGIT_CHECKOUT_SAFE\nGIT_CHECKOUT_SAFE_CREATE\nGIT_CHECKOUT_FORCE\nGIT_CHECKOUT_ALLOW_CONFLICTS\nGIT_CHECKOUT_REMOVE_UNTRACKED\nGIT_CHECKOUT_REMOVE_IGNORED\nGIT_CHECKOUT_UPDATE_ONLY\nGIT_CHECKOUT_DONT_UPDATE_INDEX\nGIT_CHECKOUT_NO_REFRESH\nGIT_CHECKOUT_DISABLE_PATHSPEC_MATCH\nGIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES\nGIT_CHECKOUT_SKIP_UNMERGED\nGIT_CHECKOUT_USE_OURS\nGIT_CHECKOUT_USE_THEIRS\nGIT_CHECKOUT_UPDATE_SUBMODULES\nGIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED","tdef":"typedef","description":" Checkout behavior flags","comments":"<p>In libgit2, checkout is used to update the working directory and index to match a target tree.  Unlike git checkout, it does not move the HEAD commit for you - use <code>git_repository_set_head</code> or the like to do that.</p>\n\n<p>Checkout looks at (up to) four things: the &quot;target&quot; tree you want to check out, the &quot;baseline&quot; tree of what was checked out previously, the working directory for actual files, and the index for staged changes.</p>\n\n<p>You give checkout one of four strategies for update:</p>\n\n<ul>\n<li><p><code>GIT_CHECKOUT_NONE</code> is a dry-run strategy that checks for conflicts,   etc., but doesn&#39;t make any actual changes.</p></li>\n<li><p><code>GIT_CHECKOUT_FORCE</code> is at the opposite extreme, taking any action to   make the working directory match the target (including potentially   discarding modified files).</p></li>\n</ul>\n\n<p>In between those are <code>GIT_CHECKOUT_SAFE</code> and <code>GIT_CHECKOUT_SAFE_CREATE</code> both of which only make modifications that will not lose changes.</p>\n\n<pre><code>                  |  target == baseline   |  target != baseline  | ---------------------|-----------------------|----------------------|  workdir == baseline |       no action       |  create, update, or  |                      |                       |     delete file      | ---------------------|-----------------------|----------------------|  workdir exists and  |       no action       |   conflict (notify   |    is != baseline    | notify dirty MODIFIED | and cancel checkout) | ---------------------|-----------------------|----------------------|   workdir missing,   | create if SAFE_CREATE |     create file      |   baseline present   | notify dirty DELETED  |                      | ---------------------|-----------------------|----------------------|\n</code></pre>\n\n<p>The only difference between SAFE and SAFE_CREATE is that SAFE_CREATE will cause a file to be checked out if it is missing from the working directory even if it is not modified between the target and baseline.</p>\n\n<p>To emulate <code>git checkout</code>, use <code>GIT_CHECKOUT_SAFE</code> with a checkout notification callback (see below) that displays information about dirty files.  The default behavior will cancel checkout on conflicts.</p>\n\n<p>To emulate <code>git checkout-index</code>, use <code>GIT_CHECKOUT_SAFE_CREATE</code> with a notification callback that cancels the operation if a dirty-but-existing file is found in the working directory.  This core git command isn&#39;t quite &quot;force&quot; but is sensitive about some types of changes.</p>\n\n<p>To emulate <code>git checkout -f</code>, use <code>GIT_CHECKOUT_FORCE</code>.</p>\n\n<p>To emulate <code>git clone</code> use <code>GIT_CHECKOUT_SAFE_CREATE</code> in the options.</p>\n\n<p>There are some additional flags to modified the behavior of checkout:</p>\n\n<ul>\n<li><p>GIT_CHECKOUT_ALLOW_CONFLICTS makes SAFE mode apply safe file updates   even if there are conflicts (instead of cancelling the checkout).</p></li>\n<li><p>GIT_CHECKOUT_REMOVE_UNTRACKED means remove untracked files (i.e. not   in target, baseline, or index, and not ignored) from the working dir.</p></li>\n<li><p>GIT_CHECKOUT_REMOVE_IGNORED means remove ignored files (that are also   untracked) from the working directory as well.</p></li>\n<li><p>GIT_CHECKOUT_UPDATE_ONLY means to only update the content of files that   already exist.  Files will not be created nor deleted.  This just skips   applying adds, deletes, and typechanges.</p></li>\n<li><p>GIT_CHECKOUT_DONT_UPDATE_INDEX prevents checkout from writing the   updated files&#39; information to the index.</p></li>\n<li><p>Normally, checkout will reload the index and git attributes from disk   before any operations.  GIT_CHECKOUT_NO_REFRESH prevents this reload.</p></li>\n<li><p>Unmerged index entries are conflicts.  GIT_CHECKOUT_SKIP_UNMERGED skips   files with unmerged index entries instead.  GIT_CHECKOUT_USE_OURS and   GIT_CHECKOUT_USE_THEIRS to proceed with the checkout using either the   stage 2 (&quot;ours&quot;) or stage 3 (&quot;theirs&quot;) version of files in the index.</p></li>\n</ul>\n","fields":[{"type":"int","name":"GIT_CHECKOUT_NONE","comments":"","value":0},{"type":"int","name":"GIT_CHECKOUT_SAFE","comments":"<p>Allow safe updates that cannot overwrite uncommitted data </p>\n","value":1},{"type":"int","name":"GIT_CHECKOUT_SAFE_CREATE","comments":"<p>Allow safe updates plus creation of missing files </p>\n","value":2},{"type":"int","name":"GIT_CHECKOUT_FORCE","comments":"<p>Allow all updates to force working directory to look like index </p>\n","value":4},{"type":"int","name":"GIT_CHECKOUT_ALLOW_CONFLICTS","comments":"<p>Allow checkout to make safe updates even if conflicts are found </p>\n","value":16},{"type":"int","name":"GIT_CHECKOUT_REMOVE_UNTRACKED","comments":"<p>Remove untracked files not in index (that are not ignored) </p>\n","value":32},{"type":"int","name":"GIT_CHECKOUT_REMOVE_IGNORED","comments":"<p>Remove ignored files not in index </p>\n","value":64},{"type":"int","name":"GIT_CHECKOUT_UPDATE_ONLY","comments":"<p>Only update existing files, don&#39;t create new ones </p>\n","value":128},{"type":"int","name":"GIT_CHECKOUT_DONT_UPDATE_INDEX","comments":"<p>Normally checkout updates index entries as it goes; this stops that </p>\n","value":256},{"type":"int","name":"GIT_CHECKOUT_NO_REFRESH","comments":"<p>Don&#39;t refresh index/config/etc before doing checkout </p>\n","value":512},{"type":"int","name":"GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH","comments":"<p>Treat pathspec as simple list of exact match file paths </p>\n","value":8192},{"type":"int","name":"GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES","comments":"<p>Ignore directories in use, they will be left empty </p>\n","value":262144},{"type":"int","name":"GIT_CHECKOUT_SKIP_UNMERGED","comments":"<p>Allow checkout to skip unmerged files (NOT IMPLEMENTED) </p>\n","value":1024},{"type":"int","name":"GIT_CHECKOUT_USE_OURS","comments":"<p>For unmerged files, checkout stage 2 from index (NOT IMPLEMENTED) </p>\n","value":2048},{"type":"int","name":"GIT_CHECKOUT_USE_THEIRS","comments":"<p>For unmerged files, checkout stage 3 from index (NOT IMPLEMENTED) </p>\n","value":4096},{"type":"int","name":"GIT_CHECKOUT_UPDATE_SUBMODULES","comments":"<p>Recursively checkout submodules with same options (NOT IMPLEMENTED) </p>\n","value":65536},{"type":"int","name":"GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED","comments":"<p>Recursively checkout submodules if HEAD moved in super repo (NOT IMPLEMENTED) </p>\n","value":131072}],"used":{"returns":[],"needs":[]}}],["git_clone_options",{"decl":["unsigned int version","git_checkout_opts checkout_opts","int bare","git_transfer_progress_callback fetch_progress_cb","void * fetch_progress_payload","const char * remote_name","const char * pushurl","const char * fetch_spec","const char * push_spec","git_cred_acquire_cb cred_acquire_cb","void * cred_acquire_payload","git_transport_flags_t transport_flags","git_transport * transport","git_remote_callbacks * remote_callbacks","git_remote_autotag_option_t remote_autotag","const char * checkout_branch"],"type":"struct","value":"git_clone_options","file":"git2/clone.h","line":66,"lineto":85,"block":"unsigned int version\ngit_checkout_opts checkout_opts\nint bare\ngit_transfer_progress_callback fetch_progress_cb\nvoid * fetch_progress_payload\nconst char * remote_name\nconst char * pushurl\nconst char * fetch_spec\nconst char * push_spec\ngit_cred_acquire_cb cred_acquire_cb\nvoid * cred_acquire_payload\ngit_transport_flags_t transport_flags\ngit_transport * transport\ngit_remote_callbacks * remote_callbacks\ngit_remote_autotag_option_t remote_autotag\nconst char * checkout_branch","tdef":"typedef","description":" Clone options structure","comments":"<p>Use zeros to indicate default settings.  It&#39;s easiest to use the <code>GIT_CLONE_OPTIONS_INIT</code> macro:</p>\n\n<pre><code>    git_clone_options opts = GIT_CLONE_OPTIONS_INIT;\n</code></pre>\n\n<ul>\n<li><code>checkout_opts</code> is options for the checkout step.  To disable checkout,   set the <code>checkout_strategy</code> to GIT_CHECKOUT_DEFAULT. - <code>bare</code> should be set to zero to create a standard repo, non-zero for   a bare repo - <code>fetch_progress_cb</code> is optional callback for fetch progress. Be aware that   this is called inline with network and indexing operations, so performance   may be affected. - <code>fetch_progress_payload</code> is payload for fetch_progress_cb</li>\n</ul>\n\n<p>** &quot;origin&quot; remote options: ** - <code>remote_name</code> is the name given to the &quot;origin&quot; remote.  The default is   &quot;origin&quot;. - <code>pushurl</code> is a URL to be used for pushing.  NULL means use the fetch url. - <code>fetch_spec</code> is the fetch specification to be used for fetching.  NULL   results in the same behavior as GIT_REMOTE_DEFAULT_FETCH. - <code>push_spec</code> is the fetch specification to be used for pushing.  NULL means   use the same spec as for fetching. - <code>cred_acquire_cb</code> is a callback to be used if credentials are required   during the initial fetch. - <code>cred_acquire_payload</code> is the payload for the above callback. - <code>transport_flags</code> is flags used to create transport if no transport is   provided. - <code>transport</code> is a custom transport to be used for the initial fetch.  NULL   means use the transport autodetected from the URL. - <code>remote_callbacks</code> may be used to specify custom progress callbacks for   the origin remote before the fetch is initiated. - <code>remote_autotag</code> may be used to specify the autotag setting before the   initial fetch.  The default is GIT_REMOTE_DOWNLOAD_TAGS_ALL. - <code>checkout_branch</code> gives the name of the branch to checkout. NULL means   use the remote&#39;s HEAD.</p>\n","fields":[{"type":"unsigned int","name":"version","comments":""},{"type":"git_checkout_opts","name":"checkout_opts","comments":""},{"type":"int","name":"bare","comments":""},{"type":"git_transfer_progress_callback","name":"fetch_progress_cb","comments":""},{"type":"void *","name":"fetch_progress_payload","comments":""},{"type":"const char *","name":"remote_name","comments":""},{"type":"const char *","name":"pushurl","comments":""},{"type":"const char *","name":"fetch_spec","comments":""},{"type":"const char *","name":"push_spec","comments":""},{"type":"git_cred_acquire_cb","name":"cred_acquire_cb","comments":""},{"type":"void *","name":"cred_acquire_payload","comments":""},{"type":"git_transport_flags_t","name":"transport_flags","comments":""},{"type":"git_transport *","name":"transport","comments":""},{"type":"git_remote_callbacks *","name":"remote_callbacks","comments":""},{"type":"git_remote_autotag_option_t","name":"remote_autotag","comments":""},{"type":"const char *","name":"checkout_branch","comments":""}],"used":{"returns":[],"needs":["git_clone"]}}],["git_commit",{"decl":"git_commit","type":"struct","value":"git_commit","file":"git2/types.h","line":120,"lineto":120,"tdef":"typedef","description":" Parsed representation of a commit object. ","comments":"","used":{"returns":[],"needs":["git_branch_create","git_commit_author","git_commit_committer","git_commit_create","git_commit_free","git_commit_id","git_commit_lookup","git_commit_lookup_prefix","git_commit_message","git_commit_message_encoding","git_commit_nth_gen_ancestor","git_commit_owner","git_commit_parent","git_commit_parent_id","git_commit_parentcount","git_commit_time","git_commit_time_offset","git_commit_tree","git_commit_tree_id"]}}],["git_config",{"decl":"git_config","type":"struct","value":"git_config","file":"git2/types.h","line":138,"lineto":138,"tdef":"typedef","description":" Memory representation of a set of config files ","comments":"","used":{"returns":[],"needs":["git_config_add_file_ondisk","git_config_delete_entry","git_config_foreach","git_config_foreach_match","git_config_free","git_config_get_bool","git_config_get_entry","git_config_get_int32","git_config_get_int64","git_config_get_mapped","git_config_get_multivar","git_config_get_string","git_config_new","git_config_open_default","git_config_open_global","git_config_open_level","git_config_open_ondisk","git_config_refresh","git_config_set_bool","git_config_set_int32","git_config_set_int64","git_config_set_multivar","git_config_set_string","git_repository_config"]}}],["git_config_backend",{"decl":"git_config_backend","type":"struct","value":"git_config_backend","file":"git2/types.h","line":141,"lineto":141,"tdef":"typedef","description":" Interface to access a configuration file ","comments":"","used":{"returns":[],"needs":[]}}],["git_config_level_t",{"decl":["GIT_CONFIG_LEVEL_SYSTEM","GIT_CONFIG_LEVEL_XDG","GIT_CONFIG_LEVEL_GLOBAL","GIT_CONFIG_LEVEL_LOCAL","GIT_CONFIG_LEVEL_APP","GIT_CONFIG_HIGHEST_LEVEL"],"type":"enum","file":"git2/config.h","line":30,"lineto":55,"block":"GIT_CONFIG_LEVEL_SYSTEM\nGIT_CONFIG_LEVEL_XDG\nGIT_CONFIG_LEVEL_GLOBAL\nGIT_CONFIG_LEVEL_LOCAL\nGIT_CONFIG_LEVEL_APP\nGIT_CONFIG_HIGHEST_LEVEL","tdef":"typedef","description":" Priority level of a config file.\n These priority levels correspond to the natural escalation logic\n (from higher to lower) when searching for config entries in git.git.","comments":"<p>git_config_open_default() and git_repository_config() honor those priority levels as well.</p>\n","fields":[{"type":"int","name":"GIT_CONFIG_LEVEL_SYSTEM","comments":"<p>System-wide configuration file; /etc/gitconfig on Linux systems </p>\n","value":1},{"type":"int","name":"GIT_CONFIG_LEVEL_XDG","comments":"<p>XDG compatible configuration file; typically ~/.config/git/config </p>\n","value":2},{"type":"int","name":"GIT_CONFIG_LEVEL_GLOBAL","comments":"<p>User-specific configuration file (also called Global configuration\n file); typically ~/.gitconfig</p>\n","value":3},{"type":"int","name":"GIT_CONFIG_LEVEL_LOCAL","comments":"<p>Repository specific configuration file; $WORK_DIR/.git/config on\n non-bare repos</p>\n","value":4},{"type":"int","name":"GIT_CONFIG_LEVEL_APP","comments":"<p>Application specific configuration file; freely defined by applications</p>\n","value":5},{"type":"int","name":"GIT_CONFIG_HIGHEST_LEVEL","comments":"<p>Represents the highest level available config file (i.e. the most\n specific config file available that actually is loaded)</p>\n","value":-1}],"used":{"returns":[],"needs":["git_config_add_file_ondisk","git_config_open_level"]}}],["git_credtype_t",{"decl":["GIT_CREDTYPE_USERPASS_PLAINTEXT","GIT_CREDTYPE_SSH_KEYFILE_PASSPHRASE","GIT_CREDTYPE_SSH_PUBLICKEY"],"type":"enum","file":"git2/transport.h","line":31,"lineto":36,"block":"GIT_CREDTYPE_USERPASS_PLAINTEXT\nGIT_CREDTYPE_SSH_KEYFILE_PASSPHRASE\nGIT_CREDTYPE_SSH_PUBLICKEY","tdef":"typedef","description":" \n\n git2/transport.h\n ","comments":"<p>@{</p>\n","fields":[{"type":"int","name":"GIT_CREDTYPE_USERPASS_PLAINTEXT","comments":"","value":1},{"type":"int","name":"GIT_CREDTYPE_SSH_KEYFILE_PASSPHRASE","comments":"","value":2},{"type":"int","name":"GIT_CREDTYPE_SSH_PUBLICKEY","comments":"","value":3}],"used":{"returns":[],"needs":[]}}],["git_delta_t",{"decl":["GIT_DELTA_UNMODIFIED","GIT_DELTA_ADDED","GIT_DELTA_DELETED","GIT_DELTA_MODIFIED","GIT_DELTA_RENAMED","GIT_DELTA_COPIED","GIT_DELTA_IGNORED","GIT_DELTA_UNTRACKED","GIT_DELTA_TYPECHANGE"],"type":"enum","file":"git2/diff.h","line":190,"lineto":200,"block":"GIT_DELTA_UNMODIFIED\nGIT_DELTA_ADDED\nGIT_DELTA_DELETED\nGIT_DELTA_MODIFIED\nGIT_DELTA_RENAMED\nGIT_DELTA_COPIED\nGIT_DELTA_IGNORED\nGIT_DELTA_UNTRACKED\nGIT_DELTA_TYPECHANGE","tdef":"typedef","description":" What type of change is described by a git_diff_delta?","comments":"<p><code>GIT_DELTA_RENAMED</code> and <code>GIT_DELTA_COPIED</code> will only show up if you run <code>git_diff_find_similar()</code> on the diff list object.</p>\n\n<p><code>GIT_DELTA_TYPECHANGE</code> only shows up given <code>GIT_DIFF_INCLUDE_TYPECHANGE</code> in the option flags (otherwise type changes will be split into ADDED / DELETED pairs).</p>\n","fields":[{"type":"int","name":"GIT_DELTA_UNMODIFIED","comments":"","value":0},{"type":"int","name":"GIT_DELTA_ADDED","comments":"<p>no changes </p>\n","value":1},{"type":"int","name":"GIT_DELTA_DELETED","comments":"<p>entry does not exist in old version </p>\n","value":2},{"type":"int","name":"GIT_DELTA_MODIFIED","comments":"<p>entry does not exist in new version </p>\n","value":3},{"type":"int","name":"GIT_DELTA_RENAMED","comments":"<p>entry content changed between old and new </p>\n","value":4},{"type":"int","name":"GIT_DELTA_COPIED","comments":"<p>entry was renamed between old and new </p>\n","value":5},{"type":"int","name":"GIT_DELTA_IGNORED","comments":"<p>entry was copied from another old entry </p>\n","value":6},{"type":"int","name":"GIT_DELTA_UNTRACKED","comments":"<p>entry is ignored item in workdir </p>\n","value":7},{"type":"int","name":"GIT_DELTA_TYPECHANGE","comments":"<p>entry is untracked item in workdir </p>\n","value":8}],"used":{"returns":[],"needs":["git_diff_num_deltas_of_type","git_diff_status_char"]}}],["git_diff_delta",{"decl":["git_diff_file old_file","git_diff_file new_file","git_delta_t status","uint32_t similarity","uint32_t flags"],"type":"struct","value":"git_diff_delta","file":"git2/diff.h","line":268,"lineto":274,"block":"git_diff_file old_file\ngit_diff_file new_file\ngit_delta_t status\nuint32_t similarity\nuint32_t flags","tdef":"typedef","description":" Description of changes to one entry.","comments":"<p>When iterating over a diff list object, this will be passed to most callback functions and you can use the contents to understand exactly what has changed.</p>\n\n<p>The <code>old_file</code> represents the &quot;from&quot; side of the diff and the <code>new_file</code> represents to &quot;to&quot; side of the diff.  What those means depend on the function that was used to generate the diff and will be documented below. You can also use the <code>GIT_DIFF_REVERSE</code> flag to flip it around.</p>\n\n<p>Although the two sides of the delta are named &quot;old_file&quot; and &quot;new_file&quot;, they actually may correspond to entries that represent a file, a symbolic link, a submodule commit id, or even a tree (if you are tracking type changes or ignored/untracked directories).</p>\n\n<p>Under some circumstances, in the name of efficiency, not all fields will be filled in, but we generally try to fill in as much as possible.  One example is that the &quot;flags&quot; field may not have either the <code>BINARY</code> or the <code>NOT_BINARY</code> flag set to avoid examining file contents if you do not pass in hunk and/or line callbacks to the diff foreach iteration function.  It will just use the git attributes for those files.</p>\n\n<p>The similarity score is zero unless you call <code>git_diff_find_similar()</code> which does a similarity analysis of files in the diff.  Use that function to do rename and copy detection, and to split heavily modified files in add/delete pairs.  After that call, deltas with a status of GIT_DELTA_RENAMED or GIT_DELTA_COPIED will have a similarity score between 0 and 100 indicating how similar the old and new sides are.</p>\n\n<p>If you ask <code>git_diff_find_similar</code> to find heavily modified files to break, but to not <em>actually</em> break the records, then GIT_DELTA_MODIFIED records may have a non-zero similarity score if the self-similarity is below the split threshold.  To display this value like core Git, invert the score (a la <code>printf(&quot;M%03d&quot;, 100 - delta-&gt;similarity)</code>).</p>\n","fields":[{"type":"git_diff_file","name":"old_file","comments":""},{"type":"git_diff_file","name":"new_file","comments":""},{"type":"git_delta_t","name":"status","comments":""},{"type":"uint32_t","name":"similarity","comments":" for RENAMED and COPIED, value 0-100 "},{"type":"uint32_t","name":"flags","comments":""}],"used":{"returns":["git_diff_patch_delta"],"needs":["git_diff_data_cb","git_diff_file_cb","git_diff_get_patch","git_diff_hunk_cb","git_diff_notify_cb"]}}],["git_diff_file",{"decl":["git_oid oid","const char * path","git_off_t size","uint32_t flags","uint16_t mode"],"type":"struct","value":"git_diff_file","file":"git2/diff.h","line":223,"lineto":229,"block":"git_oid oid\nconst char * path\ngit_off_t size\nuint32_t flags\nuint16_t mode","tdef":"typedef","description":" Description of one side of a diff entry.","comments":"<p>Although this is called a &quot;file&quot;, it may actually represent a file, a symbolic link, a submodule commit id, or even a tree (although that only if you are tracking type changes or ignored/untracked directories).</p>\n\n<p>The <code>oid</code> is the <code>git_oid</code> of the item.  If the entry represents an absent side of a diff (e.g. the <code>old_file</code> of a <code>GIT_DELTA_ADDED</code> delta), then the oid will be zeroes.</p>\n\n<p><code>path</code> is the NUL-terminated path to the entry relative to the working directory of the repository.</p>\n\n<p><code>size</code> is the size of the entry in bytes.</p>\n\n<p><code>flags</code> is a combination of the <code>git_diff_flag_t</code> types</p>\n\n<p><code>mode</code> is, roughly, the stat() <code>st_mode</code> value for the item.  This will be restricted to one of the <code>git_filemode_t</code> values.</p>\n","fields":[{"type":"git_oid","name":"oid","comments":""},{"type":"const char *","name":"path","comments":""},{"type":"git_off_t","name":"size","comments":""},{"type":"uint32_t","name":"flags","comments":""},{"type":"uint16_t","name":"mode","comments":""}],"used":{"returns":[],"needs":["git_checkout_notify_cb","git_diff_blob_to_buffer","git_diff_blobs","git_diff_foreach"]}}],["git_diff_find_options",{"decl":["unsigned int version","uint32_t flags","uint16_t rename_threshold","uint16_t rename_from_rewrite_threshold","uint16_t copy_threshold","uint16_t break_rewrite_threshold","size_t rename_limit","git_diff_similarity_metric * metric"],"type":"struct","value":"git_diff_find_options","file":"git2/diff.h","line":491,"lineto":513,"block":"unsigned int version\nuint32_t flags\nuint16_t rename_threshold\nuint16_t rename_from_rewrite_threshold\nuint16_t copy_threshold\nuint16_t break_rewrite_threshold\nsize_t rename_limit\ngit_diff_similarity_metric * metric","tdef":"typedef","description":" Control behavior of rename and copy detection","comments":"<p>These options mostly mimic parameters that can be passed to git-diff.</p>\n\n<ul>\n<li><code>rename_threshold</code> is the same as the -M option with a value - <code>copy_threshold</code> is the same as the -C option with a value - <code>rename_from_rewrite_threshold</code> matches the top of the -B option - <code>break_rewrite_threshold</code> matches the bottom of the -B option - <code>rename_limit</code> is the maximum number of matches to consider for   a particular file.  This is a little different from the <code>-l</code> option   to regular Git because we will still process up to this many matches   before abandoning the search.</li>\n</ul>\n\n<p>The <code>metric</code> option allows you to plug in a custom similarity metric. Set it to NULL for the default internal metric which is based on sampling hashes of ranges of data in the file.  The default metric is a pretty good similarity approximation that should work fairly well for both text and binary data, and is pretty fast with fixed memory overhead.</p>\n","fields":[{"type":"unsigned int","name":"version","comments":""},{"type":"uint32_t","name":"flags","comments":" Combination of git_diff_find_t values (default FIND_RENAMES) "},{"type":"uint16_t","name":"rename_threshold","comments":" Similarity to consider a file renamed (default 50) "},{"type":"uint16_t","name":"rename_from_rewrite_threshold","comments":" Similarity of modified to be eligible rename source (default 50) "},{"type":"uint16_t","name":"copy_threshold","comments":" Similarity to consider a file a copy (default 50) "},{"type":"uint16_t","name":"break_rewrite_threshold","comments":" Similarity to split modify into delete/add pair (default 60) "},{"type":"size_t","name":"rename_limit","comments":" Maximum similarity sources to examine for a file (somewhat like\n  git-diff's `-l` option or `diff.renameLimit` config) (default 200)"},{"type":"git_diff_similarity_metric *","name":"metric","comments":" Pluggable similarity metric; pass NULL to use internal metric "}],"used":{"returns":[],"needs":["git_diff_find_similar"]}}],["git_diff_find_t",{"decl":["GIT_DIFF_FIND_RENAMES","GIT_DIFF_FIND_RENAMES_FROM_REWRITES","GIT_DIFF_FIND_COPIES","GIT_DIFF_FIND_COPIES_FROM_UNMODIFIED","GIT_DIFF_FIND_REWRITES","GIT_DIFF_BREAK_REWRITES","GIT_DIFF_FIND_AND_BREAK_REWRITES","GIT_DIFF_FIND_FOR_UNTRACKED","GIT_DIFF_FIND_ALL","GIT_DIFF_FIND_IGNORE_LEADING_WHITESPACE","GIT_DIFF_FIND_IGNORE_WHITESPACE","GIT_DIFF_FIND_DONT_IGNORE_WHITESPACE","GIT_DIFF_FIND_EXACT_MATCH_ONLY"],"type":"enum","file":"git2/diff.h","line":421,"lineto":454,"block":"GIT_DIFF_FIND_RENAMES\nGIT_DIFF_FIND_RENAMES_FROM_REWRITES\nGIT_DIFF_FIND_COPIES\nGIT_DIFF_FIND_COPIES_FROM_UNMODIFIED\nGIT_DIFF_FIND_REWRITES\nGIT_DIFF_BREAK_REWRITES\nGIT_DIFF_FIND_AND_BREAK_REWRITES\nGIT_DIFF_FIND_FOR_UNTRACKED\nGIT_DIFF_FIND_ALL\nGIT_DIFF_FIND_IGNORE_LEADING_WHITESPACE\nGIT_DIFF_FIND_IGNORE_WHITESPACE\nGIT_DIFF_FIND_DONT_IGNORE_WHITESPACE\nGIT_DIFF_FIND_EXACT_MATCH_ONLY","tdef":"typedef","description":" Flags to control the behavior of diff rename/copy detection.","comments":"","fields":[{"type":"int","name":"GIT_DIFF_FIND_RENAMES","comments":"<p>look for renames? (<code>--find-renames</code>) </p>\n","value":1},{"type":"int","name":"GIT_DIFF_FIND_RENAMES_FROM_REWRITES","comments":"<p>consider old side of modified for renames? (<code>--break-rewrites=N</code>) </p>\n","value":2},{"type":"int","name":"GIT_DIFF_FIND_COPIES","comments":"<p>look for copies? (a la <code>--find-copies</code>) </p>\n","value":4},{"type":"int","name":"GIT_DIFF_FIND_COPIES_FROM_UNMODIFIED","comments":"<p>consider unmodified as copy sources? (<code>--find-copies-harder</code>) </p>\n","value":8},{"type":"int","name":"GIT_DIFF_FIND_REWRITES","comments":"<p>mark large rewrites for split (<code>--break-rewrites=/M</code>) </p>\n","value":16},{"type":"int","name":"GIT_DIFF_BREAK_REWRITES","comments":"<p>actually split large rewrites into delete/add pairs </p>\n","value":32},{"type":"int","name":"GIT_DIFF_FIND_AND_BREAK_REWRITES","comments":"<p>mark rewrites for split and break into delete/add pairs </p>\n","value":48},{"type":"int","name":"GIT_DIFF_FIND_FOR_UNTRACKED","comments":"<p>find renames/copies for untracked items in working directory </p>\n","value":64},{"type":"int","name":"GIT_DIFF_FIND_ALL","comments":"<p>turn on all finding features </p>\n","value":255},{"type":"int","name":"GIT_DIFF_FIND_IGNORE_LEADING_WHITESPACE","comments":"<p>measure similarity ignoring leading whitespace (default) </p>\n","value":0},{"type":"int","name":"GIT_DIFF_FIND_IGNORE_WHITESPACE","comments":"<p>measure similarity ignoring all whitespace </p>\n","value":4096},{"type":"int","name":"GIT_DIFF_FIND_DONT_IGNORE_WHITESPACE","comments":"<p>measure similarity including all data </p>\n","value":8192},{"type":"int","name":"GIT_DIFF_FIND_EXACT_MATCH_ONLY","comments":"<p>measure similarity only by comparing SHAs (fast and cheap) </p>\n","value":16384}],"used":{"returns":[],"needs":[]}}],["git_diff_flag_t",{"decl":["GIT_DIFF_FLAG_BINARY","GIT_DIFF_FLAG_NOT_BINARY","GIT_DIFF_FLAG_VALID_OID"],"type":"enum","file":"git2/diff.h","line":174,"lineto":178,"block":"GIT_DIFF_FLAG_BINARY\nGIT_DIFF_FLAG_NOT_BINARY\nGIT_DIFF_FLAG_VALID_OID","tdef":"typedef","description":" Flags for the delta object and the file objects on each side.","comments":"<p>These flags are used for both the <code>flags</code> value of the <code>git_diff_delta</code> and the flags for the <code>git_diff_file</code> objects representing the old and new sides of the delta.  Values outside of this public range should be considered reserved for internal or future use.</p>\n","fields":[{"type":"int","name":"GIT_DIFF_FLAG_BINARY","comments":"","value":1},{"type":"int","name":"GIT_DIFF_FLAG_NOT_BINARY","comments":"<p>file(s) treated as binary data </p>\n","value":2},{"type":"int","name":"GIT_DIFF_FLAG_VALID_OID","comments":"<p>file(s) treated as text data </p>\n","value":4}],"used":{"returns":[],"needs":[]}}],["git_diff_line_t",{"decl":["GIT_DIFF_LINE_CONTEXT","GIT_DIFF_LINE_ADDITION","GIT_DIFF_LINE_DELETION","GIT_DIFF_LINE_CONTEXT_EOFNL","GIT_DIFF_LINE_ADD_EOFNL","GIT_DIFF_LINE_DEL_EOFNL","GIT_DIFF_LINE_FILE_HDR","GIT_DIFF_LINE_HUNK_HDR","GIT_DIFF_LINE_BINARY"],"type":"enum","file":"git2/diff.h","line":375,"lineto":392,"block":"GIT_DIFF_LINE_CONTEXT\nGIT_DIFF_LINE_ADDITION\nGIT_DIFF_LINE_DELETION\nGIT_DIFF_LINE_CONTEXT_EOFNL\nGIT_DIFF_LINE_ADD_EOFNL\nGIT_DIFF_LINE_DEL_EOFNL\nGIT_DIFF_LINE_FILE_HDR\nGIT_DIFF_LINE_HUNK_HDR\nGIT_DIFF_LINE_BINARY","tdef":"typedef","description":" Line origin constants.","comments":"<p>These values describe where a line came from and will be passed to the git_diff_data_cb when iterating over a diff.  There are some special origin constants at the end that are used for the text output callbacks to demarcate lines that are actually part of the file or hunk headers.</p>\n","fields":[{"type":"int","name":"GIT_DIFF_LINE_CONTEXT","comments":"","value":32},{"type":"int","name":"GIT_DIFF_LINE_ADDITION","comments":"","value":43},{"type":"int","name":"GIT_DIFF_LINE_DELETION","comments":"","value":45},{"type":"int","name":"GIT_DIFF_LINE_CONTEXT_EOFNL","comments":"<p>Both files have no LF at end </p>\n","value":61},{"type":"int","name":"GIT_DIFF_LINE_ADD_EOFNL","comments":"<p>Old has no LF at end, new does </p>\n","value":62},{"type":"int","name":"GIT_DIFF_LINE_DEL_EOFNL","comments":"<p>Old has LF at end, new does not </p>\n","value":60},{"type":"int","name":"GIT_DIFF_LINE_FILE_HDR","comments":"","value":70},{"type":"int","name":"GIT_DIFF_LINE_HUNK_HDR","comments":"","value":72},{"type":"int","name":"GIT_DIFF_LINE_BINARY","comments":"","value":66}],"used":{"returns":[],"needs":[]}}],["git_diff_list",{"decl":"git_diff_list","type":"struct","value":"git_diff_list","file":"git2/diff.h","line":164,"lineto":164,"tdef":"typedef","description":" The diff list object that contains all individual file deltas.","comments":"<p>This is an opaque structure which will be allocated by one of the diff generator functions below (such as <code>git_diff_tree_to_tree</code>).  You are responsible for releasing the object memory when done, using the <code>git_diff_list_free()</code> function.</p>\n","used":{"returns":[],"needs":["git_diff_find_similar","git_diff_foreach","git_diff_get_patch","git_diff_index_to_workdir","git_diff_list_free","git_diff_merge","git_diff_notify_cb","git_diff_num_deltas","git_diff_num_deltas_of_type","git_diff_print_compact","git_diff_print_patch","git_diff_print_raw","git_diff_tree_to_index","git_diff_tree_to_tree","git_diff_tree_to_workdir"]}}],["git_diff_option_t",{"decl":["GIT_DIFF_NORMAL","GIT_DIFF_REVERSE","GIT_DIFF_FORCE_TEXT","GIT_DIFF_IGNORE_WHITESPACE","GIT_DIFF_IGNORE_WHITESPACE_CHANGE","GIT_DIFF_IGNORE_WHITESPACE_EOL","GIT_DIFF_IGNORE_SUBMODULES","GIT_DIFF_PATIENCE","GIT_DIFF_INCLUDE_IGNORED","GIT_DIFF_INCLUDE_UNTRACKED","GIT_DIFF_INCLUDE_UNMODIFIED","GIT_DIFF_RECURSE_UNTRACKED_DIRS","GIT_DIFF_DISABLE_PATHSPEC_MATCH","GIT_DIFF_DELTAS_ARE_ICASE","GIT_DIFF_INCLUDE_UNTRACKED_CONTENT","GIT_DIFF_SKIP_BINARY_CHECK","GIT_DIFF_INCLUDE_TYPECHANGE","GIT_DIFF_INCLUDE_TYPECHANGE_TREES","GIT_DIFF_IGNORE_FILEMODE","GIT_DIFF_RECURSE_IGNORED_DIRS","GIT_DIFF_FAST_UNTRACKED_DIRS","GIT_DIFF_FORCE_BINARY"],"type":"enum","file":"git2/diff.h","line":68,"lineto":154,"block":"GIT_DIFF_NORMAL\nGIT_DIFF_REVERSE\nGIT_DIFF_FORCE_TEXT\nGIT_DIFF_IGNORE_WHITESPACE\nGIT_DIFF_IGNORE_WHITESPACE_CHANGE\nGIT_DIFF_IGNORE_WHITESPACE_EOL\nGIT_DIFF_IGNORE_SUBMODULES\nGIT_DIFF_PATIENCE\nGIT_DIFF_INCLUDE_IGNORED\nGIT_DIFF_INCLUDE_UNTRACKED\nGIT_DIFF_INCLUDE_UNMODIFIED\nGIT_DIFF_RECURSE_UNTRACKED_DIRS\nGIT_DIFF_DISABLE_PATHSPEC_MATCH\nGIT_DIFF_DELTAS_ARE_ICASE\nGIT_DIFF_INCLUDE_UNTRACKED_CONTENT\nGIT_DIFF_SKIP_BINARY_CHECK\nGIT_DIFF_INCLUDE_TYPECHANGE\nGIT_DIFF_INCLUDE_TYPECHANGE_TREES\nGIT_DIFF_IGNORE_FILEMODE\nGIT_DIFF_RECURSE_IGNORED_DIRS\nGIT_DIFF_FAST_UNTRACKED_DIRS\nGIT_DIFF_FORCE_BINARY","tdef":"typedef","description":" Flags for diff options.  A combination of these flags can be passed\n in via the `flags` value in the `git_diff_options`.","comments":"","fields":[{"type":"int","name":"GIT_DIFF_NORMAL","comments":"<p>Normal diff, the default </p>\n","value":0},{"type":"int","name":"GIT_DIFF_REVERSE","comments":"<p>Reverse the sides of the diff </p>\n","value":1},{"type":"int","name":"GIT_DIFF_FORCE_TEXT","comments":"<p>Treat all files as text, disabling binary attributes \n&amp;\n detection </p>\n","value":2},{"type":"int","name":"GIT_DIFF_IGNORE_WHITESPACE","comments":"<p>Ignore all whitespace </p>\n","value":4},{"type":"int","name":"GIT_DIFF_IGNORE_WHITESPACE_CHANGE","comments":"<p>Ignore changes in amount of whitespace </p>\n","value":8},{"type":"int","name":"GIT_DIFF_IGNORE_WHITESPACE_EOL","comments":"<p>Ignore whitespace at end of line </p>\n","value":16},{"type":"int","name":"GIT_DIFF_IGNORE_SUBMODULES","comments":"<p>Exclude submodules from the diff completely </p>\n","value":32},{"type":"int","name":"GIT_DIFF_PATIENCE","comments":"<p>Use the &quot;patience diff&quot; algorithm (currently unimplemented) </p>\n","value":64},{"type":"int","name":"GIT_DIFF_INCLUDE_IGNORED","comments":"<p>Include ignored files in the diff list </p>\n","value":128},{"type":"int","name":"GIT_DIFF_INCLUDE_UNTRACKED","comments":"<p>Include untracked files in the diff list </p>\n","value":256},{"type":"int","name":"GIT_DIFF_INCLUDE_UNMODIFIED","comments":"<p>Include unmodified files in the diff list </p>\n","value":512},{"type":"int","name":"GIT_DIFF_RECURSE_UNTRACKED_DIRS","comments":"<p>Even with GIT_DIFF_INCLUDE_UNTRACKED, an entire untracked\n  directory will be marked with only a single entry in the diff list\n  (a la what core Git does in <code>git status</code>); this flag adds <em>all</em>\n  files under untracked directories as UNTRACKED entries, too.</p>\n","value":1024},{"type":"int","name":"GIT_DIFF_DISABLE_PATHSPEC_MATCH","comments":"<p>If the pathspec is set in the diff options, this flags means to\n  apply it as an exact match instead of as an fnmatch pattern.</p>\n","value":2048},{"type":"int","name":"GIT_DIFF_DELTAS_ARE_ICASE","comments":"<p>Use case insensitive filename comparisons </p>\n","value":4096},{"type":"int","name":"GIT_DIFF_INCLUDE_UNTRACKED_CONTENT","comments":"<p>When generating patch text, include the content of untracked\n  files.  This automatically turns on GIT_DIFF_INCLUDE_UNTRACKED but\n  it does not turn on GIT_DIFF_RECURSE_UNTRACKED_DIRS.  Add that\n  flag if you want the content of every single UNTRACKED file.</p>\n","value":8192},{"type":"int","name":"GIT_DIFF_SKIP_BINARY_CHECK","comments":"<p>Disable updating of the <code>binary</code> flag in delta records.  This is\n  useful when iterating over a diff if you don&#39;t need hunk and data\n  callbacks and want to avoid having to load file completely.</p>\n","value":16384},{"type":"int","name":"GIT_DIFF_INCLUDE_TYPECHANGE","comments":"<p>Normally, a type change between files will be converted into a\n  DELETED record for the old and an ADDED record for the new; this\n  options enabled the generation of TYPECHANGE delta records.</p>\n","value":32768},{"type":"int","name":"GIT_DIFF_INCLUDE_TYPECHANGE_TREES","comments":"<p>Even with GIT_DIFF_INCLUDE_TYPECHANGE, blob-&gt;tree changes still\n  generally show as a DELETED blob.  This flag tries to correctly\n  label blob-&gt;tree transitions as TYPECHANGE records with new_file&#39;s\n  mode set to tree.  Note: the tree SHA will not be available.</p>\n","value":65536},{"type":"int","name":"GIT_DIFF_IGNORE_FILEMODE","comments":"<p>Ignore file mode changes </p>\n","value":131072},{"type":"int","name":"GIT_DIFF_RECURSE_IGNORED_DIRS","comments":"<p>Even with GIT_DIFF_INCLUDE_IGNORED, an entire ignored directory\n  will be marked with only a single entry in the diff list; this flag\n  adds all files under the directory as IGNORED entries, too.</p>\n","value":262144},{"type":"int","name":"GIT_DIFF_FAST_UNTRACKED_DIRS","comments":"<p>Core Git scans inside untracked directories, labeling them IGNORED\n  if they are empty or only contain ignored files; a directory is\n  consider UNTRACKED only if it has an actual untracked file in it.\n  This scan is extra work for a case you often don&#39;t care about.  This\n  flag makes libgit2 immediately label an untracked directory as\n  UNTRACKED without looking inside it (which differs from core Git).\n  Of course, ignore rules are still checked for the directory itself.</p>\n","value":524288},{"type":"int","name":"GIT_DIFF_FORCE_BINARY","comments":"<p>Treat all files as binary, disabling text diffs </p>\n","value":1048576}],"used":{"returns":[],"needs":[]}}],["git_diff_options",{"decl":["unsigned int version","uint32_t flags","uint16_t context_lines","uint16_t interhunk_lines","const char * old_prefix","const char * new_prefix","git_strarray pathspec","git_off_t max_size","git_diff_notify_cb notify_cb","void * notify_payload"],"type":"struct","value":"git_diff_options","file":"git2/diff.h","line":318,"lineto":329,"block":"unsigned int version\nuint32_t flags\nuint16_t context_lines\nuint16_t interhunk_lines\nconst char * old_prefix\nconst char * new_prefix\ngit_strarray pathspec\ngit_off_t max_size\ngit_diff_notify_cb notify_cb\nvoid * notify_payload","tdef":"typedef","description":" Structure describing options about how the diff should be executed.","comments":"<p>Setting all values of the structure to zero will yield the default values.  Similarly, passing NULL for the options structure will give the defaults.  The default values are marked below.</p>\n\n<ul>\n<li><code>flags</code> is a combination of the <code>git_diff_option_t</code> values above - <code>context_lines</code> is the number of unchanged lines that define the    boundary of a hunk (and to display before and after) - <code>interhunk_lines</code> is the maximum number of unchanged lines between    hunk boundaries before the hunks will be merged into a one. - <code>old_prefix</code> is the virtual &quot;directory&quot; to prefix to old file names   in hunk headers (default &quot;a&quot;) - <code>new_prefix</code> is the virtual &quot;directory&quot; to prefix to new file names   in hunk headers (default &quot;b&quot;) - <code>pathspec</code> is an array of paths / fnmatch patterns to constrain diff - <code>max_size</code> is a file size (in bytes) above which a blob will be marked   as binary automatically; pass a negative value to disable. - <code>notify_cb</code> is an optional callback function, notifying the consumer of   which files are being examined as the diff is generated - <code>notify_payload</code> is the payload data to pass to the <code>notify_cb</code> function</li>\n</ul>\n","fields":[{"type":"unsigned int","name":"version","comments":" version for the struct "},{"type":"uint32_t","name":"flags","comments":" defaults to GIT_DIFF_NORMAL "},{"type":"uint16_t","name":"context_lines","comments":" defaults to 3 "},{"type":"uint16_t","name":"interhunk_lines","comments":" defaults to 0 "},{"type":"const char *","name":"old_prefix","comments":" defaults to \"a\" "},{"type":"const char *","name":"new_prefix","comments":" defaults to \"b\" "},{"type":"git_strarray","name":"pathspec","comments":" defaults to include all paths "},{"type":"git_off_t","name":"max_size","comments":" defaults to 512MB "},{"type":"git_diff_notify_cb","name":"notify_cb","comments":""},{"type":"void *","name":"notify_payload","comments":""}],"used":{"returns":[],"needs":["git_diff_blob_to_buffer","git_diff_blobs","git_diff_index_to_workdir","git_diff_patch_from_blob_and_buffer","git_diff_patch_from_blobs","git_diff_tree_to_index","git_diff_tree_to_tree","git_diff_tree_to_workdir"]}}],["git_diff_patch",{"decl":"git_diff_patch","type":"struct","value":"git_diff_patch","file":"git2/diff.h","line":416,"lineto":416,"tdef":"typedef","description":" The diff patch is used to store all the text diffs for a delta.","comments":"<p>You can easily loop over the content of patches and get information about them.</p>\n","used":{"returns":[],"needs":["git_diff_get_patch","git_diff_patch_delta","git_diff_patch_free","git_diff_patch_from_blob_and_buffer","git_diff_patch_from_blobs","git_diff_patch_get_hunk","git_diff_patch_get_line_in_hunk","git_diff_patch_line_stats","git_diff_patch_num_hunks","git_diff_patch_num_lines_in_hunk","git_diff_patch_print","git_diff_patch_to_str"]}}],["git_diff_range",{"decl":["int old_start","int old_lines","int new_start","int new_lines"],"type":"struct","value":"git_diff_range","file":"git2/diff.h","line":349,"lineto":354,"block":"int old_start\nint old_lines\nint new_start\nint new_lines","tdef":"typedef","description":" Structure describing a hunk of a diff.","comments":"","fields":[{"type":"int","name":"old_start","comments":""},{"type":"int","name":"old_lines","comments":" Starting line number in old_file "},{"type":"int","name":"new_start","comments":" Number of lines in old_file "},{"type":"int","name":"new_lines","comments":" Starting line number in new_file "}],"used":{"returns":[],"needs":["git_diff_data_cb","git_diff_hunk_cb","git_diff_patch_get_hunk"]}}],["git_diff_similarity_metric",{"decl":["int (*)(void **, const git_diff_file *, const char *, void *) file_signature","int (*)(void **, const git_diff_file *, const char *, size_t, void *) buffer_signature","void (*)(void *, void *) free_signature","int (*)(int *, void *, void *, void *) similarity","void * payload"],"type":"struct","value":"git_diff_similarity_metric","file":"git2/diff.h","line":459,"lineto":469,"block":"int (*)(void **, const git_diff_file *, const char *, void *) file_signature\nint (*)(void **, const git_diff_file *, const char *, size_t, void *) buffer_signature\nvoid (*)(void *, void *) free_signature\nint (*)(int *, void *, void *, void *) similarity\nvoid * payload","tdef":"typedef","description":" Pluggable similarity metric","comments":"","fields":[{"type":"int (*)(void **, const git_diff_file *, const char *, void *)","name":"file_signature","comments":""},{"type":"int (*)(void **, const git_diff_file *, const char *, size_t, void *)","name":"buffer_signature","comments":""},{"type":"void (*)(void *, void *)","name":"free_signature","comments":""},{"type":"int (*)(int *, void *, void *, void *)","name":"similarity","comments":""},{"type":"void *","name":"payload","comments":""}],"used":{"returns":[],"needs":[]}}],["git_error_code",{"decl":["GIT_OK","GIT_ERROR","GIT_ENOTFOUND","GIT_EEXISTS","GIT_EAMBIGUOUS","GIT_EBUFS","GIT_EUSER","GIT_EBAREREPO","GIT_EORPHANEDHEAD","GIT_EUNMERGED","GIT_ENONFASTFORWARD","GIT_EINVALIDSPEC","GIT_EMERGECONFLICT","GIT_PASSTHROUGH","GIT_ITEROVER"],"type":"enum","file":"git2/errors.h","line":21,"lineto":38,"block":"GIT_OK\nGIT_ERROR\nGIT_ENOTFOUND\nGIT_EEXISTS\nGIT_EAMBIGUOUS\nGIT_EBUFS\nGIT_EUSER\nGIT_EBAREREPO\nGIT_EORPHANEDHEAD\nGIT_EUNMERGED\nGIT_ENONFASTFORWARD\nGIT_EINVALIDSPEC\nGIT_EMERGECONFLICT\nGIT_PASSTHROUGH\nGIT_ITEROVER","tdef":"typedef","description":" Generic return codes ","comments":"","fields":[{"type":"int","name":"GIT_OK","comments":"","value":0},{"type":"int","name":"GIT_ERROR","comments":"","value":-1},{"type":"int","name":"GIT_ENOTFOUND","comments":"","value":-3},{"type":"int","name":"GIT_EEXISTS","comments":"","value":-4},{"type":"int","name":"GIT_EAMBIGUOUS","comments":"","value":-5},{"type":"int","name":"GIT_EBUFS","comments":"","value":-6},{"type":"int","name":"GIT_EUSER","comments":"","value":-7},{"type":"int","name":"GIT_EBAREREPO","comments":"","value":-8},{"type":"int","name":"GIT_EORPHANEDHEAD","comments":"","value":-9},{"type":"int","name":"GIT_EUNMERGED","comments":"","value":-10},{"type":"int","name":"GIT_ENONFASTFORWARD","comments":"","value":-11},{"type":"int","name":"GIT_EINVALIDSPEC","comments":"","value":-12},{"type":"int","name":"GIT_EMERGECONFLICT","comments":"","value":-13},{"type":"int","name":"GIT_PASSTHROUGH","comments":"","value":-30},{"type":"int","name":"GIT_ITEROVER","comments":"","value":-31}],"used":{"returns":[],"needs":[]}}],["git_error_t",{"decl":["GITERR_NOMEMORY","GITERR_OS","GITERR_INVALID","GITERR_REFERENCE","GITERR_ZLIB","GITERR_REPOSITORY","GITERR_CONFIG","GITERR_REGEX","GITERR_ODB","GITERR_INDEX","GITERR_OBJECT","GITERR_NET","GITERR_TAG","GITERR_TREE","GITERR_INDEXER","GITERR_SSL","GITERR_SUBMODULE","GITERR_THREAD","GITERR_STASH","GITERR_CHECKOUT","GITERR_FETCHHEAD","GITERR_MERGE"],"type":"enum","file":"git2/errors.h","line":46,"lineto":69,"block":"GITERR_NOMEMORY\nGITERR_OS\nGITERR_INVALID\nGITERR_REFERENCE\nGITERR_ZLIB\nGITERR_REPOSITORY\nGITERR_CONFIG\nGITERR_REGEX\nGITERR_ODB\nGITERR_INDEX\nGITERR_OBJECT\nGITERR_NET\nGITERR_TAG\nGITERR_TREE\nGITERR_INDEXER\nGITERR_SSL\nGITERR_SUBMODULE\nGITERR_THREAD\nGITERR_STASH\nGITERR_CHECKOUT\nGITERR_FETCHHEAD\nGITERR_MERGE","tdef":"typedef","description":" Error classes ","comments":"","fields":[{"type":"int","name":"GITERR_NOMEMORY","comments":"","value":0},{"type":"int","name":"GITERR_OS","comments":"","value":1},{"type":"int","name":"GITERR_INVALID","comments":"","value":2},{"type":"int","name":"GITERR_REFERENCE","comments":"","value":3},{"type":"int","name":"GITERR_ZLIB","comments":"","value":4},{"type":"int","name":"GITERR_REPOSITORY","comments":"","value":5},{"type":"int","name":"GITERR_CONFIG","comments":"","value":6},{"type":"int","name":"GITERR_REGEX","comments":"","value":7},{"type":"int","name":"GITERR_ODB","comments":"","value":8},{"type":"int","name":"GITERR_INDEX","comments":"","value":9},{"type":"int","name":"GITERR_OBJECT","comments":"","value":10},{"type":"int","name":"GITERR_NET","comments":"","value":11},{"type":"int","name":"GITERR_TAG","comments":"","value":12},{"type":"int","name":"GITERR_TREE","comments":"","value":13},{"type":"int","name":"GITERR_INDEXER","comments":"","value":14},{"type":"int","name":"GITERR_SSL","comments":"","value":15},{"type":"int","name":"GITERR_SUBMODULE","comments":"","value":16},{"type":"int","name":"GITERR_THREAD","comments":"","value":17},{"type":"int","name":"GITERR_STASH","comments":"","value":18},{"type":"int","name":"GITERR_CHECKOUT","comments":"","value":19},{"type":"int","name":"GITERR_FETCHHEAD","comments":"","value":20},{"type":"int","name":"GITERR_MERGE","comments":"","value":21}],"used":{"returns":[],"needs":[]}}],["git_filemode_t",{"decl":["GIT_FILEMODE_NEW","GIT_FILEMODE_TREE","GIT_FILEMODE_BLOB","GIT_FILEMODE_BLOB_EXECUTABLE","GIT_FILEMODE_LINK","GIT_FILEMODE_COMMIT"],"type":"enum","file":"git2/types.h","line":196,"lineto":203,"block":"GIT_FILEMODE_NEW\nGIT_FILEMODE_TREE\nGIT_FILEMODE_BLOB\nGIT_FILEMODE_BLOB_EXECUTABLE\nGIT_FILEMODE_LINK\nGIT_FILEMODE_COMMIT","tdef":"typedef","description":" Valid modes for index and tree entries. ","comments":"","fields":[{"type":"int","name":"GIT_FILEMODE_NEW","comments":"","value":0},{"type":"int","name":"GIT_FILEMODE_TREE","comments":"","value":16384},{"type":"int","name":"GIT_FILEMODE_BLOB","comments":"","value":33188},{"type":"int","name":"GIT_FILEMODE_BLOB_EXECUTABLE","comments":"","value":33261},{"type":"int","name":"GIT_FILEMODE_LINK","comments":"","value":40960},{"type":"int","name":"GIT_FILEMODE_COMMIT","comments":"","value":57344}],"used":{"returns":["git_tree_entry_filemode"],"needs":["git_treebuilder_insert"]}}],["git_index",{"decl":"git_index","type":"struct","value":"git_index","file":"git2/types.h","line":132,"lineto":132,"tdef":"typedef","description":" Memory representation of an index file. ","comments":"","used":{"returns":["git_index_get_byindex","git_index_get_bypath"],"needs":["git_checkout_index","git_diff_index_to_workdir","git_diff_tree_to_index","git_index_add","git_index_add_all","git_index_add_bypath","git_index_caps","git_index_clear","git_index_conflict_add","git_index_conflict_cleanup","git_index_conflict_get","git_index_conflict_iterator_free","git_index_conflict_iterator_new","git_index_conflict_next","git_index_conflict_remove","git_index_entry_stage","git_index_entrycount","git_index_find","git_index_free","git_index_get_byindex","git_index_get_bypath","git_index_has_conflicts","git_index_new","git_index_open","git_index_owner","git_index_read","git_index_read_tree","git_index_remove","git_index_remove_all","git_index_remove_bypath","git_index_remove_directory","git_index_set_caps","git_index_update_all","git_index_write","git_index_write_tree","git_index_write_tree_to","git_indexer_stream_add","git_indexer_stream_finalize","git_indexer_stream_free","git_indexer_stream_hash","git_indexer_stream_new","git_repository_index"]}}],["git_index_add_option_t",{"decl":["GIT_INDEX_ADD_DEFAULT","GIT_INDEX_ADD_FORCE","GIT_INDEX_ADD_DISABLE_PATHSPEC_MATCH","GIT_INDEX_ADD_CHECK_PATHSPEC"],"type":"enum","file":"git2/index.h","line":134,"lineto":139,"block":"GIT_INDEX_ADD_DEFAULT\nGIT_INDEX_ADD_FORCE\nGIT_INDEX_ADD_DISABLE_PATHSPEC_MATCH\nGIT_INDEX_ADD_CHECK_PATHSPEC","tdef":"typedef","description":" Flags for APIs that add files matching pathspec ","comments":"","fields":[{"type":"int","name":"GIT_INDEX_ADD_DEFAULT","comments":"","value":0},{"type":"int","name":"GIT_INDEX_ADD_FORCE","comments":"","value":1},{"type":"int","name":"GIT_INDEX_ADD_DISABLE_PATHSPEC_MATCH","comments":"","value":2},{"type":"int","name":"GIT_INDEX_ADD_CHECK_PATHSPEC","comments":"","value":4}],"used":{"returns":[],"needs":[]}}],["git_index_conflict_iterator",{"decl":"git_index_conflict_iterator","type":"struct","value":"git_index_conflict_iterator","file":"git2/types.h","line":135,"lineto":135,"tdef":"typedef","description":" An interator for conflicts in the index. ","comments":"","used":{"returns":[],"needs":["git_index_conflict_iterator_free","git_index_conflict_iterator_new","git_index_conflict_next"]}}],["git_index_entry",{"decl":["git_index_time ctime","git_index_time mtime","unsigned int dev","unsigned int ino","unsigned int mode","unsigned int uid","unsigned int gid","git_off_t file_size","git_oid oid","unsigned short flags","unsigned short flags_extended","char * path"],"type":"struct","value":"git_index_entry","file":"git2/index.h","line":48,"lineto":65,"block":"git_index_time ctime\ngit_index_time mtime\nunsigned int dev\nunsigned int ino\nunsigned int mode\nunsigned int uid\nunsigned int gid\ngit_off_t file_size\ngit_oid oid\nunsigned short flags\nunsigned short flags_extended\nchar * path","tdef":"typedef","description":" In-memory representation of a file entry in the index.","comments":"<p>This is a public structure that represents a file entry in the index. The meaning of the fields corresponds to core Git&#39;s documentation (in &quot;Documentation/technical/index-format.txt&quot;).</p>\n\n<p>The <code>flags</code> field consists of a number of bit fields which can be accessed via the first set of <code>GIT_IDXENTRY_...</code> bitmasks below.  These flags are all read from and persisted to disk.</p>\n\n<p>The <code>flags_extended</code> field also has a number of bit fields which can be accessed via the later <code>GIT_IDXENTRY_...</code> bitmasks below.  Some of these flags are read from and written to disk, but some are set aside for in-memory only reference.</p>\n","fields":[{"type":"git_index_time","name":"ctime","comments":""},{"type":"git_index_time","name":"mtime","comments":""},{"type":"unsigned int","name":"dev","comments":""},{"type":"unsigned int","name":"ino","comments":""},{"type":"unsigned int","name":"mode","comments":""},{"type":"unsigned int","name":"uid","comments":""},{"type":"unsigned int","name":"gid","comments":""},{"type":"git_off_t","name":"file_size","comments":""},{"type":"git_oid","name":"oid","comments":""},{"type":"unsigned short","name":"flags","comments":""},{"type":"unsigned short","name":"flags_extended","comments":""},{"type":"char *","name":"path","comments":""}],"used":{"returns":["git_index_get_byindex","git_index_get_bypath"],"needs":["git_index_add","git_index_conflict_add","git_index_conflict_get","git_index_conflict_next","git_index_entry_stage"]}}],["git_index_time",{"decl":["git_time_t seconds","unsigned int nanoseconds"],"type":"struct","value":"git_index_time","file":"git2/index.h","line":26,"lineto":30,"block":"git_time_t seconds\nunsigned int nanoseconds","tdef":"typedef","description":" Time structure used in a git index entry ","comments":"","fields":[{"type":"git_time_t","name":"seconds","comments":""},{"type":"unsigned int","name":"nanoseconds","comments":""}],"used":{"returns":[],"needs":[]}}],["git_indexcap_t",{"decl":["GIT_INDEXCAP_IGNORE_CASE","GIT_INDEXCAP_NO_FILEMODE","GIT_INDEXCAP_NO_SYMLINKS","GIT_INDEXCAP_FROM_OWNER"],"type":"enum","file":"git2/index.h","line":122,"lineto":127,"block":"GIT_INDEXCAP_IGNORE_CASE\nGIT_INDEXCAP_NO_FILEMODE\nGIT_INDEXCAP_NO_SYMLINKS\nGIT_INDEXCAP_FROM_OWNER","tdef":"typedef","description":" Capabilities of system that affect index actions. ","comments":"","fields":[{"type":"int","name":"GIT_INDEXCAP_IGNORE_CASE","comments":"","value":1},{"type":"int","name":"GIT_INDEXCAP_NO_FILEMODE","comments":"","value":2},{"type":"int","name":"GIT_INDEXCAP_NO_SYMLINKS","comments":"","value":4},{"type":"unsigned int","name":"GIT_INDEXCAP_FROM_OWNER","comments":"","value":-1}],"used":{"returns":[],"needs":[]}}],["git_merge_automerge_flags",{"decl":["GIT_MERGE_AUTOMERGE_NORMAL","GIT_MERGE_AUTOMERGE_NONE","GIT_MERGE_AUTOMERGE_FAVOR_OURS","GIT_MERGE_AUTOMERGE_FAVOR_THEIRS"],"type":"enum","file":"git2/merge.h","line":37,"lineto":42,"block":"GIT_MERGE_AUTOMERGE_NORMAL\nGIT_MERGE_AUTOMERGE_NONE\nGIT_MERGE_AUTOMERGE_FAVOR_OURS\nGIT_MERGE_AUTOMERGE_FAVOR_THEIRS","tdef":"typedef","description":" Automerge options for `git_merge_trees_opts`.","comments":"","fields":[{"type":"int","name":"GIT_MERGE_AUTOMERGE_NORMAL","comments":"","value":0},{"type":"int","name":"GIT_MERGE_AUTOMERGE_NONE","comments":"","value":1},{"type":"int","name":"GIT_MERGE_AUTOMERGE_FAVOR_OURS","comments":"","value":2},{"type":"int","name":"GIT_MERGE_AUTOMERGE_FAVOR_THEIRS","comments":"","value":3}],"used":{"returns":[],"needs":[]}}],["git_merge_head",{"decl":"git_merge_head","type":"struct","value":"git_merge_head","file":"git2/types.h","line":175,"lineto":175,"tdef":"typedef","description":" Merge heads, the input to merge ","comments":"","used":{"returns":[],"needs":[]}}],["git_note",{"decl":"git_note","type":"struct","value":"git_note","file":"git2/types.h","line":150,"lineto":150,"tdef":"typedef","description":" Representation of a git note ","comments":"","used":{"returns":[],"needs":["git_note_foreach","git_note_free","git_note_iterator_free","git_note_iterator_new","git_note_message","git_note_next","git_note_oid","git_note_read"]}}],["git_note_iterator",{"decl":"git_note_iterator","type":"struct","value":"git_note_iterator","file":"git2/notes.h","line":35,"lineto":35,"tdef":"typedef","description":" note iterator","comments":"","used":{"returns":[],"needs":["git_note_iterator_free","git_note_iterator_new","git_note_next"]}}],["git_object",{"decl":"git_object","type":"struct","value":"git_object","file":"git2/types.h","line":108,"lineto":108,"tdef":"typedef","description":" Representation of a generic object in a repository ","comments":"","used":{"returns":[],"needs":["git_checkout_tree","git_object_dup","git_object_free","git_object_id","git_object_lookup","git_object_lookup_prefix","git_object_owner","git_object_peel","git_object_type","git_reference_peel","git_revparse_ext","git_revparse_single","git_tag_annotation_create","git_tag_create","git_tag_create_lightweight","git_tag_peel","git_tag_target","git_tree_entry_to_object"]}}],["git_odb",{"decl":"git_odb","type":"struct","value":"git_odb","file":"git2/types.h","line":81,"lineto":81,"tdef":"typedef","description":" An open object database handle. ","comments":"","used":{"returns":[],"needs":["git_odb_add_alternate","git_odb_add_backend","git_odb_add_disk_alternate","git_odb_exists","git_odb_foreach","git_odb_free","git_odb_get_backend","git_odb_new","git_odb_num_backends","git_odb_object_data","git_odb_object_free","git_odb_object_id","git_odb_object_size","git_odb_object_type","git_odb_open","git_odb_open_rstream","git_odb_open_wstream","git_odb_read","git_odb_read_header","git_odb_read_prefix","git_odb_refresh","git_odb_write","git_odb_write_pack","git_repository_odb","git_repository_wrap_odb"]}}],["git_odb_backend",{"decl":"git_odb_backend","type":"struct","value":"git_odb_backend","file":"git2/types.h","line":84,"lineto":84,"tdef":"typedef","description":" A custom backend in an ODB ","comments":"","used":{"returns":[],"needs":["git_odb_add_alternate","git_odb_add_backend","git_odb_get_backend"]}}],["git_odb_object",{"decl":"git_odb_object","type":"struct","value":"git_odb_object","file":"git2/types.h","line":87,"lineto":87,"tdef":"typedef","description":" An object read from the ODB ","comments":"","used":{"returns":[],"needs":["git_odb_object_data","git_odb_object_free","git_odb_object_id","git_odb_object_size","git_odb_object_type","git_odb_read","git_odb_read_prefix"]}}],["git_odb_stream",{"decl":"git_odb_stream","type":"struct","value":"git_odb_stream","file":"git2/types.h","line":90,"lineto":90,"tdef":"typedef","description":" A stream to read/write from the ODB ","comments":"","used":{"returns":[],"needs":["git_odb_open_rstream","git_odb_open_wstream"]}}],["git_odb_stream_t",{"decl":["GIT_STREAM_RDONLY","GIT_STREAM_WRONLY","GIT_STREAM_RW"],"type":"enum","file":"git2/odb_backend.h","line":62,"lineto":66,"block":"GIT_STREAM_RDONLY\nGIT_STREAM_WRONLY\nGIT_STREAM_RW","tdef":"typedef","description":" Streaming mode ","comments":"","fields":[{"type":"int","name":"GIT_STREAM_RDONLY","comments":"","value":2},{"type":"int","name":"GIT_STREAM_WRONLY","comments":"","value":4},{"type":"int","name":"GIT_STREAM_RW","comments":"","value":6}],"used":{"returns":[],"needs":[]}}],["git_odb_writepack",{"decl":"git_odb_writepack","type":"struct","value":"git_odb_writepack","file":"git2/types.h","line":93,"lineto":93,"tdef":"typedef","description":" A stream to write a packfile to the ODB ","comments":"","used":{"returns":[],"needs":["git_odb_write_pack"]}}],["git_oid",{"decl":["unsigned char [20] id"],"type":"struct","value":"git_oid","file":"git2/oid.h","line":33,"lineto":36,"block":"unsigned char [20] id","tdef":"typedef","description":" Unique identity of any object (commit, tree, blob, tag). ","comments":"","fields":[{"type":"unsigned char [20]","name":"id","comments":" raw binary formatted id "}],"used":{"returns":["git_blob_id","git_commit_id","git_commit_parent_id","git_commit_tree_id","git_indexer_stream_hash","git_note_oid","git_object_id","git_odb_object_id","git_oid_shorten_new","git_reference_target","git_reference_target_peel","git_reflog_entry_id_new","git_reflog_entry_id_old","git_submodule_head_id","git_submodule_index_id","git_submodule_wd_id","git_tag_id","git_tag_target_id","git_tree_entry_id","git_tree_id"],"needs":["git_blob_create_frombuffer","git_blob_create_fromchunks","git_blob_create_fromdisk","git_blob_create_fromworkdir","git_blob_lookup","git_blob_lookup_prefix","git_commit_create","git_commit_create_v","git_commit_lookup","git_commit_lookup_prefix","git_graph_ahead_behind","git_index_write_tree","git_index_write_tree_to","git_note_create","git_note_foreach_cb","git_note_next","git_note_read","git_note_remove","git_object_lookup","git_object_lookup_prefix","git_odb_exists","git_odb_foreach_cb","git_odb_hash","git_odb_hashfile","git_odb_open_rstream","git_odb_read","git_odb_read_header","git_odb_read_prefix","git_odb_write","git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_equal","git_oid_fmt","git_oid_fromraw","git_oid_fromstr","git_oid_fromstrn","git_oid_fromstrp","git_oid_iszero","git_oid_ncmp","git_oid_nfmt","git_oid_pathfmt","git_oid_shorten_add","git_oid_shorten_free","git_oid_strcmp","git_oid_streq","git_oid_tostr","git_packbuilder_insert","git_packbuilder_insert_commit","git_packbuilder_insert_tree","git_reference_create","git_reference_name_to_id","git_reference_set_target","git_reflog_append","git_repository_hashfile","git_repository_set_head_detached","git_revwalk_hide","git_revwalk_next","git_revwalk_push","git_tag_annotation_create","git_tag_create","git_tag_create_frombuffer","git_tag_create_lightweight","git_tag_lookup","git_tag_lookup_prefix","git_tree_entry_byoid","git_tree_lookup","git_tree_lookup_prefix","git_treebuilder_insert","git_treebuilder_write"]}}],["git_oid_shorten",{"decl":"git_oid_shorten","type":"struct","value":"git_oid_shorten","file":"git2/oid.h","line":216,"lineto":216,"tdef":"typedef","description":" OID Shortener object","comments":"","used":{"returns":["git_oid_shorten_new"],"needs":["git_oid_shorten_add","git_oid_shorten_free"]}}],["git_otype",{"decl":["GIT_OBJ_ANY","GIT_OBJ_BAD","GIT_OBJ__EXT1","GIT_OBJ_COMMIT","GIT_OBJ_TREE","GIT_OBJ_BLOB","GIT_OBJ_TAG","GIT_OBJ__EXT2","GIT_OBJ_OFS_DELTA","GIT_OBJ_REF_DELTA"],"type":"enum","file":"git2/types.h","line":67,"lineto":78,"block":"GIT_OBJ_ANY\nGIT_OBJ_BAD\nGIT_OBJ__EXT1\nGIT_OBJ_COMMIT\nGIT_OBJ_TREE\nGIT_OBJ_BLOB\nGIT_OBJ_TAG\nGIT_OBJ__EXT2\nGIT_OBJ_OFS_DELTA\nGIT_OBJ_REF_DELTA","tdef":"typedef","description":" Basic type (loose or packed) of any Git object. ","comments":"","fields":[{"type":"int","name":"GIT_OBJ_ANY","comments":"<p>Object can be any of the following </p>\n","value":-2},{"type":"int","name":"GIT_OBJ_BAD","comments":"<p>Object is invalid. </p>\n","value":-1},{"type":"int","name":"GIT_OBJ__EXT1","comments":"<p>Reserved for future use. </p>\n","value":0},{"type":"int","name":"GIT_OBJ_COMMIT","comments":"<p>A commit object. </p>\n","value":1},{"type":"int","name":"GIT_OBJ_TREE","comments":"<p>A tree (directory listing) object. </p>\n","value":2},{"type":"int","name":"GIT_OBJ_BLOB","comments":"<p>A file revision object. </p>\n","value":3},{"type":"int","name":"GIT_OBJ_TAG","comments":"<p>An annotated tag object. </p>\n","value":4},{"type":"int","name":"GIT_OBJ__EXT2","comments":"<p>Reserved for future use. </p>\n","value":5},{"type":"int","name":"GIT_OBJ_OFS_DELTA","comments":"<p>A delta, base is given by an offset. </p>\n","value":6},{"type":"int","name":"GIT_OBJ_REF_DELTA","comments":"<p>A delta, base is given by object id. </p>\n","value":7}],"used":{"returns":["git_object_string2type","git_object_type","git_odb_object_type","git_tag_target_type","git_tree_entry_type"],"needs":["git_object__size","git_object_lookup","git_object_lookup_prefix","git_object_peel","git_object_type2string","git_object_typeisloose","git_odb_hash","git_odb_hashfile","git_odb_open_wstream","git_odb_read_header","git_odb_write","git_reference_peel","git_repository_hashfile"]}}],["git_packbuilder",{"decl":"git_packbuilder","type":"struct","value":"git_packbuilder","file":"git2/types.h","line":153,"lineto":153,"tdef":"typedef","description":" Representation of a git packbuilder ","comments":"","used":{"returns":[],"needs":["git_packbuilder_foreach","git_packbuilder_free","git_packbuilder_insert","git_packbuilder_insert_commit","git_packbuilder_insert_tree","git_packbuilder_new","git_packbuilder_object_count","git_packbuilder_set_threads","git_packbuilder_write","git_packbuilder_written"]}}],["git_push_options",{"decl":["unsigned int version","unsigned int pb_parallelism"],"type":"struct","value":"git_push_options","file":"git2/push.h","line":24,"lineto":36,"block":"unsigned int version\nunsigned int pb_parallelism","tdef":"typedef","description":" Controls the behavior of a git_push object.","comments":"","fields":[{"type":"unsigned int","name":"version","comments":""},{"type":"unsigned int","name":"pb_parallelism","comments":" If the transport being used to push to the remote requires the creation\n of a pack file, this controls the number of worker threads used by\n the packbuilder when creating that pack file to be sent to the remote.\n\n If set to 0, the packbuilder will auto-detect the number of threads\n to create. The default value is 1."}],"used":{"returns":[],"needs":[]}}],["git_ref_t",{"decl":["GIT_REF_INVALID","GIT_REF_OID","GIT_REF_SYMBOLIC","GIT_REF_LISTALL"],"type":"enum","file":"git2/types.h","line":182,"lineto":187,"block":"GIT_REF_INVALID\nGIT_REF_OID\nGIT_REF_SYMBOLIC\nGIT_REF_LISTALL","tdef":"typedef","description":" Basic type of any Git reference. ","comments":"","fields":[{"type":"int","name":"GIT_REF_INVALID","comments":"","value":0},{"type":"int","name":"GIT_REF_OID","comments":"<p>Invalid reference </p>\n","value":1},{"type":"int","name":"GIT_REF_SYMBOLIC","comments":"<p>A reference which points at an object id </p>\n","value":2},{"type":"int","name":"GIT_REF_LISTALL","comments":"<p>A reference which points at another reference </p>\n","value":3}],"used":{"returns":["git_reference_type"],"needs":[]}}],["git_refdb",{"decl":"git_refdb","type":"struct","value":"git_refdb","file":"git2/types.h","line":96,"lineto":96,"tdef":"typedef","description":" An open refs database handle. ","comments":"","used":{"returns":[],"needs":["git_refdb_compress","git_refdb_free","git_refdb_new","git_refdb_open","git_repository_refdb"]}}],["git_refdb_backend",{"decl":"git_refdb_backend","type":"struct","value":"git_refdb_backend","file":"git2/types.h","line":99,"lineto":99,"block":"unsigned int version\nint (*)(int *, struct git_refdb_backend *, const char *) exists\nint (*)(int **, struct git_refdb_backend *, const char *) lookup\nint (*)(int **, struct git_refdb_backend *, const char *) iterator\nint (*)(struct git_refdb_backend *, const int *, int) write\nint (*)(int **, struct git_refdb_backend *, const char *, const char *, int) rename\nint (*)(struct git_refdb_backend *, const char *) delete\nint (*)(struct git_refdb_backend *) compress\nvoid (*)(struct git_refdb_backend *) free","tdef":"typedef","description":" A custom backend for refs ","comments":"","fields":[{"type":"unsigned int","name":"version","comments":""},{"type":"int (*)(int *, struct git_refdb_backend *, const char *)","name":"exists","comments":" Queries the refdb backend to determine if the given ref_name\n exists.  A refdb implementation must provide this function."},{"type":"int (*)(int **, struct git_refdb_backend *, const char *)","name":"lookup","comments":" Queries the refdb backend for a given reference.  A refdb\n implementation must provide this function."},{"type":"int (*)(int **, struct git_refdb_backend *, const char *)","name":"iterator","comments":" Allocate an iterator object for the backend.\n\n A refdb implementation must provide this function."},{"type":"int (*)(struct git_refdb_backend *, const int *, int)","name":"write","comments":""},{"type":"int (*)(int **, struct git_refdb_backend *, const char *, const char *, int)","name":"rename","comments":""},{"type":"int (*)(struct git_refdb_backend *, const char *)","name":"delete","comments":" Deletes the given reference from the refdb.  A refdb implementation\n must provide this function."},{"type":"int (*)(struct git_refdb_backend *)","name":"compress","comments":" Suggests that the given refdb compress or optimize its references.\n This mechanism is implementation specific.  (For on-disk reference\n databases, this may pack all loose references.)    A refdb\n implementation may provide this function; if it is not provided,\n nothing will be done."},{"type":"void (*)(struct git_refdb_backend *)","name":"free","comments":" Frees any resources held by the refdb.  A refdb implementation may\n provide this function; if it is not provided, nothing will be done."}],"used":{"returns":[],"needs":[]}}],["git_reference",{"decl":"git_reference","type":"struct","value":"git_reference","file":"git2/types.h","line":169,"lineto":169,"tdef":"typedef","description":" In-memory representation of a reference. ","comments":"","used":{"returns":[],"needs":["git_branch_create","git_branch_delete","git_branch_is_head","git_branch_lookup","git_branch_move","git_branch_name","git_branch_set_upstream","git_branch_upstream","git_reference_cmp","git_reference_create","git_reference_delete","git_reference_dwim","git_reference_foreach","git_reference_foreach_glob","git_reference_free","git_reference_has_log","git_reference_is_branch","git_reference_is_remote","git_reference_iterator_free","git_reference_iterator_glob_new","git_reference_iterator_new","git_reference_lookup","git_reference_name","git_reference_next","git_reference_owner","git_reference_peel","git_reference_rename","git_reference_resolve","git_reference_set_target","git_reference_shorthand","git_reference_symbolic_create","git_reference_symbolic_set_target","git_reference_symbolic_target","git_reference_target","git_reference_target_peel","git_reference_type","git_reflog_delete","git_reflog_read","git_reflog_rename","git_repository_head","git_revparse_ext"]}}],["git_reference_iterator",{"decl":"git_reference_iterator","type":"struct","value":"git_reference_iterator","file":"git2/types.h","line":172,"lineto":172,"tdef":"typedef","description":" Iterator for references ","comments":"","used":{"returns":[],"needs":["git_reference_iterator_free","git_reference_iterator_glob_new","git_reference_iterator_new","git_reference_next"]}}],["git_reflog",{"decl":"git_reflog","type":"struct","value":"git_reflog","file":"git2/types.h","line":147,"lineto":147,"tdef":"typedef","description":" Representation of a reference log ","comments":"","used":{"returns":["git_reflog_entry_byindex"],"needs":["git_reflog_append","git_reflog_drop","git_reflog_entry_byindex","git_reflog_entry_committer","git_reflog_entry_id_new","git_reflog_entry_id_old","git_reflog_entry_message","git_reflog_entrycount","git_reflog_free","git_reflog_read","git_reflog_write"]}}],["git_reflog_entry",{"decl":"git_reflog_entry","type":"struct","value":"git_reflog_entry","file":"git2/types.h","line":144,"lineto":144,"tdef":"typedef","description":" Representation of a reference log entry ","comments":"","used":{"returns":["git_reflog_entry_byindex"],"needs":["git_reflog_entry_committer","git_reflog_entry_id_new","git_reflog_entry_id_old","git_reflog_entry_message"]}}],["git_remote_callbacks",{"decl":["unsigned int version","void (*)(const char *, int, void *) progress","int (*)(git_remote_completion_type, void *) completion","int (*)(const char *, const git_oid *, const git_oid *, void *) update_tips","void * payload"],"type":"struct","value":"git_remote_callbacks","file":"git2/remote.h","line":400,"lineto":406,"block":"unsigned int version\nvoid (*)(const char *, int, void *) progress\nint (*)(git_remote_completion_type, void *) completion\nint (*)(const char *, const git_oid *, const git_oid *, void *) update_tips\nvoid * payload","tdef":null,"description":" The callback settings structure","comments":"<p>Set the calbacks to be called by the remote.</p>\n","fields":[{"type":"unsigned int","name":"version","comments":""},{"type":"void (*)(const char *, int, void *)","name":"progress","comments":""},{"type":"int (*)(git_remote_completion_type, void *)","name":"completion","comments":""},{"type":"int (*)(const char *, const git_oid *, const git_oid *, void *)","name":"update_tips","comments":""},{"type":"void *","name":"payload","comments":""}],"used":{"returns":[],"needs":["git_remote_set_callbacks"]}}],["git_remote_completion_type",{"decl":["GIT_REMOTE_COMPLETION_DOWNLOAD","GIT_REMOTE_COMPLETION_INDEXING","GIT_REMOTE_COMPLETION_ERROR"],"type":"enum","file":"git2/remote.h","line":389,"lineto":393,"block":"GIT_REMOTE_COMPLETION_DOWNLOAD\nGIT_REMOTE_COMPLETION_INDEXING\nGIT_REMOTE_COMPLETION_ERROR\nGIT_REMOTE_COMPLETION_DOWNLOAD\nGIT_REMOTE_COMPLETION_INDEXING\nGIT_REMOTE_COMPLETION_ERROR","tdef":"typedef","description":" Argument to the completion callback which tells it which operation\n finished.","comments":"","fields":[{"type":"int","name":"GIT_REMOTE_COMPLETION_DOWNLOAD","comments":"","value":0},{"type":"int","name":"GIT_REMOTE_COMPLETION_INDEXING","comments":"","value":1},{"type":"int","name":"GIT_REMOTE_COMPLETION_ERROR","comments":"","value":2}],"used":{"returns":[],"needs":[]}}],["git_remote_head",{"decl":["int local","git_oid oid","git_oid loid","char * name"],"type":"struct","value":"git_remote_head","file":"git2/net.h","line":39,"lineto":44,"block":"int local\ngit_oid oid\ngit_oid loid\nchar * name","tdef":null,"description":" Remote head description, given out on `ls` calls.","comments":"","fields":[{"type":"int","name":"local","comments":""},{"type":"git_oid","name":"oid","comments":""},{"type":"git_oid","name":"loid","comments":""},{"type":"char *","name":"name","comments":""}],"used":{"returns":[],"needs":["git_headlist_cb"]}}],["git_repository",{"decl":"git_repository","type":"struct","value":"git_repository","file":"git2/types.h","line":105,"lineto":105,"tdef":"typedef","description":" Representation of an existing git repository,\n including all its object contents","comments":"","used":{"returns":["git_blob_owner","git_commit_owner","git_index_owner","git_object_owner","git_reference_owner","git_revwalk_repository","git_submodule_owner","git_tag_owner","git_tree_owner"],"needs":["git_attr_add_macro","git_attr_cache_flush","git_attr_foreach","git_attr_get","git_attr_get_many","git_blob_create_frombuffer","git_blob_create_fromchunks","git_blob_create_fromdisk","git_blob_create_fromworkdir","git_blob_lookup","git_blob_lookup_prefix","git_branch_create","git_branch_foreach","git_branch_lookup","git_branch_remote_name","git_branch_upstream_name","git_checkout_head","git_checkout_index","git_checkout_tree","git_clone","git_commit_create","git_commit_create_v","git_commit_lookup","git_commit_lookup_prefix","git_diff_index_to_workdir","git_diff_tree_to_index","git_diff_tree_to_tree","git_diff_tree_to_workdir","git_graph_ahead_behind","git_ignore_add_rule","git_ignore_clear_internal_rules","git_ignore_path_is_ignored","git_index_write_tree_to","git_note_create","git_note_default_ref","git_note_foreach","git_note_iterator_new","git_note_read","git_note_remove","git_object_lookup","git_object_lookup_prefix","git_packbuilder_new","git_refdb_new","git_refdb_open","git_reference_create","git_reference_dwim","git_reference_foreach","git_reference_foreach_glob","git_reference_iterator_glob_new","git_reference_iterator_new","git_reference_list","git_reference_lookup","git_reference_name_to_id","git_reference_symbolic_create","git_remote_create","git_remote_create_inmemory","git_remote_list","git_remote_load","git_repository_config","git_repository_detach_head","git_repository_fetchhead_foreach","git_repository_free","git_repository_get_namespace","git_repository_hashfile","git_repository_head","git_repository_head_detached","git_repository_head_orphan","git_repository_index","git_repository_init","git_repository_init_ext","git_repository_is_bare","git_repository_is_empty","git_repository_is_shallow","git_repository_merge_cleanup","git_repository_mergehead_foreach","git_repository_message","git_repository_message_remove","git_repository_odb","git_repository_open","git_repository_open_bare","git_repository_open_ext","git_repository_path","git_repository_refdb","git_repository_set_head","git_repository_set_head_detached","git_repository_set_namespace","git_repository_set_workdir","git_repository_state","git_repository_workdir","git_repository_wrap_odb","git_revparse","git_revparse_ext","git_revparse_single","git_revwalk_new","git_stash_drop","git_stash_foreach","git_status_file","git_status_foreach","git_status_foreach_ext","git_status_list_new","git_status_should_ignore","git_submodule_add_setup","git_submodule_foreach","git_submodule_lookup","git_submodule_open","git_submodule_reload_all","git_tag_annotation_create","git_tag_create","git_tag_create_frombuffer","git_tag_create_lightweight","git_tag_delete","git_tag_foreach","git_tag_list","git_tag_list_match","git_tag_lookup","git_tag_lookup_prefix","git_tree_entry_to_object","git_tree_lookup","git_tree_lookup_prefix","git_treebuilder_write"]}}],["git_repository_init_flag_t",{"decl":["GIT_REPOSITORY_INIT_BARE","GIT_REPOSITORY_INIT_NO_REINIT","GIT_REPOSITORY_INIT_NO_DOTGIT_DIR","GIT_REPOSITORY_INIT_MKDIR","GIT_REPOSITORY_INIT_MKPATH","GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE"],"type":"enum","file":"git2/repository.h","line":198,"lineto":205,"block":"GIT_REPOSITORY_INIT_BARE\nGIT_REPOSITORY_INIT_NO_REINIT\nGIT_REPOSITORY_INIT_NO_DOTGIT_DIR\nGIT_REPOSITORY_INIT_MKDIR\nGIT_REPOSITORY_INIT_MKPATH\nGIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE","tdef":"typedef","description":" Option flags for `git_repository_init_ext`.","comments":"<p>These flags configure extra behaviors to <code>git_repository_init_ext</code>. In every case, the default behavior is the zero value (i.e. flag is not set).  Just OR the flag values together for the <code>flags</code> parameter when initializing a new repo.  Details of individual values are:</p>\n\n<ul>\n<li>BARE   - Create a bare repository with no working directory. * NO_REINIT - Return an EEXISTS error if the repo_path appears to        already be an git repository. * NO_DOTGIT_DIR - Normally a &quot;/.git/&quot; will be appended to the repo        path for non-bare repos (if it is not already there), but        passing this flag prevents that behavior. * MKDIR  - Make the repo_path (and workdir_path) as needed.  Init is        always willing to create the &quot;.git&quot; directory even without this        flag.  This flag tells init to create the trailing component of        the repo and workdir paths as needed. * MKPATH - Recursively make all components of the repo and workdir        paths as necessary. * EXTERNAL_TEMPLATE - libgit2 normally uses internal templates to        initialize a new repo.  This flags enables external templates,        looking the &quot;template_path&quot; from the options if set, or the        <code>init.templatedir</code> global config if not, or falling back on        &quot;/usr/share/git-core/templates&quot; if it exists.</li>\n</ul>\n","fields":[{"type":"int","name":"GIT_REPOSITORY_INIT_BARE","comments":"","value":1},{"type":"int","name":"GIT_REPOSITORY_INIT_NO_REINIT","comments":"","value":2},{"type":"int","name":"GIT_REPOSITORY_INIT_NO_DOTGIT_DIR","comments":"","value":4},{"type":"int","name":"GIT_REPOSITORY_INIT_MKDIR","comments":"","value":8},{"type":"int","name":"GIT_REPOSITORY_INIT_MKPATH","comments":"","value":16},{"type":"int","name":"GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE","comments":"","value":32}],"used":{"returns":[],"needs":[]}}],["git_repository_init_mode_t",{"decl":["GIT_REPOSITORY_INIT_SHARED_UMASK","GIT_REPOSITORY_INIT_SHARED_GROUP","GIT_REPOSITORY_INIT_SHARED_ALL"],"type":"enum","file":"git2/repository.h","line":220,"lineto":224,"block":"GIT_REPOSITORY_INIT_SHARED_UMASK\nGIT_REPOSITORY_INIT_SHARED_GROUP\nGIT_REPOSITORY_INIT_SHARED_ALL","tdef":"typedef","description":" Mode options for `git_repository_init_ext`.","comments":"<p>Set the mode field of the <code>git_repository_init_options</code> structure either to the custom mode that you would like, or to one of the following modes:</p>\n\n<ul>\n<li>SHARED_UMASK - Use permissions configured by umask - the default. * SHARED_GROUP - Use &quot;--shared=group&quot; behavior, chmod&#39;ing the new repo        to be group writable and &quot;g+sx&quot; for sticky group assignment. * SHARED_ALL - Use &quot;--shared=all&quot; behavior, adding world readability. * Anything else - Set to custom value.</li>\n</ul>\n","fields":[{"type":"int","name":"GIT_REPOSITORY_INIT_SHARED_UMASK","comments":"","value":0},{"type":"int","name":"GIT_REPOSITORY_INIT_SHARED_GROUP","comments":"","value":1533},{"type":"int","name":"GIT_REPOSITORY_INIT_SHARED_ALL","comments":"","value":1535}],"used":{"returns":[],"needs":[]}}],["git_repository_init_options",{"decl":["unsigned int version","uint32_t flags","uint32_t mode","const char * workdir_path","const char * description","const char * template_path","const char * initial_head","const char * origin_url"],"type":"struct","value":"git_repository_init_options","file":"git2/repository.h","line":254,"lineto":263,"block":"unsigned int version\nuint32_t flags\nuint32_t mode\nconst char * workdir_path\nconst char * description\nconst char * template_path\nconst char * initial_head\nconst char * origin_url","tdef":"typedef","description":" Extended options structure for `git_repository_init_ext`.","comments":"<p>This contains extra options for <code>git_repository_init_ext</code> that enable additional initialization features.  The fields are:</p>\n\n<ul>\n<li>flags - Combination of GIT_REPOSITORY_INIT flags above. * mode  - Set to one of the standard GIT_REPOSITORY_INIT_SHARED_...        constants above, or to a custom value that you would like. * workdir_path - The path to the working dir or NULL for default (i.e.        repo_path parent on non-bare repos).  IF THIS IS RELATIVE PATH,        IT WILL BE EVALUATED RELATIVE TO THE REPO_PATH.  If this is not        the &quot;natural&quot; working directory, a .git gitlink file will be        created here linking to the repo_path. * description - If set, this will be used to initialize the &quot;description&quot;        file in the repository, instead of using the template content. * template_path - When GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE is set,        this contains the path to use for the template directory.  If        this is NULL, the config or default directory options will be        used instead. * initial_head - The name of the head to point HEAD at.  If NULL, then        this will be treated as &quot;master&quot; and the HEAD ref will be set        to &quot;refs/heads/master&quot;.  If this begins with &quot;refs/&quot; it will be        used verbatim; otherwise &quot;refs/heads/&quot; will be prefixed. * origin_url - If this is non-NULL, then after the rest of the        repository initialization is completed, an &quot;origin&quot; remote        will be added pointing to this URL.</li>\n</ul>\n","fields":[{"type":"unsigned int","name":"version","comments":""},{"type":"uint32_t","name":"flags","comments":""},{"type":"uint32_t","name":"mode","comments":""},{"type":"const char *","name":"workdir_path","comments":""},{"type":"const char *","name":"description","comments":""},{"type":"const char *","name":"template_path","comments":""},{"type":"const char *","name":"initial_head","comments":""},{"type":"const char *","name":"origin_url","comments":""}],"used":{"returns":[],"needs":["git_repository_init_ext"]}}],["git_repository_open_flag_t",{"decl":["GIT_REPOSITORY_OPEN_NO_SEARCH","GIT_REPOSITORY_OPEN_CROSS_FS"],"type":"enum","file":"git2/repository.h","line":98,"lineto":101,"block":"GIT_REPOSITORY_OPEN_NO_SEARCH\nGIT_REPOSITORY_OPEN_CROSS_FS","tdef":"typedef","description":" Option flags for `git_repository_open_ext`.","comments":"<ul>\n<li>GIT_REPOSITORY_OPEN_NO_SEARCH - Only open the repository if it can be   immediately found in the start_path.  Do not walk up from the   start_path looking at parent directories. * GIT_REPOSITORY_OPEN_CROSS_FS - Unless this flag is set, open will not   continue searching across filesystem boundaries (i.e. when <code>st_dev</code>   changes from the <code>stat</code> system call).  (E.g. Searching in a user&#39;s home   directory &quot;/home/user/source/&quot; will not return &quot;/.git/&quot; as the found   repo if &quot;/&quot; is a different filesystem than &quot;/home&quot;.)</li>\n</ul>\n","fields":[{"type":"int","name":"GIT_REPOSITORY_OPEN_NO_SEARCH","comments":"","value":1},{"type":"int","name":"GIT_REPOSITORY_OPEN_CROSS_FS","comments":"","value":2}],"used":{"returns":[],"needs":[]}}],["git_revparse_mode_t",{"decl":["GIT_REVPARSE_SINGLE","GIT_REVPARSE_RANGE","GIT_REVPARSE_MERGE_BASE"],"type":"enum","file":"git2/revparse.h","line":62,"lineto":69,"block":"GIT_REVPARSE_SINGLE\nGIT_REVPARSE_RANGE\nGIT_REVPARSE_MERGE_BASE","tdef":"typedef","description":" Revparse flags.  These indicate the intended behavior of the spec passed to\n git_revparse.","comments":"","fields":[{"type":"int","name":"GIT_REVPARSE_SINGLE","comments":"<p>The spec targeted a single object. </p>\n","value":1},{"type":"int","name":"GIT_REVPARSE_RANGE","comments":"<p>The spec targeted a range of commits. </p>\n","value":2},{"type":"int","name":"GIT_REVPARSE_MERGE_BASE","comments":"<p>The spec used the &#39;...&#39; operator, which invokes special semantics. </p>\n","value":4}],"used":{"returns":[],"needs":[]}}],["git_revspec",{"decl":["git_object * from","git_object * to","unsigned int flags"],"type":"struct","value":"git_revspec","file":"git2/revparse.h","line":74,"lineto":81,"block":"git_object * from\ngit_object * to\nunsigned int flags","tdef":"typedef","description":" Git Revision Spec: output of a `git_revparse` operation","comments":"","fields":[{"type":"git_object *","name":"from","comments":" The left element of the revspec; must be freed by the user "},{"type":"git_object *","name":"to","comments":" The right element of the revspec; must be freed by the user "},{"type":"unsigned int","name":"flags","comments":" The intent of the revspec "}],"used":{"returns":[],"needs":["git_revparse"]}}],["git_revwalk",{"decl":"git_revwalk","type":"struct","value":"git_revwalk","file":"git2/types.h","line":111,"lineto":111,"tdef":"typedef","description":" Representation of an in-progress walk through the commits in a repo ","comments":"","used":{"returns":[],"needs":["git_revwalk_free","git_revwalk_hide","git_revwalk_hide_glob","git_revwalk_hide_head","git_revwalk_hide_ref","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_push_glob","git_revwalk_push_head","git_revwalk_push_range","git_revwalk_push_ref","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]}}],["git_signature",{"decl":["char * name","char * email","git_time when"],"type":"struct","value":"git_signature","file":"git2/types.h","line":162,"lineto":166,"block":"char * name\nchar * email\ngit_time when","tdef":"typedef","description":" An action signature (e.g. for committers, taggers, etc) ","comments":"","fields":[{"type":"char *","name":"name","comments":""},{"type":"char *","name":"email","comments":" full name of the author "},{"type":"git_time","name":"when","comments":" email of the author "}],"used":{"returns":["git_commit_author","git_commit_committer","git_reflog_entry_committer","git_signature_dup","git_tag_tagger"],"needs":["git_commit_create","git_commit_create_v","git_note_create","git_note_remove","git_reflog_append","git_signature_dup","git_signature_free","git_signature_new","git_signature_now","git_tag_annotation_create","git_tag_create"]}}],["git_stash_flags",{"decl":["GIT_STASH_DEFAULT","GIT_STASH_KEEP_INDEX","GIT_STASH_INCLUDE_UNTRACKED","GIT_STASH_INCLUDE_IGNORED"],"type":"enum","file":"git2/stash.h","line":21,"lineto":38,"block":"GIT_STASH_DEFAULT\nGIT_STASH_KEEP_INDEX\nGIT_STASH_INCLUDE_UNTRACKED\nGIT_STASH_INCLUDE_IGNORED","tdef":"typedef","description":" \n\n git2/stash.h\n ","comments":"<p>@{</p>\n","fields":[{"type":"int","name":"GIT_STASH_DEFAULT","comments":"","value":0},{"type":"int","name":"GIT_STASH_KEEP_INDEX","comments":"","value":1},{"type":"int","name":"GIT_STASH_INCLUDE_UNTRACKED","comments":"","value":2},{"type":"int","name":"GIT_STASH_INCLUDE_IGNORED","comments":"","value":4}],"used":{"returns":[],"needs":[]}}],["git_status_list",{"decl":"git_status_list","type":"struct","value":"git_status_list","file":"git2/types.h","line":178,"lineto":178,"tdef":"typedef","description":" Representation of a status collection ","comments":"","used":{"returns":[],"needs":["git_status_byindex","git_status_list_entrycount","git_status_list_free","git_status_list_new"]}}],["git_status_opt_t",{"decl":["GIT_STATUS_OPT_INCLUDE_UNTRACKED","GIT_STATUS_OPT_INCLUDE_IGNORED","GIT_STATUS_OPT_INCLUDE_UNMODIFIED","GIT_STATUS_OPT_EXCLUDE_SUBMODULES","GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS","GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH","GIT_STATUS_OPT_RECURSE_IGNORED_DIRS","GIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX","GIT_STATUS_OPT_RENAMES_INDEX_TO_WORKDIR","GIT_STATUS_OPT_SORT_CASE_SENSITIVELY","GIT_STATUS_OPT_SORT_CASE_INSENSITIVELY"],"type":"enum","file":"git2/status.h","line":126,"lineto":138,"block":"GIT_STATUS_OPT_INCLUDE_UNTRACKED\nGIT_STATUS_OPT_INCLUDE_IGNORED\nGIT_STATUS_OPT_INCLUDE_UNMODIFIED\nGIT_STATUS_OPT_EXCLUDE_SUBMODULES\nGIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS\nGIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH\nGIT_STATUS_OPT_RECURSE_IGNORED_DIRS\nGIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX\nGIT_STATUS_OPT_RENAMES_INDEX_TO_WORKDIR\nGIT_STATUS_OPT_SORT_CASE_SENSITIVELY\nGIT_STATUS_OPT_SORT_CASE_INSENSITIVELY","tdef":"typedef","description":" Flags to control status callbacks","comments":"<ul>\n<li>GIT_STATUS_OPT_INCLUDE_UNTRACKED says that callbacks should be made   on untracked files.  These will only be made if the workdir files are   included in the status &quot;show&quot; option. - GIT_STATUS_OPT_INCLUDE_IGNORED says that ignored files get callbacks.   Again, these callbacks will only be made if the workdir files are   included in the status &quot;show&quot; option. - GIT_STATUS_OPT_INCLUDE_UNMODIFIED indicates that callback should be   made even on unmodified files. - GIT_STATUS_OPT_EXCLUDE_SUBMODULES indicates that submodules should be   skipped.  This only applies if there are no pending typechanges to   the submodule (either from or to another type). - GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS indicates that all files in   untracked directories should be included.  Normally if an entire   directory is new, then just the top-level directory is included (with   a trailing slash on the entry name).  This flag says to include all   of the individual files in the directory instead. - GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH indicates that the given path   should be treated as a literal path, and not as a pathspec pattern. - GIT_STATUS_OPT_RECURSE_IGNORED_DIRS indicates that the contents of   ignored directories should be included in the status.  This is like   doing <code>git ls-files -o -i --exclude-standard</code> with core git. - GIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX indicates that rename detection   should be processed between the head and the index and enables   the GIT_STATUS_INDEX_RENAMED as a possible status flag. - GIT_STATUS_OPT_RENAMES_INDEX_TO_WORKDIR indicates tha rename   detection should be run between the index and the working directory   and enabled GIT_STATUS_WT_RENAMED as a possible status flag. - GIT_STATUS_OPT_SORT_CASE_SENSITIVELY overrides the native case   sensitivity for the file system and forces the output to be in   case-sensitive order - GIT_STATUS_OPT_SORT_CASE_INSENSITIVELY overrides the native case   sensitivity for the file system and forces the output to be in   case-insensitive order</li>\n</ul>\n\n<p>Calling <code>git_status_foreach()</code> is like calling the extended version with: GIT_STATUS_OPT_INCLUDE_IGNORED, GIT_STATUS_OPT_INCLUDE_UNTRACKED, and GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS.  Those options are bundled together as <code>GIT_STATUS_OPT_DEFAULTS</code> if you want them as a baseline.</p>\n","fields":[{"type":"int","name":"GIT_STATUS_OPT_INCLUDE_UNTRACKED","comments":"","value":1},{"type":"int","name":"GIT_STATUS_OPT_INCLUDE_IGNORED","comments":"","value":2},{"type":"int","name":"GIT_STATUS_OPT_INCLUDE_UNMODIFIED","comments":"","value":4},{"type":"int","name":"GIT_STATUS_OPT_EXCLUDE_SUBMODULES","comments":"","value":8},{"type":"int","name":"GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS","comments":"","value":16},{"type":"int","name":"GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH","comments":"","value":32},{"type":"int","name":"GIT_STATUS_OPT_RECURSE_IGNORED_DIRS","comments":"","value":64},{"type":"int","name":"GIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX","comments":"","value":128},{"type":"int","name":"GIT_STATUS_OPT_RENAMES_INDEX_TO_WORKDIR","comments":"","value":256},{"type":"int","name":"GIT_STATUS_OPT_SORT_CASE_SENSITIVELY","comments":"","value":512},{"type":"int","name":"GIT_STATUS_OPT_SORT_CASE_INSENSITIVELY","comments":"","value":1024}],"used":{"returns":[],"needs":[]}}],["git_status_show_t",{"decl":["GIT_STATUS_SHOW_INDEX_AND_WORKDIR","GIT_STATUS_SHOW_INDEX_ONLY","GIT_STATUS_SHOW_WORKDIR_ONLY","GIT_STATUS_SHOW_INDEX_THEN_WORKDIR"],"type":"enum","file":"git2/status.h","line":77,"lineto":82,"block":"GIT_STATUS_SHOW_INDEX_AND_WORKDIR\nGIT_STATUS_SHOW_INDEX_ONLY\nGIT_STATUS_SHOW_WORKDIR_ONLY\nGIT_STATUS_SHOW_INDEX_THEN_WORKDIR","tdef":"typedef","description":" For extended status, select the files on which to report status.","comments":"<ul>\n<li>GIT_STATUS_SHOW_INDEX_AND_WORKDIR is the default.  This roughly   matches <code>git status --porcelain</code> where each file gets a callback   indicating its status in the index and in the working directory. - GIT_STATUS_SHOW_INDEX_ONLY only gives status based on HEAD to index   comparison, not looking at working directory changes. - GIT_STATUS_SHOW_WORKDIR_ONLY only gives status based on index to   working directory comparison, not comparing the index to the HEAD. - GIT_STATUS_SHOW_INDEX_THEN_WORKDIR runs index-only then workdir-only,   issuing (up to) two callbacks per file (first index, then workdir).   This is slightly more efficient than separate calls and can make it   easier to emulate plain <code>git status</code> text output.</li>\n</ul>\n","fields":[{"type":"int","name":"GIT_STATUS_SHOW_INDEX_AND_WORKDIR","comments":"","value":0},{"type":"int","name":"GIT_STATUS_SHOW_INDEX_ONLY","comments":"","value":1},{"type":"int","name":"GIT_STATUS_SHOW_WORKDIR_ONLY","comments":"","value":2},{"type":"int","name":"GIT_STATUS_SHOW_INDEX_THEN_WORKDIR","comments":"","value":3}],"used":{"returns":[],"needs":[]}}],["git_status_t",{"decl":["GIT_STATUS_CURRENT","GIT_STATUS_INDEX_NEW","GIT_STATUS_INDEX_MODIFIED","GIT_STATUS_INDEX_DELETED","GIT_STATUS_INDEX_RENAMED","GIT_STATUS_INDEX_TYPECHANGE","GIT_STATUS_WT_NEW","GIT_STATUS_WT_MODIFIED","GIT_STATUS_WT_DELETED","GIT_STATUS_WT_TYPECHANGE","GIT_STATUS_WT_RENAMED","GIT_STATUS_IGNORED"],"type":"enum","file":"git2/status.h","line":32,"lineto":48,"block":"GIT_STATUS_CURRENT\nGIT_STATUS_INDEX_NEW\nGIT_STATUS_INDEX_MODIFIED\nGIT_STATUS_INDEX_DELETED\nGIT_STATUS_INDEX_RENAMED\nGIT_STATUS_INDEX_TYPECHANGE\nGIT_STATUS_WT_NEW\nGIT_STATUS_WT_MODIFIED\nGIT_STATUS_WT_DELETED\nGIT_STATUS_WT_TYPECHANGE\nGIT_STATUS_WT_RENAMED\nGIT_STATUS_IGNORED","tdef":"typedef","description":" Status flags for a single file.","comments":"<p>A combination of these values will be returned to indicate the status of a file.  Status compares the working directory, the index, and the current HEAD of the repository.  The <code>GIT_STATUS_INDEX</code> set of flags represents the status of file in the index relative to the HEAD, and the <code>GIT_STATUS_WT</code> set of flags represent the status of the file in the working directory relative to the index.</p>\n","fields":[{"type":"int","name":"GIT_STATUS_CURRENT","comments":"","value":0},{"type":"int","name":"GIT_STATUS_INDEX_NEW","comments":"","value":1},{"type":"int","name":"GIT_STATUS_INDEX_MODIFIED","comments":"","value":2},{"type":"int","name":"GIT_STATUS_INDEX_DELETED","comments":"","value":4},{"type":"int","name":"GIT_STATUS_INDEX_RENAMED","comments":"","value":8},{"type":"int","name":"GIT_STATUS_INDEX_TYPECHANGE","comments":"","value":16},{"type":"int","name":"GIT_STATUS_WT_NEW","comments":"","value":128},{"type":"int","name":"GIT_STATUS_WT_MODIFIED","comments":"","value":256},{"type":"int","name":"GIT_STATUS_WT_DELETED","comments":"","value":512},{"type":"int","name":"GIT_STATUS_WT_TYPECHANGE","comments":"","value":1024},{"type":"int","name":"GIT_STATUS_WT_RENAMED","comments":"","value":2048},{"type":"int","name":"GIT_STATUS_IGNORED","comments":"","value":16384}],"used":{"returns":[],"needs":[]}}],["git_strarray",{"decl":["char ** strings","size_t count"],"type":"struct","value":"git_strarray","file":"git2/strarray.h","line":22,"lineto":25,"block":"char ** strings\nsize_t count","tdef":"typedef","description":" Array of strings ","comments":"","fields":[{"type":"char **","name":"strings","comments":""},{"type":"size_t","name":"count","comments":""}],"used":{"returns":[],"needs":["git_index_add_all","git_index_remove_all","git_index_update_all","git_reference_list","git_remote_get_fetch_refspecs","git_remote_get_push_refspecs","git_remote_list","git_strarray_copy","git_strarray_free","git_tag_list","git_tag_list_match"]}}],["git_submodule",{"decl":"git_submodule","type":"struct","value":"git_submodule","file":"git2/submodule.h","line":32,"lineto":32,"tdef":"typedef","description":" Opaque structure representing a submodule.","comments":"<p>Submodule support in libgit2 builds a list of known submodules and keeps it in the repository.  The list is built from the .gitmodules file, the .git/config file, the index, and the HEAD tree.  Items in the working directory that look like submodules (i.e. a git repo) but are not mentioned in those places won&#39;t be tracked.</p>\n","used":{"returns":["git_submodule_ignore","git_submodule_set_ignore","git_submodule_set_update","git_submodule_update"],"needs":["git_submodule_add_finalize","git_submodule_add_setup","git_submodule_add_to_index","git_submodule_fetch_recurse_submodules","git_submodule_foreach","git_submodule_head_id","git_submodule_ignore","git_submodule_index_id","git_submodule_init","git_submodule_location","git_submodule_lookup","git_submodule_name","git_submodule_open","git_submodule_owner","git_submodule_path","git_submodule_reload","git_submodule_save","git_submodule_set_fetch_recurse_submodules","git_submodule_set_ignore","git_submodule_set_update","git_submodule_set_url","git_submodule_status","git_submodule_sync","git_submodule_update","git_submodule_url","git_submodule_wd_id"]}}],["git_submodule_ignore_t",{"decl":["GIT_SUBMODULE_IGNORE_DEFAULT","GIT_SUBMODULE_IGNORE_NONE","GIT_SUBMODULE_IGNORE_UNTRACKED","GIT_SUBMODULE_IGNORE_DIRTY","GIT_SUBMODULE_IGNORE_ALL"],"type":"enum","file":"git2/submodule.h","line":55,"lineto":61,"block":"GIT_SUBMODULE_IGNORE_DEFAULT\nGIT_SUBMODULE_IGNORE_NONE\nGIT_SUBMODULE_IGNORE_UNTRACKED\nGIT_SUBMODULE_IGNORE_DIRTY\nGIT_SUBMODULE_IGNORE_ALL","tdef":"typedef","description":" Values that could be specified for how closely to examine the\n working directory when getting submodule status.","comments":"<p>Use the DEFUALT value if you have altered the ignore value via <code>git_submodule_set_ignore()</code> and wish to reset to the original value.</p>\n","fields":[{"type":"int","name":"GIT_SUBMODULE_IGNORE_DEFAULT","comments":"","value":-1},{"type":"int","name":"GIT_SUBMODULE_IGNORE_NONE","comments":"","value":0},{"type":"int","name":"GIT_SUBMODULE_IGNORE_UNTRACKED","comments":"","value":1},{"type":"int","name":"GIT_SUBMODULE_IGNORE_DIRTY","comments":"","value":2},{"type":"int","name":"GIT_SUBMODULE_IGNORE_ALL","comments":"","value":3}],"used":{"returns":["git_submodule_ignore","git_submodule_set_ignore"],"needs":["git_submodule_set_ignore"]}}],["git_submodule_status_t",{"decl":["GIT_SUBMODULE_STATUS_IN_HEAD","GIT_SUBMODULE_STATUS_IN_INDEX","GIT_SUBMODULE_STATUS_IN_CONFIG","GIT_SUBMODULE_STATUS_IN_WD","GIT_SUBMODULE_STATUS_INDEX_ADDED","GIT_SUBMODULE_STATUS_INDEX_DELETED","GIT_SUBMODULE_STATUS_INDEX_MODIFIED","GIT_SUBMODULE_STATUS_WD_UNINITIALIZED","GIT_SUBMODULE_STATUS_WD_ADDED","GIT_SUBMODULE_STATUS_WD_DELETED","GIT_SUBMODULE_STATUS_WD_MODIFIED","GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED","GIT_SUBMODULE_STATUS_WD_WD_MODIFIED","GIT_SUBMODULE_STATUS_WD_UNTRACKED"],"type":"enum","file":"git2/submodule.h","line":105,"lineto":120,"block":"GIT_SUBMODULE_STATUS_IN_HEAD\nGIT_SUBMODULE_STATUS_IN_INDEX\nGIT_SUBMODULE_STATUS_IN_CONFIG\nGIT_SUBMODULE_STATUS_IN_WD\nGIT_SUBMODULE_STATUS_INDEX_ADDED\nGIT_SUBMODULE_STATUS_INDEX_DELETED\nGIT_SUBMODULE_STATUS_INDEX_MODIFIED\nGIT_SUBMODULE_STATUS_WD_UNINITIALIZED\nGIT_SUBMODULE_STATUS_WD_ADDED\nGIT_SUBMODULE_STATUS_WD_DELETED\nGIT_SUBMODULE_STATUS_WD_MODIFIED\nGIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED\nGIT_SUBMODULE_STATUS_WD_WD_MODIFIED\nGIT_SUBMODULE_STATUS_WD_UNTRACKED","tdef":"typedef","description":" Return codes for submodule status.","comments":"<p>A combination of these flags will be returned to describe the status of a submodule.  Depending on the &quot;ignore&quot; property of the submodule, some of the flags may never be returned because they indicate changes that are supposed to be ignored.</p>\n\n<p>Submodule info is contained in 4 places: the HEAD tree, the index, config files (both .git/config and .gitmodules), and the working directory.  Any or all of those places might be missing information about the submodule depending on what state the repo is in.  We consider all four places to build the combination of status flags.</p>\n\n<p>There are four values that are not really status, but give basic info about what sources of submodule data are available.  These will be returned even if ignore is set to &quot;ALL&quot;.</p>\n\n<ul>\n<li>IN_HEAD   - superproject head contains submodule * IN_INDEX  - superproject index contains submodule * IN_CONFIG - superproject gitmodules has submodule * IN_WD     - superproject workdir has submodule</li>\n</ul>\n\n<p>The following values will be returned so long as ignore is not &quot;ALL&quot;.</p>\n\n<ul>\n<li>INDEX_ADDED       - in index, not in head * INDEX_DELETED     - in head, not in index * INDEX_MODIFIED    - index and head don&#39;t match * WD_UNINITIALIZED  - workdir contains empty directory * WD_ADDED          - in workdir, not index * WD_DELETED        - in index, not workdir * WD_MODIFIED       - index and workdir head don&#39;t match</li>\n</ul>\n\n<p>The following can only be returned if ignore is &quot;NONE&quot; or &quot;UNTRACKED&quot;.</p>\n\n<ul>\n<li>WD_INDEX_MODIFIED - submodule workdir index is dirty * WD_WD_MODIFIED    - submodule workdir has modified files</li>\n</ul>\n\n<p>Lastly, the following will only be returned for ignore &quot;NONE&quot;.</p>\n\n<ul>\n<li>WD_UNTRACKED      - wd contains untracked files</li>\n</ul>\n","fields":[{"type":"int","name":"GIT_SUBMODULE_STATUS_IN_HEAD","comments":"","value":1},{"type":"int","name":"GIT_SUBMODULE_STATUS_IN_INDEX","comments":"","value":2},{"type":"int","name":"GIT_SUBMODULE_STATUS_IN_CONFIG","comments":"","value":4},{"type":"int","name":"GIT_SUBMODULE_STATUS_IN_WD","comments":"","value":8},{"type":"int","name":"GIT_SUBMODULE_STATUS_INDEX_ADDED","comments":"","value":16},{"type":"int","name":"GIT_SUBMODULE_STATUS_INDEX_DELETED","comments":"","value":32},{"type":"int","name":"GIT_SUBMODULE_STATUS_INDEX_MODIFIED","comments":"","value":64},{"type":"int","name":"GIT_SUBMODULE_STATUS_WD_UNINITIALIZED","comments":"","value":128},{"type":"int","name":"GIT_SUBMODULE_STATUS_WD_ADDED","comments":"","value":256},{"type":"int","name":"GIT_SUBMODULE_STATUS_WD_DELETED","comments":"","value":512},{"type":"int","name":"GIT_SUBMODULE_STATUS_WD_MODIFIED","comments":"","value":1024},{"type":"int","name":"GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED","comments":"","value":2048},{"type":"int","name":"GIT_SUBMODULE_STATUS_WD_WD_MODIFIED","comments":"","value":4096},{"type":"int","name":"GIT_SUBMODULE_STATUS_WD_UNTRACKED","comments":"","value":8192}],"used":{"returns":[],"needs":[]}}],["git_submodule_update_t",{"decl":["GIT_SUBMODULE_UPDATE_DEFAULT","GIT_SUBMODULE_UPDATE_CHECKOUT","GIT_SUBMODULE_UPDATE_REBASE","GIT_SUBMODULE_UPDATE_MERGE","GIT_SUBMODULE_UPDATE_NONE"],"type":"enum","file":"git2/submodule.h","line":40,"lineto":46,"block":"GIT_SUBMODULE_UPDATE_DEFAULT\nGIT_SUBMODULE_UPDATE_CHECKOUT\nGIT_SUBMODULE_UPDATE_REBASE\nGIT_SUBMODULE_UPDATE_MERGE\nGIT_SUBMODULE_UPDATE_NONE","tdef":"typedef","description":" Values that could be specified for the update rule of a submodule.","comments":"<p>Use the DEFAULT value if you have altered the update value via <code>git_submodule_set_update()</code> and wish to reset to the original default.</p>\n","fields":[{"type":"int","name":"GIT_SUBMODULE_UPDATE_DEFAULT","comments":"","value":-1},{"type":"int","name":"GIT_SUBMODULE_UPDATE_CHECKOUT","comments":"","value":0},{"type":"int","name":"GIT_SUBMODULE_UPDATE_REBASE","comments":"","value":1},{"type":"int","name":"GIT_SUBMODULE_UPDATE_MERGE","comments":"","value":2},{"type":"int","name":"GIT_SUBMODULE_UPDATE_NONE","comments":"","value":3}],"used":{"returns":["git_submodule_set_update","git_submodule_update"],"needs":["git_submodule_set_update"]}}],["git_tag",{"decl":"git_tag","type":"struct","value":"git_tag","file":"git2/types.h","line":114,"lineto":114,"tdef":"typedef","description":" Parsed representation of a tag object. ","comments":"","used":{"returns":[],"needs":["git_tag_foreach","git_tag_free","git_tag_id","git_tag_lookup","git_tag_lookup_prefix","git_tag_message","git_tag_name","git_tag_owner","git_tag_peel","git_tag_tagger","git_tag_target","git_tag_target_id","git_tag_target_type"]}}],["git_time",{"decl":["git_time_t time","int offset"],"type":"struct","value":"git_time","file":"git2/types.h","line":156,"lineto":159,"block":"git_time_t time\nint offset","tdef":"typedef","description":" Time in a signature ","comments":"","fields":[{"type":"git_time_t","name":"time","comments":""},{"type":"int","name":"offset","comments":" time in seconds from epoch "}],"used":{"returns":["git_commit_time"],"needs":["git_signature_new"]}}],["git_trace_level_t",{"decl":["GIT_TRACE_NONE","GIT_TRACE_FATAL","GIT_TRACE_ERROR","GIT_TRACE_WARN","GIT_TRACE_INFO","GIT_TRACE_DEBUG","GIT_TRACE_TRACE"],"type":"enum","file":"git2/trace.h","line":26,"lineto":47,"block":"GIT_TRACE_NONE\nGIT_TRACE_FATAL\nGIT_TRACE_ERROR\nGIT_TRACE_WARN\nGIT_TRACE_INFO\nGIT_TRACE_DEBUG\nGIT_TRACE_TRACE","tdef":"typedef","description":" Available tracing levels.  When tracing is set to a particular level,\n callers will be provided tracing at the given level and all lower levels.","comments":"","fields":[{"type":"int","name":"GIT_TRACE_NONE","comments":"<p>No tracing will be performed. </p>\n","value":0},{"type":"int","name":"GIT_TRACE_FATAL","comments":"<p>Severe errors that may impact the program&#39;s execution </p>\n","value":1},{"type":"int","name":"GIT_TRACE_ERROR","comments":"<p>Errors that do not impact the program&#39;s execution </p>\n","value":2},{"type":"int","name":"GIT_TRACE_WARN","comments":"<p>Warnings that suggest abnormal data </p>\n","value":3},{"type":"int","name":"GIT_TRACE_INFO","comments":"<p>Informational messages about program execution </p>\n","value":4},{"type":"int","name":"GIT_TRACE_DEBUG","comments":"<p>Detailed data that allows for debugging </p>\n","value":5},{"type":"int","name":"GIT_TRACE_TRACE","comments":"<p>Exceptionally detailed debugging data </p>\n","value":6}],"used":{"returns":[],"needs":["git_trace_callback","git_trace_set"]}}],["git_transfer_progress",{"decl":["unsigned int total_objects","unsigned int indexed_objects","unsigned int received_objects","size_t received_bytes"],"type":"struct","value":"git_transfer_progress","file":"git2/types.h","line":216,"lineto":221,"block":"unsigned int total_objects\nunsigned int indexed_objects\nunsigned int received_objects\nsize_t received_bytes","tdef":"typedef","description":" This is passed as the first argument to the callback to allow the\n user to see the progress.","comments":"","fields":[{"type":"unsigned int","name":"total_objects","comments":""},{"type":"unsigned int","name":"indexed_objects","comments":""},{"type":"unsigned int","name":"received_objects","comments":""},{"type":"size_t","name":"received_bytes","comments":""}],"used":{"returns":["git_remote_stats"],"needs":["git_indexer_stream_add","git_indexer_stream_finalize","git_indexer_stream_new","git_odb_write_pack","git_packbuilder_write","git_remote_download","git_transfer_progress_callback"]}}],["git_tree",{"decl":"git_tree","type":"struct","value":"git_tree","file":"git2/types.h","line":126,"lineto":126,"tdef":"typedef","description":" Representation of a tree object. ","comments":"","used":{"returns":["git_tree_entry_byindex","git_tree_entry_byname","git_tree_entry_byoid","git_tree_entry_dup","git_treebuilder_get"],"needs":["git_commit_create","git_commit_create_v","git_commit_tree","git_diff_tree_to_index","git_diff_tree_to_tree","git_diff_tree_to_workdir","git_index_read_tree","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entry_byoid","git_tree_entry_bypath","git_tree_entry_cmp","git_tree_entry_dup","git_tree_entry_filemode","git_tree_entry_free","git_tree_entry_id","git_tree_entry_name","git_tree_entry_to_object","git_tree_entry_type","git_tree_entrycount","git_tree_free","git_tree_id","git_tree_lookup","git_tree_lookup_prefix","git_tree_owner","git_tree_walk","git_treebuilder_clear","git_treebuilder_create","git_treebuilder_entrycount","git_treebuilder_filter","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_write","git_treewalk_cb"]}}],["git_tree_entry",{"decl":"git_tree_entry","type":"struct","value":"git_tree_entry","file":"git2/types.h","line":123,"lineto":123,"tdef":"typedef","description":" Representation of each one of the entries in a tree object. ","comments":"","used":{"returns":["git_tree_entry_byindex","git_tree_entry_byname","git_tree_entry_byoid","git_tree_entry_dup","git_treebuilder_get"],"needs":["git_tree_entry_bypath","git_tree_entry_cmp","git_tree_entry_dup","git_tree_entry_filemode","git_tree_entry_free","git_tree_entry_id","git_tree_entry_name","git_tree_entry_to_object","git_tree_entry_type","git_treebuilder_insert","git_treewalk_cb"]}}],["git_treebuilder",{"decl":"git_treebuilder","type":"struct","value":"git_treebuilder","file":"git2/types.h","line":129,"lineto":129,"tdef":"typedef","description":" Constructor for in-memory trees ","comments":"","used":{"returns":[],"needs":["git_treebuilder_clear","git_treebuilder_create","git_treebuilder_entrycount","git_treebuilder_filter","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_write"]}}],["git_treewalk_mode",{"decl":["GIT_TREEWALK_PRE","GIT_TREEWALK_POST"],"type":"enum","file":"git2/tree.h","line":363,"lineto":366,"block":"GIT_TREEWALK_PRE\nGIT_TREEWALK_POST","tdef":"typedef","description":" Tree traversal modes ","comments":"","fields":[{"type":"int","name":"GIT_TREEWALK_PRE","comments":"","value":0},{"type":"int","name":"GIT_TREEWALK_POST","comments":"","value":1}],"used":{"returns":[],"needs":["git_tree_walk"]}}]],"prefix":"include","groups":[["attr",["git_attr_add_macro","git_attr_cache_flush","git_attr_foreach","git_attr_get","git_attr_get_many"]],["blob",["git_blob_create_frombuffer","git_blob_create_fromchunks","git_blob_create_fromdisk","git_blob_create_fromworkdir","git_blob_free","git_blob_id","git_blob_is_binary","git_blob_lookup","git_blob_lookup_prefix","git_blob_owner","git_blob_rawcontent","git_blob_rawsize"]],["branch",["git_branch_create","git_branch_delete","git_branch_foreach","git_branch_is_head","git_branch_lookup","git_branch_move","git_branch_name","git_branch_remote_name","git_branch_set_upstream","git_branch_upstream","git_branch_upstream_name"]],["checkout",["git_checkout_head","git_checkout_index","git_checkout_tree"]],["commit",["git_commit_author","git_commit_committer","git_commit_create","git_commit_create_v","git_commit_free","git_commit_id","git_commit_lookup","git_commit_lookup_prefix","git_commit_message","git_commit_message_encoding","git_commit_nth_gen_ancestor","git_commit_owner","git_commit_parent","git_commit_parent_id","git_commit_parentcount","git_commit_time","git_commit_time_offset","git_commit_tree","git_commit_tree_id"]],["config",["git_config_add_file_ondisk","git_config_delete_entry","git_config_find_global","git_config_find_system","git_config_find_xdg","git_config_foreach","git_config_foreach_match","git_config_free","git_config_get_bool","git_config_get_entry","git_config_get_int32","git_config_get_int64","git_config_get_mapped","git_config_get_multivar","git_config_get_string","git_config_lookup_map_value","git_config_new","git_config_open_default","git_config_open_global","git_config_open_level","git_config_open_ondisk","git_config_parse_bool","git_config_parse_int32","git_config_parse_int64","git_config_refresh","git_config_set_bool","git_config_set_int32","git_config_set_int64","git_config_set_multivar","git_config_set_string"]],["cred",["git_cred_userpass_plaintext_new"]],["diff",["git_diff_blob_to_buffer","git_diff_blobs","git_diff_find_similar","git_diff_foreach","git_diff_get_patch","git_diff_index_to_workdir","git_diff_list_free","git_diff_merge","git_diff_num_deltas","git_diff_num_deltas_of_type","git_diff_patch_delta","git_diff_patch_free","git_diff_patch_from_blob_and_buffer","git_diff_patch_from_blobs","git_diff_patch_get_hunk","git_diff_patch_get_line_in_hunk","git_diff_patch_line_stats","git_diff_patch_num_hunks","git_diff_patch_num_lines_in_hunk","git_diff_patch_print","git_diff_patch_to_str","git_diff_print_compact","git_diff_print_patch","git_diff_print_raw","git_diff_status_char","git_diff_tree_to_index","git_diff_tree_to_tree","git_diff_tree_to_workdir"]],["git2_clone",["git_clone"]],["git2_revparse",["git_revparse"]],["giterr",["giterr_clear","giterr_last","giterr_set_oom","giterr_set_str"]],["graph",["git_graph_ahead_behind"]],["ignore",["git_ignore_add_rule","git_ignore_clear_internal_rules","git_ignore_path_is_ignored"]],["index",["git_index_add","git_index_add_all","git_index_add_bypath","git_index_caps","git_index_clear","git_index_conflict_add","git_index_conflict_cleanup","git_index_conflict_get","git_index_conflict_iterator_free","git_index_conflict_iterator_new","git_index_conflict_next","git_index_conflict_remove","git_index_entry_stage","git_index_entrycount","git_index_find","git_index_free","git_index_get_byindex","git_index_get_bypath","git_index_has_conflicts","git_index_new","git_index_open","git_index_owner","git_index_read","git_index_read_tree","git_index_remove","git_index_remove_all","git_index_remove_bypath","git_index_remove_directory","git_index_set_caps","git_index_update_all","git_index_write","git_index_write_tree","git_index_write_tree_to"]],["indexer",["git_indexer_stream_add","git_indexer_stream_finalize","git_indexer_stream_free","git_indexer_stream_hash","git_indexer_stream_new"]],["libgit2",["git_libgit2_capabilities","git_libgit2_opts","git_libgit2_version"]],["message",["git_message_prettify"]],["note",["git_note_create","git_note_default_ref","git_note_foreach","git_note_free","git_note_iterator_free","git_note_iterator_new","git_note_message","git_note_next","git_note_oid","git_note_read","git_note_remove"]],["object",["git_object__size","git_object_dup","git_object_free","git_object_id","git_object_lookup","git_object_lookup_prefix","git_object_owner","git_object_peel","git_object_string2type","git_object_type","git_object_type2string","git_object_typeisloose"]],["odb",["git_odb_add_alternate","git_odb_add_backend","git_odb_add_disk_alternate","git_odb_exists","git_odb_foreach","git_odb_free","git_odb_get_backend","git_odb_hash","git_odb_hashfile","git_odb_new","git_odb_num_backends","git_odb_object_data","git_odb_object_free","git_odb_object_id","git_odb_object_size","git_odb_object_type","git_odb_open","git_odb_open_rstream","git_odb_open_wstream","git_odb_read","git_odb_read_header","git_odb_read_prefix","git_odb_refresh","git_odb_write","git_odb_write_pack"]],["oid",["git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_equal","git_oid_fmt","git_oid_fromraw","git_oid_fromstr","git_oid_fromstrn","git_oid_fromstrp","git_oid_iszero","git_oid_ncmp","git_oid_nfmt","git_oid_pathfmt","git_oid_shorten_add","git_oid_shorten_free","git_oid_shorten_new","git_oid_strcmp","git_oid_streq","git_oid_tostr"]],["packbuilder",["git_packbuilder_foreach","git_packbuilder_free","git_packbuilder_insert","git_packbuilder_insert_commit","git_packbuilder_insert_tree","git_packbuilder_new","git_packbuilder_object_count","git_packbuilder_set_threads","git_packbuilder_write","git_packbuilder_written"]],["refdb",["git_refdb_compress","git_refdb_free","git_refdb_new","git_refdb_open"]],["reference",["git_reference_cmp","git_reference_create","git_reference_delete","git_reference_dwim","git_reference_foreach","git_reference_foreach_glob","git_reference_free","git_reference_has_log","git_reference_is_branch","git_reference_is_remote","git_reference_is_valid_name","git_reference_iterator_free","git_reference_iterator_glob_new","git_reference_iterator_new","git_reference_list","git_reference_lookup","git_reference_name","git_reference_name_to_id","git_reference_next","git_reference_normalize_name","git_reference_owner","git_reference_peel","git_reference_rename","git_reference_resolve","git_reference_set_target","git_reference_shorthand","git_reference_symbolic_create","git_reference_symbolic_set_target","git_reference_symbolic_target","git_reference_target","git_reference_target_peel","git_reference_type"]],["reflog",["git_reflog_append","git_reflog_delete","git_reflog_drop","git_reflog_entry_byindex","git_reflog_entry_committer","git_reflog_entry_id_new","git_reflog_entry_id_old","git_reflog_entry_message","git_reflog_entrycount","git_reflog_free","git_reflog_read","git_reflog_rename","git_reflog_write"]],["refspec",["git_refspec_direction","git_refspec_dst","git_refspec_dst_matches","git_refspec_force","git_refspec_rtransform","git_refspec_src","git_refspec_src_matches","git_refspec_string","git_refspec_transform"]],["remote",["git_remote_add_fetch","git_remote_add_push","git_remote_autotag","git_remote_check_cert","git_remote_clear_refspecs","git_remote_connect","git_remote_connected","git_remote_create","git_remote_create_inmemory","git_remote_disconnect","git_remote_download","git_remote_free","git_remote_get_fetch_refspecs","git_remote_get_push_refspecs","git_remote_get_refspec","git_remote_is_valid_name","git_remote_list","git_remote_load","git_remote_ls","git_remote_name","git_remote_pushurl","git_remote_refspec_count","git_remote_remove_refspec","git_remote_rename","git_remote_save","git_remote_set_autotag","git_remote_set_callbacks","git_remote_set_cred_acquire_cb","git_remote_set_pushurl","git_remote_set_transport","git_remote_set_update_fetchhead","git_remote_set_url","git_remote_stats","git_remote_stop","git_remote_supported_url","git_remote_update_fetchhead","git_remote_update_tips","git_remote_url","git_remote_valid_url"]],["repository",["git_repository_config","git_repository_detach_head","git_repository_discover","git_repository_fetchhead_foreach","git_repository_free","git_repository_get_namespace","git_repository_hashfile","git_repository_head","git_repository_head_detached","git_repository_head_orphan","git_repository_index","git_repository_init","git_repository_init_ext","git_repository_is_bare","git_repository_is_empty","git_repository_is_shallow","git_repository_merge_cleanup","git_repository_mergehead_foreach","git_repository_message","git_repository_message_remove","git_repository_odb","git_repository_open","git_repository_open_bare","git_repository_open_ext","git_repository_path","git_repository_refdb","git_repository_set_head","git_repository_set_head_detached","git_repository_set_namespace","git_repository_set_workdir","git_repository_state","git_repository_workdir","git_repository_wrap_odb"]],["revparse",["git_revparse_ext","git_revparse_single"]],["revwalk",["git_revwalk_free","git_revwalk_hide","git_revwalk_hide_glob","git_revwalk_hide_head","git_revwalk_hide_ref","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_push_glob","git_revwalk_push_head","git_revwalk_push_range","git_revwalk_push_ref","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]],["signature",["git_signature_dup","git_signature_free","git_signature_new","git_signature_now"]],["smart",["git_smart_subtransport_git","git_smart_subtransport_http","git_smart_subtransport_ssh"]],["stash",["git_stash_drop","git_stash_foreach"]],["status",["git_status_byindex","git_status_file","git_status_foreach","git_status_foreach_ext","git_status_list_entrycount","git_status_list_free","git_status_list_new","git_status_should_ignore"]],["strarray",["git_strarray_copy","git_strarray_free"]],["submodule",["git_submodule_add_finalize","git_submodule_add_setup","git_submodule_add_to_index","git_submodule_fetch_recurse_submodules","git_submodule_foreach","git_submodule_head_id","git_submodule_ignore","git_submodule_index_id","git_submodule_init","git_submodule_location","git_submodule_lookup","git_submodule_name","git_submodule_open","git_submodule_owner","git_submodule_path","git_submodule_reload","git_submodule_reload_all","git_submodule_save","git_submodule_set_fetch_recurse_submodules","git_submodule_set_ignore","git_submodule_set_update","git_submodule_set_url","git_submodule_status","git_submodule_sync","git_submodule_update","git_submodule_url","git_submodule_wd_id"]],["tag",["git_tag_annotation_create","git_tag_create","git_tag_create_frombuffer","git_tag_create_lightweight","git_tag_delete","git_tag_foreach","git_tag_free","git_tag_id","git_tag_list","git_tag_list_match","git_tag_lookup","git_tag_lookup_prefix","git_tag_message","git_tag_name","git_tag_owner","git_tag_peel","git_tag_tagger","git_tag_target","git_tag_target_id","git_tag_target_type"]],["threads",["git_threads_init","git_threads_shutdown"]],["trace",["git_trace_set"]],["transport",["git_transport_dummy","git_transport_local","git_transport_new","git_transport_smart"]],["tree",["git_tree_entry_byindex","git_tree_entry_byname","git_tree_entry_byoid","git_tree_entry_bypath","git_tree_entry_cmp","git_tree_entry_dup","git_tree_entry_filemode","git_tree_entry_free","git_tree_entry_id","git_tree_entry_name","git_tree_entry_to_object","git_tree_entry_type","git_tree_entrycount","git_tree_free","git_tree_id","git_tree_lookup","git_tree_lookup_prefix","git_tree_owner","git_tree_walk"]],["treebuilder",["git_treebuilder_clear","git_treebuilder_create","git_treebuilder_entrycount","git_treebuilder_filter","git_treebuilder_free","git_treebuilder_get","git_treebuilder_insert","git_treebuilder_remove","git_treebuilder_write"]]],"examples":[["cat-file.c","ex/v0.19.0/cat-file.html"],["diff.c","ex/v0.19.0/diff.html"],["general.c","ex/v0.19.0/general.html"],["network/clone.c","ex/v0.19.0/network/clone.html"],["network/fetch.c","ex/v0.19.0/network/fetch.html"],["network/git2.c","ex/v0.19.0/network/git2.html"],["network/index-pack.c","ex/v0.19.0/network/index-pack.html"],["network/ls-remote.c","ex/v0.19.0/network/ls-remote.html"],["rev-list.c","ex/v0.19.0/rev-list.html"],["showindex.c","ex/v0.19.0/showindex.html"],["status.c","ex/v0.19.0/status.html"]]}